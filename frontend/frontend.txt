This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-28T19:58:42.190Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
index.html
package.json
src/App.vue
src/assets/styles.scss
src/components/auth/CustomerRegisterForm.vue
src/components/auth/LoginForm.vue
src/components/auth/ProfessionalRegisterForm.vue
src/layouts/BaseLayout.vue
src/main.js
src/router/index.js
src/services/api.js
src/store/index.js
src/store/modules/auth.js
src/views/admin/AdminProfessionalManagement.vue
src/views/admin/AdminServiceManagement.vue
src/views/admin/Dashboard.vue
src/views/customer/Dashboard.vue
src/views/customer/ServiceBrowser.vue
src/views/customer/ServiceRequests.vue
src/views/customer/ServiceSearch.vue
src/views/Login.vue
src/views/NotFound.vue
src/views/professional/Dashboard.vue
src/views/professional/ServiceRequests.vue
src/views/Register.vue
vite.config.js

================================================================
Repository Files
================================================================

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Influencer Engagement & Sponsorship Coordination Platform</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "frontend",
  "version": "0.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@vuelidate/core": "^2.0.3",
    "@vuelidate/validators": "^2.0.4",
    "axios": "^1.7.8",
    "bootstrap": "^5.3.3",
    "bootstrap-icons": "^1.11.3",
    "moment": "^2.30.1",
    "vue": "^3.4.29",
    "vue-router": "^4.3.3",
    "vuex": "^4.1.0"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^5.0.5",
    "npm-run-all2": "^6.2.0",
    "sass": "^1.81.0",
    "vite": "^5.3.1",
    "vite-plugin-vue-devtools": "^7.3.1"
  }
}

================
File: src/App.vue
================
// frontend/src/App.vue
<template>
  <base-layout />
</template>

<script>
import BaseLayout from './layouts/BaseLayout.vue'

export default {
  name: 'App',
  components: {
    BaseLayout
  }
}
</script>

<style>
/* Global styles */
body {
  margin: 0;
  font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", "Noto Sans", "Liberation Sans", Arial, sans-serif;
}

.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.3s;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}

/* Bootstrap overrides and customizations */
.btn {
  font-weight: 500;
}

.form-control:focus {
  box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.15);
}

.invalid-feedback {
  font-size: 0.875em;
}
</style>

================
File: src/assets/styles.scss
================
*, *::before, *::after {
    box-sizing: border-box;
  }
  * {
    margin: 0;
  }
  body {
    line-height: 1.5;
    -webkit-font-smoothing: antialiased;
  }
  img, picture, video, canvas, svg {
    display: block;
    max-width: 100%;
  }
  input, button, textarea, select {
    font: inherit;
  }
  p, h1, h2, h3, h4, h5, h6 {
    overflow-wrap: break-word;
  }
  #root, #__next {
    isolation: isolate;
  }

================
File: src/components/auth/CustomerRegisterForm.vue
================
// frontend/src/components/auth/CustomerRegisterForm.vue
<template>
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-8 col-lg-6">
                <div class="card shadow">
                    <div class="card-header bg-primary text-white text-center py-3">
                        <h4 class="mb-0">Customer Registration</h4>
                    </div>
                    <div class="card-body p-4">
                        <!-- Alert for errors -->
                        <div v-if="error" class="alert alert-danger alert-dismissible fade show" role="alert">
                            {{ error }}
                            <button type="button" class="btn-close" @click="error = ''"></button>
                        </div>

                        <form @submit.prevent="handleSubmit" class="needs-validation" novalidate>
                            <div class="row g-3">
                                <!-- Username -->
                                <div class="col-12">
                                    <label for="username" class="form-label">Username</label>
                                    <input type="text" id="username" v-model="form.username"
                                        :class="['form-control', { 'is-invalid': v$.form.username.$error }]"
                                        :disabled="isLoading" @input="v$.form.username.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.username.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Email -->
                                <div class="col-12">
                                    <label for="email" class="form-label">Email</label>
                                    <input type="email" id="email" v-model="form.email"
                                        :class="['form-control', { 'is-invalid': v$.form.email.$error }]"
                                        :disabled="isLoading" @input="v$.form.email.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.email.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Full Name -->
                                <div class="col-12">
                                    <label for="fullName" class="form-label">Full Name</label>
                                    <input type="text" id="fullName" v-model="form.full_name"
                                        :class="['form-control', { 'is-invalid': v$.form.full_name.$error }]"
                                        :disabled="isLoading" @input="v$.form.full_name.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.full_name.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Phone -->
                                <div class="col-md-6">
                                    <label for="phone" class="form-label">Phone Number</label>
                                    <input type="tel" id="phone" v-model="form.phone"
                                        :class="['form-control', { 'is-invalid': v$.form.phone.$error }]"
                                        :disabled="isLoading" @input="v$.form.phone.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.phone.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- PIN Code -->
                                <div class="col-md-6">
                                    <label for="pinCode" class="form-label">PIN Code</label>
                                    <input type="text" id="pinCode" v-model="form.pin_code"
                                        :class="['form-control', { 'is-invalid': v$.form.pin_code.$error }]"
                                        :disabled="isLoading" @input="v$.form.pin_code.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.pin_code.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Address -->
                                <div class="col-12">
                                    <label for="address" class="form-label">Address</label>
                                    <textarea id="address" v-model="form.address"
                                        :class="['form-control', { 'is-invalid': v$.form.address.$error }]"
                                        :disabled="isLoading" @input="v$.form.address.$touch()" rows="3"></textarea>
                                    <div class="invalid-feedback">
                                        {{ v$.form.address.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Password -->
                                <div class="col-md-6">
                                    <label for="password" class="form-label">Password</label>
                                    <div class="input-group">
                                        <input :type="showPassword ? 'text' : 'password'" id="password"
                                            v-model="form.password"
                                            :class="['form-control', { 'is-invalid': v$.form.password.$error }]"
                                            :disabled="isLoading" @input="v$.form.password.$touch()" />
                                        <button class="btn btn-outline-secondary" type="button" @click="togglePassword">
                                            <i :class="showPassword ? 'bi bi-eye-slash' : 'bi bi-eye'"></i>
                                        </button>
                                        <div class="invalid-feedback">
                                            {{ v$.form.password.$errors[0]?.$message }}
                                        </div>
                                    </div>
                                </div>

                                <!-- Confirm Password -->
                                <div class="col-md-6">
                                    <label for="confirmPassword" class="form-label">Confirm Password</label>
                                    <input type="password" id="confirmPassword" v-model="form.confirm_password"
                                        :class="['form-control', { 'is-invalid': v$.form.confirm_password.$error }]"
                                        :disabled="isLoading" @input="v$.form.confirm_password.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.confirm_password.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Submit Button -->
                                <div class="col-12">
                                    <div class="d-grid gap-2">
                                        <button type="submit" class="btn btn-primary" :disabled="isLoading">
                                            <span v-if="isLoading" class="spinner-border spinner-border-sm me-1"></span>
                                            {{ isLoading ? 'Creating Account...' : 'Create Account' }}
                                        </button>
                                    </div>
                                </div>

                                <!-- Login Link -->
                                <div class="col-12 text-center">
                                    <p class="mb-0">
                                        Already have an account?
                                        <router-link to="/login">Sign in</router-link>
                                    </p>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref, reactive } from 'vue'
import { useStore } from 'vuex'
import { useRouter } from 'vue-router'
import { useVuelidate } from '@vuelidate/core'
import { required, email, minLength, sameAs, helpers } from '@vuelidate/validators'

export default {
    name: 'CustomerRegisterForm',

    setup() {
        const store = useStore()
        const router = useRouter()
        const isLoading = ref(false)
        const error = ref('')
        const showPassword = ref(false)

        const form = reactive({
            username: '',
            email: '',
            full_name: '',
            phone: '',
            pin_code: '',
            address: '',
            password: '',
            confirm_password: ''
        })

        const rules = {
            form: {
                username: {
                    required,
                    minLength: minLength(4),
                    alphaNum: helpers.regex(/^[a-zA-Z0-9_.-]+$/),
                },
                email: {
                    required,
                    email,
                },
                full_name: {
                    required,
                    minLength: minLength(4),
                    validName: helpers.regex(/^[a-zA-Z\s.-]+$/),
                },
                phone: {
                    required,
                    validPhone: helpers.regex(/^[1-9]\d{9}$/),
                },
                pin_code: {
                    required,
                    validPin: helpers.regex(/^[1-9][0-9]{5}$/),
                },
                address: {
                    required,
                    minLength: minLength(5),
                    maxLength: helpers.withMessage(
                        'Address cannot exceed 200 characters',
                        value => value.length <= 200
                    ),
                },
                password: {
                    required,
                    minLength: minLength(8),
                    hasUppercase: helpers.regex(/[A-Z]/),
                    hasLowercase: helpers.regex(/[a-z]/),
                    hasNumber: helpers.regex(/\d/),
                    hasSpecial: helpers.regex(/[!@#$%^&*(),.?":{}|<>]/),
                },
                confirm_password: {
                    required,
                    sameAsPassword: sameAs('password'),
                }
            }
        }

        const v$ = useVuelidate(rules, { form })

        const handleSubmit = async () => {
            error.value = ''

            // Validate form
            const isValid = await v$.value.$validate()
            if (!isValid) return

            isLoading.value = true

            try {
                const registrationData = {
                    ...form,
                    role: 'customer'
                }

                await store.dispatch('auth/register', registrationData)
                // Show success message and redirect to login
                router.push({
                    path: '/login',
                    query: { registered: 'true' }
                })
            } catch (err) {
                error.value = err.detail || 'An error occurred during registration'
            } finally {
                isLoading.value = false
            }
        }

        const togglePassword = () => {
            showPassword.value = !showPassword.value
        }

        return {
            form,
            v$,
            isLoading,
            error,
            showPassword,
            handleSubmit,
            togglePassword
        }
    }
}
</script>

================
File: src/components/auth/LoginForm.vue
================
// frontend/src/components/auth/LoginForm.vue
<template>
  <div class="container mt-5">
    <div class="row justify-content-center">
      <div class="col-md-6 col-lg-5">
        <div class="card shadow">
          <div class="card-header bg-primary text-white text-center py-3">
            <h4 class="mb-0">Welcome Back!</h4>
          </div>
          <div class="card-body p-4">
            <form @submit.prevent="handleSubmit" novalidate>
              <!-- Alert for errors -->
              <div v-if="error" class="alert alert-danger alert-dismissible fade show" role="alert">
                {{ error }}
                <button type="button" class="btn-close" @click="error = ''"></button>
              </div>

              <!-- Username Field -->
              <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <input type="text" id="username" v-model="form.username"
                  :class="['form-control', { 'is-invalid': v$.form.username.$error }]" :disabled="isLoading"
                  @input="v$.form.username.$touch()" />
                <div class="invalid-feedback">
                  {{ v$.form.username.$errors[0]?.$message }}
                </div>
              </div>

              <!-- Password Field -->
              <div class="mb-4">
                <label for="password" class="form-label">Password</label>
                <div class="input-group">
                  <input :type="showPassword ? 'text' : 'password'" id="password" v-model="form.password"
                    :class="['form-control', { 'is-invalid': v$.form.password.$error }]" :disabled="isLoading"
                    @input="v$.form.password.$touch()" />
                  <button class="btn btn-outline-secondary" type="button" @click="togglePassword">
                    <i :class="showPassword ? 'bi bi-eye-slash' : 'bi bi-eye'"></i>
                  </button>
                  <div class="invalid-feedback">
                    {{ v$.form.password.$errors[0]?.$message }}
                  </div>
                </div>
              </div>

              <!-- Submit Button -->
              <div class="d-grid gap-2">
                <button type="submit" class="btn btn-primary" :disabled="isLoading">
                  <span v-if="isLoading" class="spinner-border spinner-border-sm me-1"></span>
                  {{ isLoading ? 'Signing in...' : 'Sign In' }}
                </button>
              </div>

              <!-- Registration Links -->
              <div class="mt-4 text-center">
                <p class="mb-2">Don't have an account? Register as:</p>
                <div class="d-flex justify-content-center gap-2">
                  <router-link to="/register/customer" class="btn btn-outline-primary btn-sm">
                    Customer
                  </router-link>
                  <router-link to="/register/professional" class="btn btn-outline-success btn-sm">
                    Professional
                  </router-link>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { ref, reactive } from 'vue'
import { useStore } from 'vuex'
import { useRouter } from 'vue-router'
import { useVuelidate } from '@vuelidate/core'
import { required, minLength } from '@vuelidate/validators'

export default {
  name: 'LoginForm',

  setup() {
    const store = useStore()
    const router = useRouter()
    const isLoading = ref(false)
    const error = ref('')
    const showPassword = ref(false)

    const form = reactive({
      username: '',
      password: ''
    })

    const rules = {
      form: {
        username: { required, minLength: minLength(4) },
        password: { required, minLength: minLength(8) }
      }
    }

    const v$ = useVuelidate(rules, { form })

    const handleSubmit = async () => {
      error.value = ''

      // Validate form
      const isValid = await v$.value.$validate()
      if (!isValid) return

      isLoading.value = true

      try {
        await store.dispatch('auth/login', form)

        // Redirect based on user role
        const role = store.getters['auth/userRole']
        switch (role) {
          case 'admin':
            router.push('/admin/dashboard')
            break
          case 'professional':
            router.push('/professional/dashboard')
            break
          case 'customer':
            router.push('/customer/dashboard')
            break
          default:
            router.push('/dashboard')
        }
      } catch (err) {
        error.value = err.detail || 'An error occurred during login'
      } finally {
        isLoading.value = false
      }
    }

    const togglePassword = () => {
      showPassword.value = !showPassword.value
    }

    return {
      form,
      v$,
      isLoading,
      error,
      showPassword,
      handleSubmit,
      togglePassword
    }
  }
}
</script>

<style scoped>
.card {
  border: none;
  border-radius: 10px;
}

.card-header {
  border-radius: 10px 10px 0 0 !important;
}

.form-control:focus {
  border-color: #0d6efd;
  box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.15);
}

.btn-outline-secondary:focus {
  box-shadow: none;
}
</style>

================
File: src/components/auth/ProfessionalRegisterForm.vue
================
// frontend/src/components/auth/ProfessionalRegisterForm.vue
<template>
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-8 col-lg-6">
                <div class="card shadow">
                    <div class="card-header bg-success text-white text-center py-3">
                        <h4 class="mb-0">Professional Registration</h4>
                    </div>
                    <div class="card-body p-4">
                        <!-- Alert for errors -->
                        <div v-if="error" class="alert alert-danger alert-dismissible fade show" role="alert">
                            {{ error }}
                            <button type="button" class="btn-close" @click="error = ''"></button>
                        </div>

                        <!-- Registration Form -->
                        <form @submit.prevent="handleSubmit" class="needs-validation" novalidate>
                            <div class="row g-3">
                                <!-- Basic Information Section -->
                                <div class="col-12">
                                    <h5 class="border-bottom pb-2">Basic Information</h5>
                                </div>

                                <!-- Username -->
                                <div class="col-12">
                                    <label for="username" class="form-label">Username</label>
                                    <input type="text" id="username" v-model="form.username"
                                        :class="['form-control', { 'is-invalid': v$.form.username.$error }]"
                                        :disabled="isLoading" @input="v$.form.username.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.username.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Email -->
                                <div class="col-12">
                                    <label for="email" class="form-label">Email</label>
                                    <input type="email" id="email" v-model="form.email"
                                        :class="['form-control', { 'is-invalid': v$.form.email.$error }]"
                                        :disabled="isLoading" @input="v$.form.email.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.email.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Full Name -->
                                <div class="col-12">
                                    <label for="fullName" class="form-label">Full Name</label>
                                    <input type="text" id="fullName" v-model="form.full_name"
                                        :class="['form-control', { 'is-invalid': v$.form.full_name.$error }]"
                                        :disabled="isLoading" @input="v$.form.full_name.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.full_name.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Contact Section -->
                                <div class="col-12">
                                    <h5 class="border-bottom pb-2 mt-2">Contact Details</h5>
                                </div>

                                <!-- Phone -->
                                <div class="col-md-6">
                                    <label for="phone" class="form-label">Phone Number</label>
                                    <input type="tel" id="phone" v-model="form.phone"
                                        :class="['form-control', { 'is-invalid': v$.form.phone.$error }]"
                                        :disabled="isLoading" @input="v$.form.phone.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.phone.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- PIN Code -->
                                <div class="col-md-6">
                                    <label for="pinCode" class="form-label">PIN Code</label>
                                    <input type="text" id="pinCode" v-model="form.pin_code"
                                        :class="['form-control', { 'is-invalid': v$.form.pin_code.$error }]"
                                        :disabled="isLoading" @input="v$.form.pin_code.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.pin_code.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Address -->
                                <div class="col-12">
                                    <label for="address" class="form-label">Address</label>
                                    <textarea id="address" v-model="form.address"
                                        :class="['form-control', { 'is-invalid': v$.form.address.$error }]"
                                        :disabled="isLoading" @input="v$.form.address.$touch()" rows="3"></textarea>
                                    <div class="invalid-feedback">
                                        {{ v$.form.address.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Professional Details Section -->
                                <div class="col-12">
                                    <h5 class="border-bottom pb-2 mt-2">Professional Details</h5>
                                </div>

                                <!-- Service Type -->
                                <div class="col-md-6">
                                    <label for="serviceType" class="form-label">Service Type</label>
                                    <select id="serviceType" v-model="form.service_type_id"
                                        :class="['form-select', { 'is-invalid': v$.form.service_type_id.$error }]"
                                        :disabled="isLoading" @change="v$.form.service_type_id.$touch()">
                                        <option value="">Select a service</option>
                                        <option v-for="service in services" :key="service.id" :value="service.id">
                                            {{ service.name }}
                                        </option>
                                    </select>
                                    <div class="invalid-feedback">
                                        {{ v$.form.service_type_id.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Experience Years -->
                                <div class="col-md-6">
                                    <label for="experience" class="form-label">Years of Experience</label>
                                    <input type="number" id="experience" v-model="form.experience_years"
                                        :class="['form-control', { 'is-invalid': v$.form.experience_years.$error }]"
                                        :disabled="isLoading" min="0" max="50"
                                        @input="v$.form.experience_years.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.experience_years.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Description -->
                                <div class="col-12">
                                    <label for="description" class="form-label">Professional Description</label>
                                    <textarea id="description" v-model="form.description"
                                        :class="['form-control', { 'is-invalid': v$.form.description.$error }]"
                                        :disabled="isLoading" @input="v$.form.description.$touch()" rows="4"
                                        placeholder="Describe your experience, skills, and expertise..."></textarea>
                                    <div class="invalid-feedback">
                                        {{ v$.form.description.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Verification Document -->
                                <div class="col-12">
                                    <label for="verificationDoc" class="form-label">
                                        Verification Documents
                                        <small class="text-muted">(PDF, JPG, PNG - Max 5MB)</small>
                                    </label>
                                    <input type="file" id="verificationDoc"
                                        :class="['form-control', { 'is-invalid': v$.form.verification_document.$error }]"
                                        :disabled="isLoading" @change="handleFileChange"
                                        accept=".pdf,.jpg,.jpeg,.png" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.verification_document.$errors[0]?.$message }}
                                    </div>
                                    <small class="form-text text-muted">
                                        Please upload identification and relevant certification documents.
                                    </small>
                                </div>

                                <!-- Password Section -->
                                <div class="col-12">
                                    <h5 class="border-bottom pb-2 mt-2">Security</h5>
                                </div>

                                <!-- Password -->
                                <div class="col-md-6">
                                    <label for="password" class="form-label">Password</label>
                                    <div class="input-group">
                                        <input :type="showPassword ? 'text' : 'password'" id="password"
                                            v-model="form.password"
                                            :class="['form-control', { 'is-invalid': v$.form.password.$error }]"
                                            :disabled="isLoading" @input="v$.form.password.$touch()" />
                                        <button class="btn btn-outline-secondary" type="button" @click="togglePassword">
                                            <i :class="showPassword ? 'bi bi-eye-slash' : 'bi bi-eye'"></i>
                                        </button>
                                        <div class="invalid-feedback">
                                            {{ v$.form.password.$errors[0]?.$message }}
                                        </div>
                                    </div>
                                </div>

                                <!-- Confirm Password -->
                                <div class="col-md-6">
                                    <label for="confirmPassword" class="form-label">Confirm Password</label>
                                    <input type="password" id="confirmPassword" v-model="form.confirm_password"
                                        :class="['form-control', { 'is-invalid': v$.form.confirm_password.$error }]"
                                        :disabled="isLoading" @input="v$.form.confirm_password.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.confirm_password.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Submit Button -->
                                <div class="col-12">
                                    <div class="d-grid gap-2">
                                        <button type="submit" class="btn btn-success" :disabled="isLoading">
                                            <span v-if="isLoading" class="spinner-border spinner-border-sm me-1"></span>
                                            {{ isLoading ? 'Creating Account...' : 'Create Professional Account' }}
                                        </button>
                                    </div>
                                </div>

                                <!-- Login Link -->
                                <div class="col-12 text-center">
                                    <p class="mb-0">
                                        Already have an account?
                                        <router-link to="/login">Sign in</router-link>
                                    </p>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref, reactive, onMounted } from 'vue'
import { useStore } from 'vuex'
import { useRouter } from 'vue-router'
import { useVuelidate } from '@vuelidate/core'
import { required, email, minLength, sameAs, helpers, numeric, between } from '@vuelidate/validators'
import axios from 'axios'

export default {
    name: 'ProfessionalRegisterForm',

    setup() {
        const store = useStore()
        const router = useRouter()
        const isLoading = ref(false)
        const error = ref('')
        const showPassword = ref(false)
        const services = ref([])

        const form = reactive({
            username: '',
            email: '',
            full_name: '',
            phone: '',
            pin_code: '',
            address: '',
            service_type_id: '',
            experience_years: '',
            description: '',
            verification_document: null,
            password: '',
            confirm_password: ''
        })

        const rules = {
            form: {
                username: {
                    required,
                    minLength: minLength(4),
                    alphaNum: helpers.regex(/^[a-zA-Z0-9_.-]+$/),
                },
                email: {
                    required,
                    email,
                },
                full_name: {
                    required,
                    minLength: minLength(4),
                    validName: helpers.regex(/^[a-zA-Z\s.-]+$/),
                },
                phone: {
                    required,
                    validPhone: helpers.regex(/^[1-9]\d{9}$/),
                },
                pin_code: {
                    required,
                    validPin: helpers.regex(/^[1-9][0-9]{5}$/),
                },
                address: {
                    required,
                    minLength: minLength(5),
                    maxLength: helpers.withMessage(
                        'Address cannot exceed 200 characters',
                        value => value.length <= 200
                    ),
                },
                service_type_id: {
                    required: helpers.withMessage('Please select a service type', required),
                },
                experience_years: {
                    required,
                    numeric,
                    between: between(0, 50),
                },
                description: {
                    required,
                    minLength: helpers.withMessage(
                        'Description must be at least 10 characters long',
                        minLength(10)
                    ),
                    maxLength: helpers.withMessage(
                        'Description cannot exceed 1000 characters',
                        value => value.length <= 1000
                    ),
                },
                verification_document: {
                    required: helpers.withMessage('Please upload verification documents', required),
                },
                password: {
                    required,
                    minLength: minLength(8),
                    hasUppercase: helpers.regex(/[A-Z]/),
                    hasLowercase: helpers.regex(/[a-z]/),
                    hasNumber: helpers.regex(/\d/),
                    hasSpecial: helpers.regex(/[!@#$%^&*(),.?":{}|<>]/),
                },
                confirm_password: {
                    required,
                    sameAsPassword: sameAs('password'),
                }
            }
        }

        const v$ = useVuelidate(rules, { form })

        // Fetch available services when component mounts
        onMounted(async () => {
            try {
                const response = await axios.get('/api/services')
                services.value = response.data.data
            } catch (err) {
                error.value = 'Failed to load available services'
            }
        })

        const handleFileChange = (event) => {
            const file = event.target.files[0]
            if (file) {
                // Validate file type
                const validTypes = ['image/jpeg', 'image/png', 'application/pdf']
                if (!validTypes.includes(file.type)) {
                    error.value = 'Invalid file type. Please upload PDF, JPG, or PNG files only.'
                    event.target.value = ''
                    return
                }

                // Validate file size (5MB max)
                if (file.size > 5 * 1024 * 1024) {
                    error.value = 'File size too large. Maximum size is 5MB.'
                    event.target.value = ''
                    return
                }

                form.verification_document = file
            }
        }

        const handleSubmit = async () => {
            error.value = ''

            // Validate form
            const isValid = await v$.value.$validate()
            if (!isValid) return

            isLoading.value = true

            try {
                // Create FormData for multipart/form-data submission
                const formData = new FormData()

                // Append all form fields except confirm_password
                Object.keys(form).forEach(key => {
                    if (key !== 'confirm_password') {
                        formData.append(key, form[key])
                    }
                })

                await axios.post('/api/register/professional', formData, {
                    headers: {
                        'Content-Type': 'multipart/form-data'
                    }
                })

                // Show success message and redirect to login
                router.push({
                    path: '/login',
                    query: {
                        registered: 'true',
                        type: 'professional'
                    }
                })
            } catch (err) {
                error.value = err.response?.data?.detail || 'An error occurred during registration'
            } finally {
                isLoading.value = false
            }
        }

        const togglePassword = () => {
            showPassword.value = !showPassword.value
        }

        return {
            form,
            v$,
            isLoading,
            error,
            showPassword,
            services,
            handleSubmit,
            handleFileChange,
            togglePassword
        }
    }
}
</script>

<style scoped>
.card {
    border: none;
    border-radius: 10px;
}

.card-header {
    border-radius: 10px 10px 0 0 !important;
}

.form-control:focus {
    border-color: #198754;
    box-shadow: 0 0 0 0.25rem rgba(25, 135, 84, 0.15);
}

.btn-outline-secondary:focus {
    box-shadow: none;
}

h5 {
    color: #198754;
    font-size: 1.1rem;
    margin-top: 0.5rem;
}

.form-text {
    font-size: 0.875rem;
}
</style>

================
File: src/layouts/BaseLayout.vue
================
// frontend/src/layouts/BaseLayout.vue
<template>
    <div class="layout-container">
        <!-- Navigation Bar -->
        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
            <div class="container">
                <router-link class="navbar-brand" to="/">Service Platform</router-link>

                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarMain"
                    aria-controls="navbarMain" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <div class="collapse navbar-collapse" id="navbarMain">
                    <!-- Show these items only when user is logged in -->
                    <ul v-if="isLoggedIn" class="navbar-nav me-auto mb-2 mb-lg-0">
                        <li class="nav-item">
                            <router-link class="nav-link" to="/dashboard">Dashboard</router-link>
                        </li>

                        <!-- Customer specific navigation -->
                        <li v-if="isCustomer" class="nav-item">
                            <router-link class="nav-link" to="/services">Services</router-link>
                        </li>
                        <li v-if="isCustomer" class="nav-item">
                            <router-link class="nav-link" to="/my-requests">My Requests</router-link>
                        </li>

                        <!-- Professional specific navigation -->
                        <li v-if="isProfessional" class="nav-item">
                            <router-link class="nav-link" to="/my-services">My Services</router-link>
                        </li>
                        <li v-if="isProfessional" class="nav-item">
                            <router-link class="nav-link" to="/requests">Service Requests</router-link>
                        </li>

                        <!-- Admin specific navigation -->
                        <li v-if="isAdmin" class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown"
                                aria-expanded="false">
                                Management
                            </a>
                            <ul class="dropdown-menu">
                                <li><router-link class="dropdown-item" to="/manage/services">Services</router-link></li>
                                <li><router-link class="dropdown-item"
                                        to="/manage/professionals">Professionals</router-link></li>
                                <li><router-link class="dropdown-item" to="/manage/customers">Customers</router-link>
                                </li>
                                <li>
                                    <hr class="dropdown-divider">
                                </li>
                                <li><router-link class="dropdown-item" to="/manage/requests">Requests</router-link></li>
                            </ul>
                        </li>
                    </ul>

                    <!-- User Menu -->
                    <ul class="navbar-nav ms-auto">
                        <template v-if="isLoggedIn">
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown"
                                    aria-expanded="false">
                                    {{ userName }}
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li><router-link class="dropdown-item" to="/profile">My Profile</router-link></li>
                                    <li>
                                        <hr class="dropdown-divider">
                                    </li>
                                    <li><a class="dropdown-item" href="#" @click.prevent="handleLogout">Logout</a></li>
                                </ul>
                            </li>
                        </template>
                        <template v-else>
                            <li class="nav-item">
                                <router-link class="nav-link" to="/login">Login</router-link>
                            </li>
                            <li class="nav-item">
                                <router-link class="nav-link" to="/register">Register</router-link>
                            </li>
                        </template>
                    </ul>
                </div>
            </div>
        </nav>

        <!-- Main Content Area -->
        <main class="container py-4">
            <router-view></router-view>
        </main>

        <!-- Footer -->
        <footer class="footer mt-auto py-3 bg-light">
            <div class="container text-center">
                <span class="text-muted">© 2024 Service Platform. All rights reserved.</span>
            </div>
        </footer>
    </div>
</template>

<script>
import { computed } from 'vue'
import { useRouter } from 'vue-router'
import { useStore } from 'vuex'

export default {
    name: 'BaseLayout',

    setup() {
        const store = useStore()
        const router = useRouter()

        const isLoggedIn = computed(() => store.getters['auth/isLoggedIn'])
        const userName = computed(() => store.getters['auth/userName'])
        const userRole = computed(() => store.getters['auth/userRole'])

        const isCustomer = computed(() => userRole.value === 'customer')
        const isProfessional = computed(() => userRole.value === 'professional')
        const isAdmin = computed(() => userRole.value === 'admin')

        const handleLogout = async () => {
            await store.dispatch('auth/logout')
            router.push('/login')
        }

        return {
            isLoggedIn,
            userName,
            isCustomer,
            isProfessional,
            isAdmin,
            handleLogout
        }
    }
}
</script>

<style scoped>
.layout-container {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

main {
    flex: 1;
}

.navbar {
    box-shadow: 0 2px 4px rgba(0, 0, 0, .1);
}

.footer {
    margin-top: auto;
    box-shadow: 0 -2px 4px rgba(0, 0, 0, .1);
}
</style>

================
File: src/main.js
================
// frontend/src/main.js
import { createApp } from 'vue'
import App from './App.vue'
import router from './router'
import store from './store'
import axios from 'axios'
import 'bootstrap/dist/css/bootstrap.min.css'
import 'bootstrap/dist/js/bootstrap.bundle.min.js'

// Configure axios
axios.defaults.baseURL = import.meta.env.VITE_API_URL || 'http://localhost:8080'

// Add token if it exists
const token = localStorage.getItem('token')
if (token) {
    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`
}

// Handle 401 responses globally
axios.interceptors.response.use(
    response => response,
    error => {
        if (error.response?.status === 401) {
            store.dispatch('auth/logout')
            router.push('/login')
        }
        return Promise.reject(error)
    }
)

const app = createApp(App)

app.use(router)
app.use(store)

app.mount('#app')

================
File: src/router/index.js
================
// frontend/src/router/index.js
import { createRouter, createWebHistory } from 'vue-router';
import { useStore } from 'vuex';

// Import components
import CustomerRegisterForm from '../components/auth/CustomerRegisterForm.vue';
import ProfessionalRegisterForm from '../components/auth/ProfessionalRegisterForm.vue';
import LoginForm from '../components/auth/LoginForm.vue';
import NotFound from '../views/NotFound.vue';

// Route Guards
function requireAuth(to, from, next) {
  const store = useStore();
  if (!store.getters['auth/isLoggedIn']) {
    next({ name: 'Login', query: { redirect: to.fullPath } });
  } else {
    next();
  }
}

function requireAdmin(to, from, next) {
  const store = useStore();
  if (!store.getters['auth/isLoggedIn'] || store.getters['auth/userRole'] !== 'admin') {
    next({ name: 'NotFound' });
  } else {
    next();
  }
}

function requireProfessional(to, from, next) {
  const store = useStore();
  if (!store.getters['auth/isLoggedIn'] || store.getters['auth/userRole'] !== 'professional') {
    next({ name: 'NotFound' });
  } else {
    next();
  }
}

function requireCustomer(to, from, next) {
  const store = useStore();
  if (!store.getters['auth/isLoggedIn'] || store.getters['auth/userRole'] !== 'customer') {
    next({ name: 'NotFound' });
  } else {
    next();
  }
}

const routes = [
  {
    path: '/',
    name: 'Home',
    redirect: to => {
      const store = useStore();
      if (!store.getters['auth/isLoggedIn']) return { name: 'Login' };

      // Redirect based on user role
      switch (store.getters['auth/userRole']) {
        case 'admin':
          return { name: 'AdminDashboard' };
        case 'professional':
          return { name: 'ProfessionalDashboard' };
        case 'customer':
          return { name: 'CustomerDashboard' };
        default:
          return { name: 'Login' };
      }
    }
  },
  {
    path: '/login',
    name: 'Login',
    component: LoginForm,
    meta: { guestOnly: true }
  },
  {
    path: '/register/customer',
    name: 'CustomerRegister',
    component: CustomerRegisterForm,
    meta: { guestOnly: true }
  },
  {
    path: '/register/professional',
    name: 'ProfessionalRegister',
    component: ProfessionalRegisterForm,
    meta: { guestOnly: true }
  },
  {
    path: '/admin',
    name: 'Admin',
    redirect: { name: 'AdminDashboard' },
    beforeEnter: requireAdmin,
    children: [
      {
        path: 'dashboard',
        name: 'AdminDashboard',
        component: () => import('../views/admin/Dashboard.vue')
      },
      // Other admin routes will go here
    ]
  },
  {
    path: '/professional',
    name: 'Professional',
    redirect: { name: 'ProfessionalDashboard' },
    beforeEnter: requireProfessional,
    children: [
      {
        path: 'dashboard',
        name: 'ProfessionalDashboard',
        component: () => import('../views/professional/Dashboard.vue')
      },
      // Other professional routes will go here
    ]
  },
  {
    path: '/customer',
    name: 'Customer',
    redirect: { name: 'CustomerDashboard' },
    beforeEnter: requireCustomer,
    children: [
      {
        path: 'dashboard',
        name: 'CustomerDashboard',
        component: () => import('../views/customer/Dashboard.vue')
      },
      {
        path: '/services',
        name: 'Services',
        component: () => import('../views/customer/ServiceBrowser.vue'),
        meta: {
          requiresAuth: true,
          roles: ['customer']
        }
      },
      {
        path: '/my-requests',
        name: 'MyRequests',
        component: () => import('../views/customer/ServiceRequests.vue'),
        meta: {
          requiresAuth: true,
          roles: ['customer']
        }
      }
      // Other customer routes will go here
    ]
  },
  {
    path: '/:pathMatch(.*)*',
    name: 'NotFound',
    component: NotFound
  }
];

const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes,
});

// Global navigation guard
router.beforeEach((to, from, next) => {
  const store = useStore();
  const isLoggedIn = store.getters['auth/isLoggedIn'];

  // Handle routes that should only be accessible to guests (non-authenticated users)
  if (to.meta.guestOnly && isLoggedIn) {
    return next({ name: 'Home' });
  }

  // Handle routes that require authentication
  if (to.matched.some(record => record.meta.requiresAuth)) {
    if (!isLoggedIn) {
      return next({
        name: 'Login',
        query: { redirect: to.fullPath }
      });
    }
  }

  next();
});

export default router;

================
File: src/services/api.js
================
import axios from 'axios';

const api = axios.create({
    baseURL: '/api',
    headers: {
        'Content-Type': 'application/json'
    }
});

================
File: src/store/index.js
================
// frontend/src/store/index.js
import { createStore } from 'vuex'
import auth from './modules/auth'

export default createStore({
    modules: {
        auth
    }
})

================
File: src/store/modules/auth.js
================
// frontend/src/store/modules/auth.js
import axios from 'axios'

const state = {
  token: localStorage.getItem('token') || null,
  user: JSON.parse(localStorage.getItem('user')) || null,
}

const getters = {
  isLoggedIn: state => !!state.token,
  userName: state => state.user ? state.user.full_name : '',
  userRole: state => state.user ? state.user.role : null,
  getToken: state => state.token,
  getUser: state => state.user,
}

const actions = {
  async login({ commit }, credentials) {
    try {
      const response = await axios.post('/api/login', credentials)
      const { token } = response.data.data
      
      // Get user profile
      const userResponse = await axios.get('/api/profile', {
        headers: { 'Authorization': `Bearer ${token}` }
      })
      const user = userResponse.data.data

      // Save to store and localStorage
      commit('setToken', token)
      commit('setUser', user)
      
      // Set default auth header
      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`
      
      return Promise.resolve(user)
    } catch (error) {
      commit('clearAuth')
      return Promise.reject(error.response.data)
    }
  },

  async register({ commit }, registrationData) {
    try {
      const endpoint = `/api/register/${registrationData.role}`
      const response = await axios.post(endpoint, registrationData)
      return Promise.resolve(response.data)
    } catch (error) {
      return Promise.reject(error.response.data)
    }
  },

  async logout({ commit }) {
    commit('clearAuth')
    delete axios.defaults.headers.common['Authorization']
    return Promise.resolve()
  },

  async updateProfile({ commit }, profileData) {
    try {
      const response = await axios.put('/api/profile', profileData)
      const updatedUser = response.data.data
      commit('setUser', updatedUser)
      return Promise.resolve(updatedUser)
    } catch (error) {
      return Promise.reject(error.response.data)
    }
  },

  async changePassword({ commit }, passwordData) {
    try {
      const response = await axios.post('/api/change-password', passwordData)
      return Promise.resolve(response.data)
    } catch (error) {
      return Promise.reject(error.response.data)
    }
  }
}

const mutations = {
  setToken(state, token) {
    state.token = token
    localStorage.setItem('token', token)
  },

  setUser(state, user) {
    state.user = user
    localStorage.setItem('user', JSON.stringify(user))
  },

  clearAuth(state) {
    state.token = null
    state.user = null
    localStorage.removeItem('token')
    localStorage.removeItem('user')
  }
}

export default {
  namespaced: true,
  state,
  getters,
  actions,
  mutations
}

================
File: src/views/admin/AdminProfessionalManagement.vue
================
<!-- src/views/admin/AdminProfessionalManagement.vue -->
<template>
    <div class="container py-4">
        <h2>Manage Service Professionals</h2>

        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Service Professionals</h5>
            </div>
            <div class="card-body">
                <div v-if="loading" class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>

                <div v-else-if="professionals.length === 0" class="text-center">
                    <p>No service professionals found.</p>
                </div>

                <div v-else>
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Service Type</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="professional in professionals" :key="professional.id">
                                <td>{{ professional.user.full_name }}</td>
                                <td>{{ professional.user.email }}</td>
                                <td>{{ professional.service_type.name }}</td>
                                <td>
                                    <span v-if="professional.is_verified" class="badge bg-success">Verified</span>
                                    <span v-else class="badge bg-warning">Pending</span>
                                </td>
                                <td>
                                    <button v-if="!professional.is_verified" class="btn btn-sm btn-primary me-2"
                                        @click="openVerificationModal(professional)">
                                        Review Documents
                                    </button>
                                    <button class="btn btn-sm btn-danger" @click="blockProfessional(professional.id)">
                                        Block
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Verification Modal -->
        <div class="modal fade" id="verificationModal" tabindex="-1" ref="verificationModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Review Verification Documents</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div v-if="selectedProfessional">
                            <p><strong>Professional:</strong> {{ selectedProfessional.user.full_name }}</p>
                            <p><strong>Service Type:</strong> {{ selectedProfessional.service_type.name }}</p>
                            <p><strong>Experience:</strong> {{ selectedProfessional.experience_years }} years</p>
                            <p><strong>Description:</strong> {{ selectedProfessional.description }}</p>

                            <div class="mb-3">
                                <label class="form-label">Verification Documents</label>
                                <ul>
                                    <li v-for="(doc, index) in selectedProfessional.verification_documents"
                                        :key="index">
                                        <a :href="doc.url" target="_blank">{{ doc.name }}</a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-success" @click="approveProfessional">Approve</button>
                        <button type="button" class="btn btn-danger" @click="rejectProfessional">Reject</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref, onMounted } from 'vue'
import { Modal } from 'bootstrap'
import axios from 'axios'

export default {
    name: 'AdminProfessionalManagement',

    setup() {
        const loading = ref(true)
        const professionals = ref([])
        const verificationModal = ref(null)
        const selectedProfessional = ref(null)

        const fetchProfessionals = async () => {
            try {
                loading.value = true
                const response = await axios.get('/api/professionals')
                professionals.value = response.data.data
            } catch (error) {
                console.error('Error fetching professionals:', error)
            } finally {
                loading.value = false
            }
        }

        const openVerificationModal = (professional) => {
            selectedProfessional.value = professional
            const modal = new Modal(verificationModal.value)
            modal.show()
        }

        const approveProfessional = async () => {
            try {
                await axios.post(`/api/professionals/${selectedProfessional.value.id}/verify`)
                await fetchProfessionals()
                const modal = Modal.getInstance(verificationModal.value)
                modal.hide()
            } catch (error) {
                console.error('Error approving professional:', error)
            }
        }

        const rejectProfessional = async () => {
            try {
                await axios.post(`/api/professionals/${selectedProfessional.value.id}/reject`)
                await fetchProfessionals()
                const modal = Modal.getInstance(verificationModal.value)
                modal.hide()
            } catch (error) {
                console.error('Error rejecting professional:', error)
            }
        }

        const blockProfessional = async (professionalId) => {
            try {
                await axios.post(`/api/professionals/${professionalId}/block`)
                await fetchProfessionals()
            } catch (error) {
                console.error('Error blocking professional:', error)
            }
        }

        onMounted(() => {
            fetchProfessionals()
        })

        return {
            loading,
            professionals,
            verificationModal,
            selectedProfessional,
            openVerificationModal,
            approveProfessional,
            rejectProfessional,
            blockProfessional
        }
    }
}
</script>

================
File: src/views/admin/AdminServiceManagement.vue
================
<!-- src/views/admin/AdminServiceManagement.vue -->
<template>
    <div class="container py-4">
        <h2>Manage Services</h2>

        <div class="mb-3">
            <button class="btn btn-primary" @click="openCreateModal">Create New Service</button>
        </div>

        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Services</h5>
            </div>
            <div class="card-body">
                <div v-if="loading" class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>

                <div v-else-if="services.length === 0" class="text-center">
                    <p>No services found.</p>
                </div>

                <div v-else>
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Description</th>
                                <th>Base Price</th>
                                <th>Time Required</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="service in services" :key="service.id">
                                <td>{{ service.name }}</td>
                                <td>{{ service.description }}</td>
                                <td>{{ service.base_price }}</td>
                                <td>{{ service.estimated_time }} minutes</td>
                                <td>
                                    <button class="btn btn-sm btn-primary me-2" @click="openEditModal(service)">
                                        Edit
                                    </button>
                                    <button class="btn btn-sm btn-danger" @click="deleteService(service.id)">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Create Service Modal -->
        <div class="modal fade" id="createModal" tabindex="-1" ref="createModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Create New Service</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form @submit.prevent="createService">
                            <div class="mb-3">
                                <label class="form-label">Name</label>
                                <input type="text" class="form-control" v-model="newService.name" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <textarea class="form-control" v-model="newService.description" required></textarea>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Base Price</label>
                                <input type="number" class="form-control" v-model="newService.base_price" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Time Required (minutes)</label>
                                <input type="number" class="form-control" v-model="newService.estimated_time" required>
                            </div>
                            <div class="text-end">
                                <button type="button" class="btn btn-secondary me-2"
                                    data-bs-dismiss="modal">Cancel</button>
                                <button type="submit" class="btn btn-primary">Create</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Edit Service Modal -->
        <div class="modal fade" id="editModal" tabindex="-1" ref="editModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Service</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form @submit.prevent="updateService">
                            <div class="mb-3">
                                <label class="form-label">Name</label>
                                <input type="text" class="form-control" v-model="editedService.name" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <textarea class="form-control" v-model="editedService.description" required></textarea>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Base Price</label>
                                <input type="number" class="form-control" v-model="editedService.base_price" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Time Required (minutes)</label>
                                <input type="number" class="form-control" v-model="editedService.estimated_time"
                                    required>
                            </div>
                            <div class="text-end">
                                <button type="button" class="btn btn-secondary me-2"
                                    data-bs-dismiss="modal">Cancel</button>
                                <button type="submit" class="btn btn-primary">Update</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref, onMounted } from 'vue'
import { Modal } from 'bootstrap'
import axios from 'axios'

export default {
    name: 'AdminServiceManagement',

    setup() {
        const loading = ref(true)
        const services = ref([])
        const createModal = ref(null)
        const editModal = ref(null)
        const newService = ref({
            name: '',
            description: '',
            base_price: 0,
            estimated_time: 0
        })
        const editedService = ref({
            id: null,
            name: '',
            description: '',
            base_price: 0,
            estimated_time: 0
        })

        const fetchServices = async () => {
            try {
                loading.value = true
                const response = await axios.get('/api/services')
                services.value = response.data.data
            } catch (error) {
                console.error('Error fetching services:', error)
            } finally {
                loading.value = false
            }
        }

        const openCreateModal = () => {
            newService.value = {
                name: '',
                description: '',
                base_price: 0,
                estimated_time: 0
            }
            const modal = new Modal(createModal.value)
            modal.show()
        }

        const createService = async () => {
            try {
                await axios.post('/api/services', newService.value)
                await fetchServices()
                const modal = Modal.getInstance(createModal.value)
                modal.hide()
            } catch (error) {
                console.error('Error creating service:', error)
            }
        }

        const openEditModal = (service) => {
            editedService.value = { ...service }
            const modal = new Modal(editModal.value)
            modal.show()
        }

        const updateService = async () => {
            try {
                await axios.put(`/api/services/${editedService.value.id}`, editedService.value)
                await fetchServices()
                const modal = Modal.getInstance(editModal.value)
                modal.hide()
            } catch (error) {
                console.error('Error updating service:', error)
            }
        }

        const deleteService = async (serviceId) => {
            try {
                await axios.delete(`/api/services/${serviceId}`)
                await fetchServices()
            } catch (error) {
                console.error('Error deleting service:', error)
            }
        }

        onMounted(() => {
            fetchServices()
        })

        return {
            loading,
            services,
            createModal,
            editModal,
            newService,
            editedService,
            openCreateModal,
            createService,
            openEditModal,
            updateService,
            deleteService
        }
    }
}
</script>

================
File: src/views/admin/Dashboard.vue
================
// frontend/src/views/admin/Dashboard.vue
<template>
    <div class="dashboard">
        <!-- Platform Overview Stats -->
        <div class="row g-4 mb-4">
            <!-- Total Professionals -->
            <div class="col-md-6 col-lg-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-primary bg-opacity-10 p-3 rounded">
                                <i class="bi bi-person-badge fs-4 text-primary"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Total Professionals</h6>
                                <small class="text-muted">
                                    {{ stats.verified_professionals }} verified
                                </small>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.total_professionals || 0 }}</h3>
                    </div>
                </div>
            </div>

            <!-- Total Customers -->
            <div class="col-md-6 col-lg-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-success bg-opacity-10 p-3 rounded">
                                <i class="bi bi-people fs-4 text-success"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Total Customers</h6>
                                <small class="text-muted">
                                    {{ stats.active_customers }} active
                                </small>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.total_customers || 0 }}</h3>
                    </div>
                </div>
            </div>

            <!-- Service Requests -->
            <div class="col-md-6 col-lg-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-info bg-opacity-10 p-3 rounded">
                                <i class="bi bi-calendar2-check fs-4 text-info"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Service Requests</h6>
                                <small class="text-muted">
                                    {{ stats.service_requests?.pending }} pending
                                </small>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.service_requests?.total || 0 }}</h3>
                    </div>
                </div>
            </div>

            <!-- Pending Actions -->
            <div class="col-md-6 col-lg-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-warning bg-opacity-10 p-3 rounded">
                                <i class="bi bi-exclamation-circle fs-4 text-warning"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Pending Actions</h6>
                                <small class="text-muted">Requires attention</small>
                            </div>
                        </div>
                        <h3 class="mb-0">
                            {{ stats.pending_verifications + stats.reported_reviews || 0 }}
                        </h3>
                    </div>
                </div>
            </div>
        </div>

        <div class="row g-4">
            <!-- Main Content Area -->
            <div class="col-lg-8">
                <!-- Pending Verifications -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-transparent border-0">
                        <div class="d-flex align-items-center justify-content-between">
                            <h5 class="mb-0">
                                Pending Verifications
                                <span class="badge bg-warning ms-2">
                                    {{ stats.pending_verifications }}
                                </span>
                            </h5>
                            <router-link to="/admin/professionals?verified=false" class="btn btn-sm btn-primary">
                                View All
                            </router-link>
                        </div>
                    </div>
                    <div class="card-body">
                        <div v-if="loading" class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>

                        <div v-else-if="pendingVerifications.length === 0" class="text-center py-4">
                            <i class="bi bi-patch-check fs-1 text-muted"></i>
                            <p class="mt-2 mb-0">No pending verifications</p>
                        </div>

                        <div v-else class="table-responsive">
                            <table class="table table-hover align-middle">
                                <thead class="table-light">
                                    <tr>
                                        <th>Professional</th>
                                        <th>Service Type</th>
                                        <th>Experience</th>
                                        <th>Registered</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="prof in pendingVerifications" :key="prof.id">
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div>
                                                    <div class="fw-bold">{{ prof.user.full_name }}</div>
                                                    <small class="text-muted">{{ prof.user.email }}</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>{{ prof.service_type.name }}</td>
                                        <td>{{ prof.experience_years }} years</td>
                                        <td>{{ formatDate(prof.created_at) }}</td>
                                        <td>
                                            <button class="btn btn-sm btn-success me-2"
                                                @click="verifyProfessional(prof.id)" :disabled="verifying === prof.id">
                                                <span v-if="verifying === prof.id"
                                                    class="spinner-border spinner-border-sm me-1">
                                                </span>
                                                Verify
                                            </button>
                                            <button class="btn btn-sm btn-outline-primary" @click="viewDocuments(prof)">
                                                Documents
                                            </button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- Recent Service Requests -->
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-transparent border-0">
                        <div class="d-flex align-items-center justify-content-between">
                            <h5 class="mb-0">Recent Service Requests</h5>
                            <router-link to="/admin/requests" class="btn btn-sm btn-primary">
                                View All
                            </router-link>
                        </div>
                    </div>
                    <div class="card-body">
                        <div v-if="loading" class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>

                        <div v-else-if="recentRequests.length === 0" class="text-center py-4">
                            <i class="bi bi-calendar-x fs-1 text-muted"></i>
                            <p class="mt-2 mb-0">No service requests</p>
                        </div>

                        <div v-else class="table-responsive">
                            <table class="table table-hover align-middle">
                                <thead class="table-light">
                                    <tr>
                                        <th>Customer</th>
                                        <th>Service</th>
                                        <th>Professional</th>
                                        <th>Status</th>
                                        <th>Date</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="request in recentRequests" :key="request.id">
                                        <td>{{ request.customer.user.full_name }}</td>
                                        <td>{{ request.service.name }}</td>
                                        <td>
                                            <span v-if="request.professional">
                                                {{ request.professional.user.full_name }}
                                            </span>
                                            <span v-else class="text-muted">Not assigned</span>
                                        </td>
                                        <td>
                                            <span :class="[
                                                'badge',
                                                {
                                                    'bg-warning': request.status === 'created',
                                                    'bg-primary': request.status === 'assigned',
                                                    'bg-success': request.status === 'completed'
                                                }
                                            ]">
                                                {{ request.status }}
                                            </span>
                                        </td>
                                        <td>{{ formatDate(request.preferred_time) }}</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sidebar Content -->
            <div class="col-lg-4">
                <!-- Reported Reviews -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-transparent border-0">
                        <div class="d-flex align-items-center justify-content-between">
                            <h5 class="mb-0">
                                Reported Reviews
                                <span class="badge bg-danger ms-2">
                                    {{ stats.reported_reviews }}
                                </span>
                            </h5>
                            <router-link to="/admin/reviews?reported=true" class="btn btn-sm btn-primary">
                                View All
                            </router-link>
                        </div>
                    </div>
                    <div class="card-body">
                        <div v-if="loading" class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>

                        <div v-else-if="reportedReviews.length === 0" class="text-center py-4">
                            <i class="bi bi-shield-check fs-1 text-muted"></i>
                            <p class="mt-2 mb-0">No reported reviews</p>
                        </div>

                        <div v-else>
                            <div v-for="review in reportedReviews" :key="review.id"
                                class="review-card p-3 mb-3 bg-light rounded">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <div>
                                        <div class="rating text-warning">
                                            <i v-for="n in 5" :key="n"
                                                :class="['bi', n <= review.rating ? 'bi-star-fill' : 'bi-star']">
                                            </i>
                                        </div>
                                        <small class="text-muted d-block">
                                            {{ formatDate(review.created_at) }}
                                        </small>
                                    </div>
                                    <span class="badge bg-danger">Reported</span>
                                </div>
                                <p class="mb-2">{{ review.comment }}</p>
                                <div class="report-reason mb-2">
                                    <small class="text-danger">
                                        <i class="bi bi-exclamation-triangle me-1"></i>
                                        {{ review.report_reason }}
                                    </small>
                                </div>
                                <div class="review-meta text-muted small">
                                    <div>Service: {{ review.service_request.service.name }}</div>
                                    <div>Professional: {{ review.service_request.professional.user.full_name }}</div>
                                    <div>Customer: {{ review.service_request.customer.user.full_name }}</div>
                                </div>
                                <div class="mt-3 d-flex gap-2">
                                    <button class="btn btn-sm btn-danger" @click="removeReview(review.id)"
                                        :disabled="removingReview === review.id">
                                        Remove Review
                                    </button>
                                    <button class="btn btn-sm btn-outline-secondary" @click="dismissReport(review.id)"
                                        :disabled="dismissingReport === review.id">
                                        Dismiss Report
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Quick Stats -->
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-transparent border-0">
                        <h5 class="mb-0">Platform Statistics</h5>
                    </div>
                    <div class="card-body">
                        <canvas ref="statsChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Document Preview Modal -->
        <div class="modal fade" id="documentModal" tabindex="-1" ref="documentModal">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Verification Documents</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div v-if="selectedProfessional" class="p-3">
                            <div class="mb-4">
                                <h6>Professional Details</h6>
                                <div class="table-responsive">
                                    <table class="table table-borderless">
                                        <tbody>
                                            <tr>
                                                <th style="width: 150px">Name:</th>
                                                <td>{{ selectedProfessional.user.full_name }}</td>
                                            </tr>
                                            <tr>
                                                <th>Service Type:</th>
                                                <td>{{ selectedProfessional.service_type.name }}</td>
                                            </tr>
                                            <tr>
                                                <th>Experience:</th>
                                                <td>{{ selectedProfessional.experience_years }} years</td>
                                            </tr>
                                            <tr>
                                                <th>Description:</th>
                                                <td>{{ selectedProfessional.description }}</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <div>
                                <h6>Verification Document</h6>
                                <div class="document-preview bg-light p-3 rounded">
                                    <iframe v-if="documentUrl" :src="documentUrl" class="w-100"
                                        style="height: 500px;"></iframe>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                            Close
                        </button>
                        <button type="button" class="btn btn-success"
                            @click="verifyProfessional(selectedProfessional?.id)"
                            :disabled="verifying === selectedProfessional?.id">
                            <span v-if="verifying === selectedProfessional?.id"
                                class="spinner-border spinner-border-sm me-1">
                            </span>
                            Verify Professional
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref, onMounted } from 'vue'
import { Modal } from 'bootstrap'
import Chart from 'chart.js/auto'
import moment from 'moment'
import axios from 'axios'

export default {
    name: 'AdminDashboard',

    setup() {
        const loading = ref(true)
        const stats = ref({})
        const pendingVerifications = ref([])
        const recentRequests = ref([])
        const reportedReviews = ref([])
        const verifying = ref(null)
        const removingReview = ref(null)
        const dismissingReport = ref(null)
        const documentModal = ref(null)
        const selectedProfessional = ref(null)
        const documentUrl = ref('')
        const statsChart = ref(null)
        let chart = null

        const fetchDashboardData = async () => {
            try {
                loading.value = true
                const [
                    statsRes,
                    verificationsRes,
                    requestsRes,
                    reviewsRes
                ] = await Promise.all([
                    axios.get('/api/dashboard-stats'),
                    axios.get('/api/detailed-stats?stat_type=pending_verifications'),
                    axios.get('/api/detailed-stats?stat_type=recent_requests'),
                    axios.get('/api/detailed-stats?stat_type=reported_reviews')
                ])

                stats.value = statsRes.data.data
                pendingVerifications.value = verificationsRes.data.data
                recentRequests.value = requestsRes.data.data
                reportedReviews.value = reviewsRes.data.data

                initializeChart()
            } catch (error) {
                console.error('Error fetching dashboard data:', error)
            } finally {
                loading.value = false
            }
        }

        const initializeChart = () => {
            if (chart) {
                chart.destroy()
            }

            const ctx = statsChart.value.getContext('2d')
            chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Professionals', 'Customers', 'Active Requests', 'Completed'],
                    datasets: [{
                        label: 'Platform Statistics',
                        data: [
                            stats.value.total_professionals || 0,
                            stats.value.total_customers || 0,
                            stats.value.service_requests?.active || 0,
                            stats.value.service_requests?.completed || 0
                        ],
                        backgroundColor: [
                            'rgba(13, 110, 253, 0.5)',  // primary
                            'rgba(25, 135, 84, 0.5)',   // success
                            'rgba(13, 202, 240, 0.5)',  // info
                            'rgba(25, 135, 84, 0.5)'    // success
                        ],
                        borderColor: [
                            'rgb(13, 110, 253)',
                            'rgb(25, 135, 84)',
                            'rgb(13, 202, 240)',
                            'rgb(25, 135, 84)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            })
        }

        const verifyProfessional = async (professionalId) => {
            try {
                verifying.value = professionalId
                await axios.post(`/api/professionals/${professionalId}/verify`)
                await fetchDashboardData()

                if (documentModal.value) {
                    const modal = Modal.getInstance(documentModal.value)
                    modal?.hide()
                }
            } catch (error) {
                console.error('Error verifying professional:', error)
            } finally {
                verifying.value = null
            }
        }

        const viewDocuments = async (professional) => {
            selectedProfessional.value = professional
            documentUrl.value = `/api/static/uploads/verification_docs/${professional.verification_documents}`
            const modal = new Modal(documentModal.value)
            modal.show()
        }

        const removeReview = async (reviewId) => {
            if (!confirm('Are you sure you want to remove this review?')) return

            try {
                removingReview.value = reviewId
                await axios.delete(`/api/reviews/${reviewId}`)
                await fetchDashboardData()
            } catch (error) {
                console.error('Error removing review:', error)
            } finally {
                removingReview.value = null
            }
        }

        const dismissReport = async (reviewId) => {
            try {
                dismissingReport.value = reviewId
                await axios.post(`/api/reviews/${reviewId}/dismiss-report`)
                await fetchDashboardData()
            } catch (error) {
                console.error('Error dismissing report:', error)
            } finally {
                dismissingReport.value = null
            }
        }

        const formatDate = (date) => {
            return moment(date).format('MMM D, YYYY h:mm A')
        }

        onMounted(() => {
            fetchDashboardData()
        })

        return {
            loading,
            stats,
            pendingVerifications,
            recentRequests,
            reportedReviews,
            verifying,
            removingReview,
            dismissingReport,
            documentModal,
            selectedProfessional,
            documentUrl,
            statsChart,
            verifyProfessional,
            viewDocuments,
            removeReview,
            dismissReport,
            formatDate
        }
    }
}
</script>

<style scoped>
.dashboard {
    padding: 1.5rem;
}

.card {
    transition: transform 0.2s;
}

.card:hover {
    transform: translateY(-2px);
}

.review-card {
    transition: all 0.2s;
}

.review-card:hover {
    background-color: #f8f9fa !important;
}

.report-reason {
    padding: 0.5rem;
    background-color: #fff;
    border-radius: 0.25rem;
}

.table th {
    font-weight: 600;
}

.document-preview {
    border: 1px solid #dee2e6;
}
</style>

================
File: src/views/customer/Dashboard.vue
================
<template>
    <div class="dashboard">
        <!-- Stats Overview -->
        <div class="row g-4 mb-4">
            <div class="col-md-6 col-lg-3">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-primary bg-opacity-10 p-3 rounded">
                                <i class="bi bi-calendar-check fs-4 text-primary"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Active Requests</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.service_requests?.active || 0 }}</h3>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-lg-3">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-success bg-opacity-10 p-3 rounded">
                                <i class="bi bi-check-circle fs-4 text-success"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Completed Services</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.service_requests?.completed || 0 }}</h3>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-lg-3">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-warning bg-opacity-10 p-3 rounded">
                                <i class="bi bi-clock fs-4 text-warning"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Pending Requests</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.service_requests?.pending || 0 }}</h3>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-lg-3">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-info bg-opacity-10 p-3 rounded">
                                <i class="bi bi-star fs-4 text-info"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Reviews Given</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.reviews_given || 0 }}</h3>
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Requests and Actions -->
        <div class="row g-4">
            <!-- Active Requests -->
            <div class="col-lg-8">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-transparent border-0">
                        <div class="d-flex align-items-center justify-content-between">
                            <h5 class="mb-0">Recent Service Requests</h5>
                            <router-link to="/customer/requests" class="btn btn-sm btn-primary">
                                View All
                            </router-link>
                        </div>
                    </div>
                    <div class="card-body">
                        <div v-if="loading" class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>

                        <div v-else-if="recentRequests.length === 0" class="text-center py-4">
                            <i class="bi bi-inbox fs-1 text-muted"></i>
                            <p class="mt-2 mb-0">No service requests yet</p>
                        </div>

                        <div v-else class="table-responsive">
                            <table class="table table-hover align-middle">
                                <thead class="table-light">
                                    <tr>
                                        <th>Service</th>
                                        <th>Status</th>
                                        <th>Date</th>
                                        <th>Professional</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="request in recentRequests" :key="request.id">
                                        <td>{{ request.service.name }}</td>
                                        <td>
                                            <span :class="[
                                                'badge',
                                                {
                                                    'bg-warning': request.status === 'created',
                                                    'bg-primary': request.status === 'assigned',
                                                    'bg-success': request.status === 'completed'
                                                }
                                            ]">
                                                {{ request.status }}
                                            </span>
                                        </td>
                                        <td>{{ formatDate(request.preferred_time) }}</td>
                                        <td>
                                            <span v-if="request.professional">
                                                {{ request.professional.user.full_name }}
                                            </span>
                                            <span v-else class="text-muted">Not assigned</span>
                                        </td>
                                        <td>
                                            <button v-if="request.status === 'completed' && !request.review"
                                                class="btn btn-sm btn-outline-primary me-2"
                                                @click="openReviewModal(request)">
                                                Add Review
                                            </button>
                                            <button v-if="request.status === 'created'"
                                                class="btn btn-sm btn-outline-danger"
                                                @click="cancelRequest(request.id)">
                                                Cancel
                                            </button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="col-lg-4">
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-transparent border-0">
                        <h5 class="mb-0">Quick Actions</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-3">
                            <router-link to="/customer/book-service" class="btn btn-primary">
                                <i class="bi bi-plus-circle me-2"></i>
                                Book New Service
                            </router-link>
                            <router-link to="/customer/services" class="btn btn-outline-primary">
                                <i class="bi bi-grid me-2"></i>
                                Browse Services
                            </router-link>
                            <router-link to="/customer/profile" class="btn btn-outline-secondary">
                                <i class="bi bi-person me-2"></i>
                                Update Profile
                            </router-link>
                        </div>
                    </div>
                </div>

                <!-- Recent Reviews -->
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-transparent border-0">
                        <h5 class="mb-0">Your Recent Reviews</h5>
                    </div>
                    <div class="card-body">
                        <div v-if="loading" class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>

                        <div v-else-if="recentReviews.length === 0" class="text-center py-4">
                            <i class="bi bi-star fs-1 text-muted"></i>
                            <p class="mt-2 mb-0">No reviews yet</p>
                        </div>

                        <div v-else class="reviews-list">
                            <div v-for="review in recentReviews" :key="review.id" class="review-item mb-3">
                                <div class="d-flex align-items-center mb-2">
                                    <div class="rating text-warning me-2">
                                        <i v-for="n in 5" :key="n"
                                            :class="['bi', n <= review.rating ? 'bi-star-fill' : 'bi-star']">
                                        </i>
                                    </div>
                                    <small class="text-muted">
                                        {{ formatDate(review.created_at) }}
                                    </small>
                                </div>
                                <p class="mb-1">{{ review.comment }}</p>
                                <small class="text-muted">
                                    For: {{ review.service_request.service.name }}
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Review Modal -->
        <div class="modal fade" id="reviewModal" tabindex="-1" ref="reviewModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add Review</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form @submit.prevent="submitReview">
                            <div class="mb-3">
                                <label class="form-label">Rating</label>
                                <div class="rating-input">
                                    <div class="btn-group">
                                        <button v-for="n in 5" :key="n" type="button" class="btn btn-outline-warning"
                                            :class="{ active: reviewForm.rating >= n }" @click="reviewForm.rating = n">
                                            <i class="bi bi-star-fill"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Comment</label>
                                <textarea v-model="reviewForm.comment" class="form-control" rows="3"
                                    placeholder="Share your experience..."></textarea>
                            </div>
                            <div class="text-end">
                                <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">
                                    Cancel
                                </button>
                                <button type="submit" class="btn btn-primary" :disabled="!reviewForm.rating">
                                    Submit Review
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref, reactive, onMounted } from 'vue'
import { Modal } from 'bootstrap'
import moment from 'moment'
import axios from 'axios'

export default {
    name: 'CustomerDashboard',

    setup() {
        const loading = ref(true)
        const stats = ref({})
        const recentRequests = ref([])
        const recentReviews = ref([])
        const reviewModal = ref(null)
        const selectedRequest = ref(null)

        const reviewForm = reactive({
            rating: 0,
            comment: ''
        })

        // Fetch dashboard data
        const fetchDashboardData = async () => {
            try {
                loading.value = true
                const [statsRes, requestsRes, reviewsRes] = await Promise.all([
                    axios.get('/api/dashboard-stats'),
                    axios.get('/api/customer/requests?per_page=5'),
                    axios.get('/api/requests/reviews?per_page=3')
                ])

                stats.value = statsRes.data.data
                recentRequests.value = requestsRes.data.data
                recentReviews.value = reviewsRes.data.data
            } catch (error) {
                console.error('Error fetching dashboard data:', error)
            } finally {
                loading.value = false
            }
        }

        const openReviewModal = (request) => {
            selectedRequest.value = request
            reviewForm.rating = 0
            reviewForm.comment = ''
            const modal = new Modal(reviewModal.value)
            modal.show()
        }

        const submitReview = async () => {
            if (!selectedRequest.value || !reviewForm.rating) return

            try {
                await axios.post(`/api/requests/${selectedRequest.value.id}/review`, reviewForm)
                const modal = Modal.getInstance(reviewModal.value)
                modal.hide()
                await fetchDashboardData()
            } catch (error) {
                console.error('Error submitting review:', error)
            }
        }

        const cancelRequest = async (requestId) => {
            if (!confirm('Are you sure you want to cancel this request?')) return

            try {
                await axios.post(`/api/requests/${requestId}/cancel`)
                await fetchDashboardData()
            } catch (error) {
                console.error('Error canceling request:', error)
            }
        }

        const formatDate = (date) => {
            return moment(date).format('MMM D, YYYY h:mm A')
        }

        onMounted(() => {
            fetchDashboardData()
        })

        return {
            loading,
            stats,
            recentRequests,
            recentReviews,
            reviewModal,
            reviewForm,
            openReviewModal,
            submitReview,
            cancelRequest,
            formatDate
        }
    }
}
</script>

<style scoped>
.dashboard {
    padding: 1.5rem;
}

.card {
    transition: transform 0.2s;
}

.card:hover {
    transform: translateY(-2px);
}

.rating-input .btn-group {
    width: 100%;
}

.rating-input .btn {
    flex: 1;
}

.rating-input .btn:not(:last-child) {
    margin-right: 5px;
}

.rating-input .btn.active {
    background-color: #ffc107;
    border-color: #ffc107;
    color: white;
}

.reviews-list {
    max-height: 300px;
    overflow-y: auto;
}

.review-item {
    padding: 1rem;
    border-radius: 0.5rem;
    background-color: #f8f9fa;
}

.review-item:not(:last-child) {
    margin-bottom: 1rem;
}
</style>

================
File: src/views/customer/ServiceBrowser.vue
================
<!-- src/views/customer/ServiceBrowser.vue -->
<template>
    <div class="container py-4">
        <!-- Search and Filter Section -->
        <div class="card shadow-sm mb-4">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-8">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="bi bi-search"></i>
                            </span>
                            <input type="text" class="form-control" placeholder="Search services..."
                                v-model="searchQuery">
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="bi bi-geo-alt"></i>
                            </span>
                            <input type="text" class="form-control" placeholder="PIN Code" v-model="pinCode"
                                maxlength="6" pattern="[0-9]*">
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Services Grid -->
        <div v-if="loading" class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>

        <div v-else-if="filteredServices.length === 0" class="text-center py-5">
            <i class="bi bi-inbox fs-1 text-muted"></i>
            <p class="mt-2 mb-0">No services found</p>
        </div>

        <div v-else class="row g-4">
            <div v-for="service in filteredServices" :key="service.id" class="col-md-6 col-lg-4">
                <div class="card h-100 shadow-sm hover-shadow">
                    <div class="card-body">
                        <h5 class="card-title">{{ service.name }}</h5>
                        <p class="card-text text-muted">{{ service.description }}</p>
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <div class="text-muted">
                                <i class="bi bi-clock me-1"></i>
                                {{ service.estimated_time }} mins
                            </div>
                            <div class="text-primary fw-bold">
                                ₹{{ service.base_price }}
                            </div>
                        </div>
                        <button class="btn btn-primary w-100" @click="openBookingModal(service)"
                            :disabled="!service.is_active">
                            Book Now
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Booking Modal -->
        <div class="modal fade" id="bookingModal" tabindex="-1" ref="bookingModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            Book {{ selectedService?.name }}
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <form @submit.prevent="handleBooking">
                        <div class="modal-body">
                            <!-- Error Alert -->
                            <div v-if="error" class="alert alert-danger alert-dismissible fade show" role="alert">
                                {{ error }}
                                <button type="button" class="btn-close" @click="error = ''"></button>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Preferred Date</label>
                                <input type="date" class="form-control" v-model="bookingForm.preferred_date"
                                    :min="minDate" :max="maxDate" required>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Preferred Time</label>
                                <input type="time" class="form-control" v-model="bookingForm.preferred_time" min="09:00"
                                    max="17:00" required>
                                <div class="form-text">
                                    Business hours: 9 AM to 5 PM
                                </div>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Service Description</label>
                                <textarea class="form-control" v-model="bookingForm.description" rows="3"
                                    placeholder="Please describe your service requirement..." required></textarea>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-primary" :disabled="isBooking">
                                <span v-if="isBooking" class="spinner-border spinner-border-sm me-2"></span>
                                {{ isBooking ? 'Booking...' : 'Confirm Booking' }}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref, computed, onMounted } from 'vue'
import { Modal } from 'bootstrap'
import { useRouter } from 'vue-router'
import axios from 'axios'
import moment from 'moment'

export default {
    name: 'ServiceBrowser',

    setup() {
        const router = useRouter()
        const loading = ref(true)
        const services = ref([])
        const searchQuery = ref('')
        const pinCode = ref('')
        const error = ref('')
        const bookingModal = ref(null)
        const selectedService = ref(null)
        const isBooking = ref(false)

        const bookingForm = ref({
            preferred_date: '',
            preferred_time: '',
            description: ''
        })

        // Computed properties for date constraints
        const minDate = computed(() => moment().format('YYYY-MM-DD'))
        const maxDate = computed(() => moment().add(7, 'days').format('YYYY-MM-DD'))

        // Filter services based on search query and pin code
        const filteredServices = computed(() => {
            let filtered = services.value

            if (searchQuery.value) {
                const query = searchQuery.value.toLowerCase()
                filtered = filtered.filter(service =>
                    service.name.toLowerCase().includes(query) ||
                    service.description.toLowerCase().includes(query)
                )
            }

            // Add pin code filtering when backend supports it
            return filtered
        })

        // Fetch services from backend
        const fetchServices = async () => {
            try {
                loading.value = true
                const response = await axios.get('/api/services')
                services.value = response.data.data
            } catch (err) {
                console.error('Error fetching services:', err)
                error.value = 'Failed to load services. Please try again.'
            } finally {
                loading.value = false
            }
        }

        // Handle booking modal
        const openBookingModal = (service) => {
            selectedService.value = service
            // Reset form
            bookingForm.value = {
                preferred_date: '',
                preferred_time: '',
                description: ''
            }
            error.value = ''

            // Initialize and show modal
            if (!bookingModal.value) {
                bookingModal.value = new Modal(document.getElementById('bookingModal'))
            }
            bookingModal.value.show()
        }

        // Handle booking submission
        const handleBooking = async () => {
            if (!selectedService.value) return

            try {
                isBooking.value = true
                error.value = ''

                // Combine date and time
                const preferredTime = moment(
                    `${bookingForm.value.preferred_date} ${bookingForm.value.preferred_time}`
                ).format('YYYY-MM-DD HH:mm:ss')

                const requestData = {
                    service_id: selectedService.value.id,
                    preferred_time: preferredTime,
                    description: bookingForm.value.description
                }

                await axios.post('/api/requests', requestData)

                // Close modal and redirect to requests page
                bookingModal.value.hide()
                router.push({
                    path: '/customer/requests',
                    query: {
                        success: 'true',
                        message: 'Service request created successfully!'
                    }
                })
            } catch (err) {
                error.value = err.response?.data?.detail || 'Failed to create service request'
            } finally {
                isBooking.value = false
            }
        }

        onMounted(() => {
            fetchServices()
        })

        return {
            loading,
            services,
            searchQuery,
            pinCode,
            error,
            bookingModal,
            selectedService,
            bookingForm,
            isBooking,
            filteredServices,
            minDate,
            maxDate,
            openBookingModal,
            handleBooking
        }
    }
}
</script>

<style scoped>
.hover-shadow {
    transition: box-shadow 0.3s ease-in-out;
}

.hover-shadow:hover {
    box-shadow: 0 .5rem 1rem rgba(0, 0, 0, .15) !important;
}

.modal-dialog {
    max-width: 500px;
}
</style>

================
File: src/views/customer/ServiceRequests.vue
================
<!-- src/views/customer/ServiceRequests.vue -->
<template>
    <div class="container py-4">
        <!-- Success Alert -->
        <div v-if="showSuccessAlert" class="alert alert-success alert-dismissible fade show mb-4" role="alert">
            {{ successMessage }}
            <button type="button" class="btn-close" @click="showSuccessAlert = false"></button>
        </div>

        <!-- Stats Cards -->
        <div class="row g-4 mb-4">
            <div class="col-sm-6 col-lg-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-primary bg-opacity-10 p-3 rounded">
                                <i class="bi bi-clock fs-4 text-primary"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Pending</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.pending || 0 }}</h3>
                    </div>
                </div>
            </div>

            <div class="col-sm-6 col-lg-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-info bg-opacity-10 p-3 rounded">
                                <i class="bi bi-person-workspace fs-4 text-info"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Assigned</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.assigned || 0 }}</h3>
                    </div>
                </div>
            </div>

            <div class="col-sm-6 col-lg-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-success bg-opacity-10 p-3 rounded">
                                <i class="bi bi-check-circle fs-4 text-success"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Completed</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.completed || 0 }}</h3>
                    </div>
                </div>
            </div>

            <div class="col-sm-6 col-lg-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-warning bg-opacity-10 p-3 rounded">
                                <i class="bi bi-star fs-4 text-warning"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Reviews</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.reviews || 0 }}</h3>
                    </div>
                </div>
            </div>
        </div>

        <!-- Requests Table -->
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-white py-3">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">My Service Requests</h5>
                    <div class="d-flex gap-2">
                        <!-- Filter Dropdown -->
                        <div class="dropdown">
                            <button class="btn btn-outline-secondary dropdown-toggle" type="button"
                                data-bs-toggle="dropdown">
                                {{ selectedFilter === 'all' ? 'All Requests' :
                                    selectedFilter === 'created' ? 'Pending' :
                                        selectedFilter === 'assigned' ? 'Assigned' : 'Completed' }}
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="#" @click="selectedFilter = 'all'">All Requests</a>
                                </li>
                                <li><a class="dropdown-item" href="#" @click="selectedFilter = 'created'">Pending</a>
                                </li>
                                <li><a class="dropdown-item" href="#" @click="selectedFilter = 'assigned'">Assigned</a>
                                </li>
                                <li><a class="dropdown-item" href="#"
                                        @click="selectedFilter = 'completed'">Completed</a></li>
                            </ul>
                        </div>

                        <!-- Book New Service Button -->
                        <router-link to="/services" class="btn btn-primary">
                            <i class="bi bi-plus-lg me-1"></i>
                            Book New Service
                        </router-link>
                    </div>
                </div>
            </div>

            <div class="card-body p-0">
                <!-- Loading State -->
                <div v-if="loading" class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>

                <!-- Empty State -->
                <div v-else-if="filteredRequests.length === 0" class="text-center py-5">
                    <i class="bi bi-inbox fs-1 text-muted"></i>
                    <p class="mt-2 mb-0">No service requests found</p>
                    <router-link to="/services" class="btn btn-primary mt-3">
                        Book Your First Service
                    </router-link>
                </div>

                <!-- Requests Table -->
                <div v-else class="table-responsive">
                    <table class="table table-hover align-middle mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Service</th>
                                <th>Professional</th>
                                <th>Schedule</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="request in filteredRequests" :key="request.id">
                                <td>
                                    <div class="fw-medium">{{ request.service.name }}</div>
                                    <small class="text-muted d-block">
                                        {{ truncate(request.description, 50) }}
                                    </small>
                                </td>
                                <td>
                                    <div v-if="request.professional">
                                        {{ request.professional.user.full_name }}
                                        <div class="text-success small" v-if="request.professional.average_rating">
                                            <i class="bi bi-star-fill me-1"></i>
                                            {{ request.professional.average_rating.toFixed(1) }}
                                        </div>
                                    </div>
                                    <span v-else class="text-muted">Not assigned</span>
                                </td>
                                <td>
                                    <div>{{ formatDate(request.preferred_time) }}</div>
                                    <small class="text-muted">
                                        {{ formatTime(request.preferred_time) }}
                                    </small>
                                </td>
                                <td>
                                    <span :class="[
                                        'badge',
                                        {
                                            'bg-warning': request.status === 'created',
                                            'bg-primary': request.status === 'assigned',
                                            'bg-success': request.status === 'completed'
                                        }
                                    ]">
                                        {{ request.status }}
                                    </span>
                                </td>
                                <td>
                                    <div class="d-flex gap-2">
                                        <!-- Cancel button for pending requests -->
                                        <button v-if="request.status === 'created'"
                                            class="btn btn-sm btn-outline-danger" @click="handleCancel(request)"
                                            :disabled="cancelling === request.id">
                                            <span v-if="cancelling === request.id"
                                                class="spinner-border spinner-border-sm">
                                            </span>
                                            <span v-else>Cancel</span>
                                        </button>

                                        <!-- Review button for completed requests without review -->
                                        <button v-if="request.status === 'completed' && !request.review"
                                            class="btn btn-sm btn-outline-primary" @click="openReviewModal(request)">
                                            Add Review
                                        </button>

                                        <!-- View button for all requests -->
                                        <button class="btn btn-sm btn-outline-secondary"
                                            @click="openDetailsModal(request)">
                                            View
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Review Modal -->
        <div class="modal fade" id="reviewModal" tabindex="-1" ref="reviewModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add Review</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <form @submit.prevent="submitReview">
                        <div class="modal-body">
                            <div v-if="error" class="alert alert-danger">{{ error }}</div>

                            <div class="mb-3">
                                <label class="form-label d-block">Rating</label>
                                <div class="btn-group" role="group">
                                    <button v-for="n in 5" :key="n" type="button" class="btn"
                                        :class="reviewForm.rating >= n ? 'btn-warning' : 'btn-outline-warning'"
                                        @click="reviewForm.rating = n">
                                        <i class="bi bi-star-fill"></i>
                                    </button>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Comment</label>
                                <textarea class="form-control" v-model="reviewForm.comment" rows="3"
                                    placeholder="Share your experience..." required>
                                </textarea>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-primary"
                                :disabled="!reviewForm.rating || submittingReview">
                                <span v-if="submittingReview" class="spinner-border spinner-border-sm me-2"></span>
                                {{ submittingReview ? 'Submitting...' : 'Submit Review' }}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Details Modal -->
        <div class="modal fade" id="detailsModal" tabindex="-1" ref="detailsModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Request Details</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body" v-if="selectedRequest">
                        <div class="mb-4">
                            <h6>Service Information</h6>
                            <table class="table table-sm">
                                <tr>
                                    <th style="width: 150px">Service Type</th>
                                    <td>{{ selectedRequest.service.name }}</td>
                                </tr>
                                <tr>
                                    <th>Base Price</th>
                                    <td>₹{{ selectedRequest.service.base_price }}</td>
                                </tr>
                                <tr>
                                    <th>Status</th>
                                    <td>
                                        <span :class="[
                                            'badge',
                                            {
                                                'bg-warning': selectedRequest.status === 'created',
                                                'bg-primary': selectedRequest.status === 'assigned',
                                                'bg-success': selectedRequest.status === 'completed'
                                            }
                                        ]">
                                            {{ selectedRequest.status }}
                                        </span>
                                    </td>
                                </tr>
                            </table>
                        </div>

                        <div class="mb-4">
                            <h6>Schedule</h6>
                            <table class="table table-sm">
                                <tr>
                                    <th style="width: 150px">Date</th>
                                    <td>{{ formatDate(selectedRequest.preferred_time) }}</td>
                                </tr>
                                <tr>
                                    <th>Time</th>
                                    <td>{{ formatTime(selectedRequest.preferred_time) }}</td>
                                </tr>
                                <tr>
                                    <th>Duration</th>
                                    <td>{{ selectedRequest.service.estimated_time }} minutes</td>
                                </tr>
                            </table>
                        </div>

                        <div v-if="selectedRequest.professional" class="mb-4">
                            <h6>Professional</h6>
                            <table class="table table-sm">
                                <tr>
                                    <th style="width: 150px">Name</th>
                                    <td>{{ selectedRequest.professional.user.full_name }}</td>
                                </tr>
                                <tr>
                                    <th>Experience</th>
                                    <td>{{ selectedRequest.professional.experience_years }} years</td>
                                </tr>
                                <tr>
                                    <th>Rating</th>
                                    <td>
                                        <div class="text-warning">
                                            <i v-for="n in 5" :key="n"
                                                :class="['bi', n <= Math.round(selectedRequest.professional.average_rating || 0) ? 'bi-star-fill' : 'bi-star']">
                                            </i>
                                            <span class="text-dark ms-1">
                                                {{ selectedRequest.professional.average_rating?.toFixed(1) || "Not rated" }} 
                                            </span>
                                        </div>
                                    </td>
                                </tr>
                            </table>
                        </div>
                        <div class="mb-4">
                            <h6>Description</h6>
                            <p class="mb-0">{{ selectedRequest.description }}</p>
                        </div>

                        <div v-if="selectedRequest.status === 'completed'" class="mb-4">
                            <h6>Completion Details</h6>
                            <table class="table table-sm">
                                <tr>
                                    <th style="width: 150px">Completed On</th>
                                    <td>{{ formatDate(selectedRequest.date_of_completion) }}</td>
                                </tr>
                                <tr>
                                    <th>Remarks</th>
                                    <td>{{ selectedRequest.remarks || 'No remarks' }}</td>
                                </tr>
                            </table>
                        </div>

                        <div v-if="selectedRequest.review" class="mb-4">
                            <h6>Your Review</h6>
                            <div class="bg-light p-3 rounded">
                                <div class="text-warning mb-2">
                                    <i v-for="n in 5" :key="n"
                                        :class="['bi', n <= selectedRequest.review.rating ? 'bi-star-fill' : 'bi-star']">
                                    </i>
                                </div>
                                <p class="mb-1">{{ selectedRequest.review.comment }}</p>
                                <small class="text-muted">
                                    Posted on {{ formatDate(selectedRequest.review.created_at) }}
                                </small>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref, computed, onMounted } from 'vue'
import { Modal } from 'bootstrap'
import { useRoute } from 'vue-router'
import moment from 'moment'
import axios from 'axios'

export default {
    name: 'ServiceRequests',

    setup() {
        const route = useRoute()
        const loading = ref(true)
        const requests = ref([])
        const stats = ref({})
        const selectedFilter = ref('all')
        const error = ref('')
        const cancelling = ref(null)
        const selectedRequest = ref(null)
        const reviewModal = ref(null)
        const detailsModal = ref(null)
        const submittingReview = ref(false)
        const showSuccessAlert = ref(false)
        const successMessage = ref('')

        // Review form state
        const reviewForm = ref({
            rating: 0,
            comment: ''
        })

        // Show success message from query params
        onMounted(() => {
            if (route.query.success === 'true') {
                showSuccessAlert.value = true
                successMessage.value = route.query.message || 'Operation completed successfully!'
            }
            fetchRequests()
        })

        // Filter requests based on selected status
        const filteredRequests = computed(() => {
            if (selectedFilter.value === 'all') return requests.value
            return requests.value.filter(request => request.status === selectedFilter.value)
        })

        // Fetch requests from backend
        const fetchRequests = async () => {
            try {
                loading.value = true
                const [requestsResponse, statsResponse] = await Promise.all([
                    axios.get('/api/customer/requests'),
                    axios.get('/api/dashboard-stats')
                ])

                requests.value = requestsResponse.data.data
                stats.value = statsResponse.data.data.service_requests || {}
            } catch (err) {
                console.error('Error fetching requests:', err)
                error.value = 'Failed to load service requests'
            } finally {
                loading.value = false
            }
        }

        // Cancel a service request
        const handleCancel = async (request) => {
            if (!confirm('Are you sure you want to cancel this service request?')) return

            try {
                cancelling.value = request.id
                await axios.post(`/api/requests/${request.id}/cancel`)
                await fetchRequests()
                showSuccessAlert.value = true
                successMessage.value = 'Service request cancelled successfully'
            } catch (err) {
                error.value = err.response?.data?.detail || 'Failed to cancel request'
            } finally {
                cancelling.value = null
            }
        }

        // Open review modal
        const openReviewModal = (request) => {
            selectedRequest.value = request
            reviewForm.value = { rating: 0, comment: '' }
            error.value = ''

            if (!reviewModal.value) {
                reviewModal.value = new Modal(document.getElementById('reviewModal'))
            }
            reviewModal.value.show()
        }

        // Open details modal
        const openDetailsModal = (request) => {
            selectedRequest.value = request

            if (!detailsModal.value) {
                detailsModal.value = new Modal(document.getElementById('detailsModal'))
            }
            detailsModal.value.show()
        }

        // Submit review
        const submitReview = async () => {
            if (!selectedRequest.value || !reviewForm.value.rating) return

            try {
                submittingReview.value = true
                await axios.post(`/api/requests/${selectedRequest.value.id}/review`, reviewForm.value)
                await fetchRequests()
                reviewModal.value.hide()
                showSuccessAlert.value = true
                successMessage.value = 'Review submitted successfully'
            } catch (err) {
                error.value = err.response?.data?.detail || 'Failed to submit review'
            } finally {
                submittingReview.value = false
            }
        }

        // Utility functions
        const formatDate = (date) => moment(date).format('MMM D, YYYY')
        const formatTime = (date) => moment(date).format('h:mm A')
        const truncate = (str, length) => {
            if (!str) return ''
            return str.length > length ? str.substring(0, length) + '...' : str
        }

        return {
            loading,
            requests,
            stats,
            selectedFilter,
            error,
            cancelling,
            selectedRequest,
            reviewForm,
            submittingReview,
            showSuccessAlert,
            successMessage,
            filteredRequests,
            handleCancel,
            openReviewModal,
            openDetailsModal,
            submitReview,
            formatDate,
            formatTime,
            truncate
        }
    }
}
</script>

<style scoped>
.card {
    transition: box-shadow 0.3s ease-in-out;
}

.btn-group .btn {
    min-width: 40px;
}

.table> :not(:first-child) {
    border-top: none;
}
</style>

================
File: src/views/customer/ServiceSearch.vue
================
<!-- src/views/customer/ServiceSearch.vue -->
<template>
    <div class="container py-4">
        <h2>Search Services</h2>

        <div class="card shadow-sm mb-4">
            <div class="card-body">
                <form @submit.prevent="searchServices">
                    <div class="row g-3">
                        <div class="col-md-4">
                            <input type="text" class="form-control" v-model="searchQuery" placeholder="Search by name">
                        </div>
                        <div class="col-md-4">
                            <input type="text" class="form-control" v-model="pinCode" placeholder="Search by PIN code">
                        </div>
                        <div class="col-md-4">
                            <button type="submit" class="btn btn-primary">Search</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>

        <div v-if="loading" class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>

        <div v-else-if="services.length === 0" class="text-center">
            <p>No services found.</p>
        </div>

        <div v-else class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            <div v-for="service in services" :key="service.id" class="col">
                <div class="card h-100 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">{{ service.name }}</h5>
                        <p class="card-text">{{ service.description }}</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="text-muted">{{ service.estimated_time }} mins</span>
                            <span class="text-primary fw-bold">₹{{ service.base_price }}</span>
                        </div>
                    </div>
                    <div class="card-footer text-center">
                        <button class="btn btn-primary" @click="bookService(service)">Book Now</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref } from 'vue'
import axios from 'axios'

export default {
    name: 'ServiceSearch',

    setup() {
        const searchQuery = ref('')
        const pinCode = ref('')
        const services = ref([])
        const loading = ref(false)

        const searchServices = async () => {
            try {
                loading.value = true
                const response = await axios.get('/api/services', {
                    params: {
                        search: searchQuery.value,
                        pin_code: pinCode.value
                    }
                })
                services.value = response.data.data
            } catch (error) {
                console.error('Error searching services:', error)
            } finally {
                loading.value = false
            }
        }

        const bookService = (service) => {
            // Navigate to service booking page with selected service
            // You can use Vue Router to pass the service as a parameter
            // Example: router.push({ name: 'BookService', params: { service } })
        }

        return {
            searchQuery,
            pinCode,
            services,
            loading,
            searchServices,
            bookService
        }
    }
}
</script>

================
File: src/views/Login.vue
================
<template>
    <div class="login-view">
      <LoginForm />
    </div>
  </template>
  
  <script>
  import LoginForm from '../components/auth/LoginForm.vue';
  
  export default {
    components: {
      LoginForm,
    },
  };
  </script>

================
File: src/views/NotFound.vue
================
<template>
  <div class="min-vh-100 bg-light d-flex align-items-center justify-content-center py-12 px-4">
    <div class="text-center">
      <div class="card shadow-lg">
        <div class="card-body p-5">
          <!-- Warning Icon Container -->
          <div class="mx-auto d-flex align-items-center justify-content-center rounded-circle bg-danger bg-opacity-10"
            style="width: 96px; height: 96px;">
            <span style="font-size: 3rem;">⚠️</span>
          </div>

          <!-- Error Message -->
          <h2 class="mt-4 fw-bold">
            Oops! Page Not Found
          </h2>

          <p class="mt-3 text-muted fs-5">
            The page you're looking for doesn't exist or has been moved.
          </p>

          <!-- Home Button -->
          <div class="mt-4">
            <button @click="goHome" class="btn btn-primary d-inline-flex align-items-center gap-2">
              <i class="bi bi-house-fill"></i>
              Back to Home
            </button>
          </div>

          <!-- Error Code -->
          <div class="mt-4">
            <p class="text-muted small">
              Error Code: 404
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { useRouter } from 'vue-router';

export default {
  setup() {
    const router = useRouter();

    const goHome = () => {
      router.push('/');
    };

    return {
      goHome,
    };
  },
};
</script>

================
File: src/views/professional/Dashboard.vue
================
// frontend/src/views/professional/Dashboard.vue
<template>
    <div class="dashboard">
        <!-- Profile Status Alert -->
        <div v-if="!stats.profile_status?.is_verified" class="alert alert-warning alert-dismissible fade show mb-4"
            role="alert">
            <div class="d-flex align-items-center">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <div>
                    <strong>Account Pending Verification</strong>
                    <p class="mb-0">Your account is currently under review. You'll be notified once verified.</p>
                </div>
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>

        <!-- Stats Overview -->
        <div class="row g-4 mb-4">
            <div class="col-md-6 col-lg-3">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-primary bg-opacity-10 p-3 rounded">
                                <i class="bi bi-briefcase fs-4 text-primary"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Active Jobs</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.service_requests?.active || 0 }}</h3>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-lg-3">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-success bg-opacity-10 p-3 rounded">
                                <i class="bi bi-check-circle fs-4 text-success"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Completed Jobs</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.service_requests?.completed || 0 }}</h3>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-lg-3">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-info bg-opacity-10 p-3 rounded">
                                <i class="bi bi-star fs-4 text-info"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Average Rating</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">
                            {{ stats.reviews?.average_rating?.toFixed(1) || '0.0' }}
                            <small class="text-muted fs-6">/5</small>
                        </h3>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-lg-3">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-warning bg-opacity-10 p-3 rounded">
                                <i class="bi bi-bell fs-4 text-warning"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Available Requests</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ availableRequests.length }}</h3>
                    </div>
                </div>
            </div>
        </div>

        <div class="row g-4">
            <!-- Available Service Requests -->
            <div class="col-lg-8">
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-transparent border-0">
                        <div class="d-flex align-items-center justify-content-between">
                            <h5 class="mb-0">Available Service Requests</h5>
                            <router-link to="/professional/requests" class="btn btn-sm btn-primary">
                                View All
                            </router-link>
                        </div>
                    </div>
                    <div class="card-body">
                        <div v-if="loading" class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>

                        <div v-else-if="availableRequests.length === 0" class="text-center py-4">
                            <i class="bi bi-calendar-x fs-1 text-muted"></i>
                            <p class="mt-2 mb-0">No available service requests</p>
                        </div>

                        <div v-else class="table-responsive">
                            <table class="table table-hover align-middle">
                                <thead class="table-light">
                                    <tr>
                                        <th>Customer</th>
                                        <th>Location</th>
                                        <th>Preferred Time</th>
                                        <th>Description</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="request in availableRequests" :key="request.id">
                                        <td>{{ request.customer.user.full_name }}</td>
                                        <td>{{ request.customer.user.pin_code }}</td>
                                        <td>{{ formatDate(request.preferred_time) }}</td>
                                        <td>
                                            <span class="text-truncate d-inline-block" style="max-width: 200px;">
                                                {{ request.description }}
                                            </span>
                                        </td>
                                        <td>
                                            <button class="btn btn-sm btn-success" @click="acceptRequest(request.id)"
                                                :disabled="accepting === request.id">
                                                <span v-if="accepting === request.id"
                                                    class="spinner-border spinner-border-sm me-1">
                                                </span>
                                                Accept
                                            </button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- Active Jobs -->
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-transparent border-0">
                        <div class="d-flex align-items-center justify-content-between">
                            <h5 class="mb-0">Active Jobs</h5>
                            <router-link to="/professional/jobs" class="btn btn-sm btn-primary">
                                View All
                            </router-link>
                        </div>
                    </div>
                    <div class="card-body">
                        <div v-if="loading" class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>

                        <div v-else-if="activeJobs.length === 0" class="text-center py-4">
                            <i class="bi bi-briefcase fs-1 text-muted"></i>
                            <p class="mt-2 mb-0">No active jobs</p>
                        </div>

                        <div v-else class="table-responsive">
                            <table class="table table-hover align-middle">
                                <thead class="table-light">
                                    <tr>
                                        <th>Customer</th>
                                        <th>Service</th>
                                        <th>Schedule</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="job in activeJobs" :key="job.id">
                                        <td>{{ job.customer.user.full_name }}</td>
                                        <td>{{ job.service.name }}</td>
                                        <td>{{ formatDate(job.preferred_time) }}</td>
                                        <td>
                                            <span class="badge bg-primary">{{ job.status }}</span>
                                        </td>
                                        <td>
                                            <button class="btn btn-sm btn-success me-2" @click="openCompleteModal(job)">
                                                Complete
                                            </button>
                                            <button class="btn btn-sm btn-outline-primary" @click="viewDetails(job)">
                                                Details
                                            </button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Side Section -->
            <div class="col-lg-4">
                <!-- Professional Profile Card -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-body">
                        <div class="text-center mb-4">
                            <div class="avatar mb-3">
                                <i class="bi bi-person-circle display-1 text-primary"></i>
                            </div>
                            <h5 class="mb-1">{{ user.full_name }}</h5>
                            <p class="text-muted mb-2">{{ user.service_type }}</p>
                            <div class="rating text-warning">
                                <i v-for="n in 5" :key="n"
                                    :class="['bi', n <= Math.round(stats.reviews?.average_rating || 0) ? 'bi-star-fill' : 'bi-star']">
                                </i>
                                <span class="ms-2 text-muted">
                                    ({{ stats.reviews?.total || 0 }} reviews)
                                </span>
                            </div>
                        </div>

                        <div class="border-top pt-3">
                            <div class="row text-center">
                                <div class="col">
                                    <h6 class="mb-1">{{ stats.service_requests?.total || 0 }}</h6>
                                    <small class="text-muted">Total Jobs</small>
                                </div>
                                <div class="col border-start">
                                    <h6 class="mb-1">{{ stats.service_requests?.completed || 0 }}</h6>
                                    <small class="text-muted">Completed</small>
                                </div>
                                <div class="col border-start">
                                    <h6 class="mb-1">{{ user.experience_years }}</h6>
                                    <small class="text-muted">Years Exp.</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Recent Reviews -->
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-transparent border-0">
                        <h5 class="mb-0">Recent Reviews</h5>
                    </div>
                    <div class="card-body">
                        <div v-if="loading" class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>

                        <div v-else-if="recentReviews.length === 0" class="text-center py-4">
                            <i class="bi bi-star fs-1 text-muted"></i>
                            <p class="mt-2 mb-0">No reviews yet</p>
                        </div>

                        <div v-else class="reviews-list">
                            <div v-for="review in recentReviews" :key="review.id"
                                class="review-item mb-3 p-3 bg-light rounded">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <div class="rating text-warning">
                                        <i v-for="n in 5" :key="n"
                                            :class="['bi', n <= review.rating ? 'bi-star-fill' : 'bi-star']">
                                        </i>
                                    </div>
                                    <small class="text-muted">
                                        {{ formatDate(review.created_at) }}
                                    </small>
                                </div>
                                <p class="mb-1">{{ review.comment }}</p>
                                <small class="text-muted">
                                    By: {{ review.service_request.customer.user.full_name }}
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Complete Job Modal -->
        <div class="modal fade" id="completeModal" tabindex="-1" ref="completeModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Complete Service</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form @submit.prevent="completeJob">
                            <div class="mb-3">
                                <label class="form-label">Completion Remarks</label>
                                <textarea v-model="completionForm.remarks" class="form-control" rows="3"
                                    placeholder="Describe the completed work..." required></textarea>
                            </div>
                            <div class="text-end">
                                <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">
                                    Cancel
                                </button>
                                <button type="submit" class="btn btn-success" :disabled="completing">
                                    <span v-if="completing" class="spinner-border spinner-border-sm me-1"></span>
                                    Mark as Complete
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref, reactive, onMounted, computed } from 'vue'
import { useStore } from 'vuex'
import { Modal } from 'bootstrap'
import moment from 'moment'
import axios from 'axios'

export default {
    name: 'ProfessionalDashboard',

    setup() {
        const store = useStore()
        const loading = ref(true)
        const stats = ref({})
        const availableRequests = ref([])
        const activeJobs = ref([])
        const recentReviews = ref([])
        const accepting = ref(null)
        const completing = ref(false)
        const completeModal = ref(null)
        const selectedJob = ref(null)

        const user = computed(() => store.getters['auth/getUser'])

        const completionForm = reactive({
            remarks: ''
        })

        // Fetch dashboard data
        const fetchDashboardData = async () => {
            try {
                loading.value = true
                const [statsRes, requestsRes, jobsRes, reviewsRes] = await Promise.all([
                    axios.get('/api/professional/requests?type=active'),
                    axios.get('/api/professional/reviews?per_page=3')
                ])

                stats.value = statsRes.data.data
                availableRequests.value = requestsRes.data.data
                activeJobs.value = jobsRes.data.data
                recentReviews.value = reviewsRes.data.data
            } catch (error) {
                console.error('Error fetching dashboard data:', error)
            } finally {
                loading.value = false
            }
        }

        const acceptRequest = async (requestId) => {
            try {
                accepting.value = requestId
                await axios.post(`/api/requests/${requestId}/accept`)
                await fetchDashboardData()
            } catch (error) {
                console.error('Error accepting request:', error)
            } finally {
                accepting.value = null
            }
        }

        const openCompleteModal = (job) => {
            selectedJob.value = job
            completionForm.remarks = ''
            const modal = new Modal(completeModal.value)
            modal.show()
        }

        const completeJob = async () => {
            if (!selectedJob.value || !completionForm.remarks.trim()) return

            try {
                completing.value = true
                await axios.post(`/api/requests/${selectedJob.value.id}/complete`, completionForm)
                const modal = Modal.getInstance(completeModal.value)
                modal.hide()
                await fetchDashboardData()
            } catch (error) {
                console.error('Error completing job:', error)
            } finally {
                completing.value = false
            }
        }

        const viewDetails = (job) => {
            // Implement job details view navigation
            router.push(`/professional/jobs/${job.id}`)
        }

        const formatDate = (date) => {
            return moment(date).format('MMM D, YYYY h:mm A')
        }

        onMounted(() => {
            fetchDashboardData()
        })

        return {
            user,
            loading,
            stats,
            availableRequests,
            activeJobs,
            recentReviews,
            accepting,
            completing,
            completeModal,
            completionForm,
            acceptRequest,
            openCompleteModal,
            completeJob,
            viewDetails,
            formatDate
        }
    }
}
</script>

<style scoped>
.dashboard {
    padding: 1.5rem;
}

.card {
    transition: transform 0.2s;
}

.card:hover {
    transform: translateY(-2px);
}

.avatar {
    width: 100px;
    height: 100px;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
}

.rating i {
    cursor: default;
    margin-right: 2px;
}

.reviews-list {
    max-height: 400px;
    overflow-y: auto;
}

.review-item:hover {
    background-color: #f0f0f0 !important;
}

/* Custom scrollbar for reviews list */
.reviews-list::-webkit-scrollbar {
    width: 6px;
}

.reviews-list::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
}

.reviews-list::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 10px;
}

.reviews-list::-webkit-scrollbar-thumb:hover {
    background: #555;
}
</style>

================
File: src/views/professional/ServiceRequests.vue
================
<!-- src/views/professional/ServiceRequests.vue -->
<template>
    <div class="container py-4">
        <!-- Success Alert -->
        <div v-if="showSuccessAlert" class="alert alert-success alert-dismissible fade show mb-4" role="alert">
            {{ successMessage }}
            <button type="button" class="btn-close" @click="showSuccessAlert = false"></button>
        </div>

        <!-- Stats Overview -->
        <div class="row g-4 mb-4">
            <div class="col-sm-6 col-lg-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-primary bg-opacity-10 p-3 rounded">
                                <i class="bi bi-briefcase fs-4 text-primary"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Active Jobs</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.service_requests?.active || 0 }}</h3>
                    </div>
                </div>
            </div>

            <div class="col-sm-6 col-lg-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-success bg-opacity-10 p-3 rounded">
                                <i class="bi bi-check-circle fs-4 text-success"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Completed</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.service_requests?.completed || 0 }}</h3>
                    </div>
                </div>
            </div>

            <div class="col-sm-6 col-lg-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-info bg-opacity-10 p-3 rounded">
                                <i class="bi bi-star fs-4 text-info"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Rating</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">
                            {{ stats.reviews?.average_rating?.toFixed(1) || '0.0' }}
                            <small class="text-muted fs-6">/5</small>
                        </h3>
                    </div>
                </div>
            </div>

            <div class="col-sm-6 col-lg-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-warning bg-opacity-10 p-3 rounded">
                                <i class="bi bi-bell fs-4 text-warning"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Available</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ availableRequests.length }}</h3>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tabs -->
        <ul class="nav nav-tabs mb-4">
            <li class="nav-item">
                <a class="nav-link" :class="{ active: activeTab === 'available' }" href="#"
                    @click.prevent="activeTab = 'available'">
                    Available Requests
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" :class="{ active: activeTab === 'active' }" href="#"
                    @click.prevent="activeTab = 'active'">
                    Active Jobs
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" :class="{ active: activeTab === 'completed' }" href="#"
                    @click.prevent="activeTab = 'completed'">
                    Completed
                </a>
            </li>
        </ul>

        <!-- Content Area -->
        <div class="card border-0 shadow-sm">
            <!-- Available Requests Tab -->
            <div v-show="activeTab === 'available'" class="card-body p-0">
                <div v-if="loading" class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>

                <div v-else-if="availableRequests.length === 0" class="text-center py-5">
                    <i class="bi bi-inbox fs-1 text-muted"></i>
                    <p class="mt-2 mb-0">No available service requests</p>
                </div>

                <div v-else class="table-responsive">
                    <table class="table table-hover align-middle mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Customer</th>
                                <th>Location</th>
                                <th>Schedule</th>
                                <th>Description</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="request in availableRequests" :key="request.id">
                                <td>
                                    {{ request.customer.user.full_name }}
                                    <small class="text-muted d-block">
                                        {{ request.customer.user.phone }}
                                    </small>
                                </td>
                                <td>{{ request.customer.user.pin_code }}</td>
                                <td>
                                    <div>{{ formatDate(request.preferred_time) }}</div>
                                    <small class="text-muted">
                                        {{ formatTime(request.preferred_time) }}
                                    </small>
                                </td>
                                <td>
                                    <span class="text-truncate d-inline-block" style="max-width: 200px;">
                                        {{ request.description }}
                                    </span>
                                </td>
                                <td>
                                    <div class="d-flex gap-2">
                                        <button class="btn btn-sm btn-success" @click="handleAccept(request)"
                                            :disabled="accepting === request.id">
                                            <span v-if="accepting === request.id"
                                                class="spinner-border spinner-border-sm me-1">
                                            </span>
                                            Accept
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary"
                                            @click="openDetailsModal(request)">
                                            View
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Active Jobs Tab -->
            <div v-show="activeTab === 'active'" class="card-body p-0">
                <div v-if="loading" class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>

                <div v-else-if="activeJobs.length === 0" class="text-center py-5">
                    <i class="bi bi-briefcase fs-1 text-muted"></i>
                    <p class="mt-2 mb-0">No active jobs</p>
                </div>

                <div v-else class="table-responsive">
                    <table class="table table-hover align-middle mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Customer</th>
                                <th>Service</th>
                                <th>Schedule</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="job in activeJobs" :key="job.id">
                                <td>
                                    {{ job.customer.user.full_name }}
                                    <small class="text-muted d-block">
                                        {{ job.customer.user.phone }}
                                    </small>
                                </td>
                                <td>{{ job.service.name }}</td>
                                <td>
                                    <div>{{ formatDate(job.preferred_time) }}</div>
                                    <small class="text-muted">
                                        {{ formatTime(job.preferred_time) }}
                                    </small>
                                </td>
                                <td>
                                    <span class="badge bg-primary">{{ job.status }}</span>
                                </td>
                                <td>
                                    <div class="d-flex gap-2">
                                        <button class="btn btn-sm btn-success" @click="openCompleteModal(job)">
                                            Complete
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary" @click="openDetailsModal(job)">
                                            View
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Completed Jobs Tab -->
            <div v-show="activeTab === 'completed'" class="card-body p-0">
                <div v-if="loading" class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>

                <div v-else-if="completedJobs.length === 0" class="text-center py-5">
                    <i class="bi bi-check-circle fs-1 text-muted"></i>
                    <p class="mt-2 mb-0">No completed jobs</p>
                </div>

                <div v-else class="table-responsive">
                    <table class="table table-hover align-middle mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Customer</th>
                                <th>Service</th>
                                <th>Completed On</th>
                                <th>Review</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="job in completedJobs" :key="job.id">
                                <td>
                                    {{ job.customer.user.full_name }}
                                    <small class="text-muted d-block">
                                        {{ job.customer.user.phone }}
                                    </small>
                                </td>
                                <td>{{ job.service.name }}</td>
                                <td>
                                    {{ formatDate(job.date_of_completion) }}
                                </td>
                                <td>
                                    <div v-if="job.review" class="text-warning">
                                        <i v-for="n in 5" :key="n"
                                            :class="['bi', n <= job.review.rating ? 'bi-star-fill' : 'bi-star']">
                                        </i>
                                    </div>
                                    <span v-else class="text-muted">No review yet</span>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-outline-secondary" @click="openDetailsModal(job)">
                                        View
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Complete Job Modal -->
        <div class="modal fade" id="completeModal" tabindex="-1" ref="completeModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Complete Service</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <form @submit.prevent="handleComplete">
                        <div class="modal-body">
                            <div v-if="error" class="alert alert-danger">{{ error }}</div>

                            <div class="mb-3">
                                <label class="form-label">Service Remarks</label>
                                <textarea class="form-control" v-model="completionForm.remarks" rows="3"
                                    placeholder="Describe the completed work..." required>
                                </textarea>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-success" :disabled="completing">
                                <span v-if="completing" class="spinner-border spinner-border-sm me-2"></span>
                                {{ completing ? 'Completing...' : 'Mark as Complete' }}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Details Modal -->
        <div class="modal fade" id="detailsModal" tabindex="-1" ref="detailsModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Request Details</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body" v-if="selectedRequest">
                        <div class="mb-4">
                            <h6>Service Information</h6>
                            <table class="table table-sm">
                                <tr>
                                    <th style="width: 150px">Service Type</th>
                                    <td>{{ selectedRequest.service.name }}</td>
                                </tr>
                                <tr>
                                    <th>Base Price</th>
                                    <td>₹{{ selectedRequest.service.base_price }}</td>
                                </tr>
                                <tr>
                                    <th>Status</th>
                                    <td>
                                        <span :class="[
                                            'badge',
                                            {
                                                'bg-warning': selectedRequest.status === 'created',
                                                'bg-primary': selectedRequest.status === 'assigned',
                                                'bg-success': selectedRequest.status === 'completed'
                                            }
                                        ]">
                                            {{ selectedRequest.status }}
                                        </span>
                                    </td>
                                </tr>
                            </table>
                        </div>

                        <div class="mb-4">
                            <h6>Customer Information</h6>
                            <table class="table table-sm">
                                <tr>
                                    <th style="width: 150px">Name</th>
                                    <td>{{ selectedRequest.customer.user.full_name }}</td>
                                </tr>
                                <tr>
                                    <th>Phone</th>
                                    <td>{{ selectedRequest.customer.user.phone }}</td>
                                </tr>
                                <tr>
                                    <th>PIN Code</th>
                                    <td>{{ selectedRequest.customer.user.pin_code }}</td>
                                </tr>
                            </table>
                        </div>

                        <div class="mb-4">
                            <h6>Schedule</h6>
                            <table class="table table-sm">
                                <tr>
                                    <th style="width: 150px">Date</th>
                                    <td>{{ formatDate(selectedRequest.preferred_time) }}</td>
                                </tr>
                                <tr>
                                    <th>Time</th>
                                    <td>{{ formatTime(selectedRequest.preferred_time) }}</td>
                                </tr>
                                <tr>
                                    <th>Duration</th>
                                    <td>{{ selectedRequest.service.estimated_time }} minutes</td>
                                </tr>
                            </table>
                        </div>

                        <div class="mb-4">
                            <h6>Description</h6>
                            <p class="mb-0">{{ selectedRequest.description }}</p>
                        </div>

                        <div v-if="selectedRequest.status === 'completed'" class="mb-4">
                            <h6>Completion Details</h6>
                            <table class="table table-sm">
                                <tr>
                                    <th style="width: 150px">Completed On</th>
                                    <td>{{ formatDate(selectedRequest.date_of_completion) }}</td>
                                </tr>
                                <tr>
                                    <th>Remarks</th>
                                    <td>{{ selectedRequest.remarks || 'No remarks' }}</td>
                                </tr>
                            </table>
                        </div>

                        <div v-if="selectedRequest.review" class="mb-4">
                            <h6>Customer Review</h6>
                            <div class="bg-light p-3 rounded">
                                <div class="text-warning mb-2">
                                    <i v-for="n in 5" :key="n"
                                        :class="['bi', n <= selectedRequest.review.rating ? 'bi-star-fill' : 'bi-star']">
                                    </i>
                                </div>
                                <p class="mb-1">{{ selectedRequest.review.comment }}</p>
                                <small class="text-muted">
                                    Posted on {{ formatDate(selectedRequest.review.created_at) }}
                                </small>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref, computed, onMounted } from 'vue'
import { Modal } from 'bootstrap'
import moment from 'moment'
import axios from 'axios'

export default {
    name: 'ServiceRequests',

    setup() {
        // State
        const loading = ref(true)
        const activeTab = ref('available')
        const requests = ref([])
        const stats = ref({})
        const error = ref('')
        const accepting = ref(null)
        const completing = ref(false)
        const selectedRequest = ref(null)
        const completeModal = ref(null)
        const detailsModal = ref(null)
        const showSuccessAlert = ref(false)
        const successMessage = ref('')

        const completionForm = ref({
            remarks: ''
        })

        // Computed properties for different request types
        const availableRequests = computed(() =>
            requests.value.filter(r => r.status === 'created')
        )

        const activeJobs = computed(() =>
            requests.value.filter(r => r.status === 'assigned')
        )

        const completedJobs = computed(() =>
            requests.value.filter(r => r.status === 'completed')
        )

        // Fetch requests from backend
        const fetchRequests = async () => {
            try {
                loading.value = true
                const [requestsResponse, statsResponse] = await Promise.all([
                    axios.get('/api/professional/requests?type=all'),
                    axios.get('/api/dashboard-stats')
                ])

                requests.value = requestsResponse.data.data
                stats.value = statsResponse.data.data
            } catch (err) {
                console.error('Error fetching requests:', err)
                error.value = 'Failed to load service requests'
            } finally {
                loading.value = false
            }
        }

        // Accept a service request
        const handleAccept = async (request) => {
            try {
                accepting.value = request.id
                await axios.post(`/api/requests/${request.id}/accept`)
                await fetchRequests()
                showSuccessAlert.value = true
                successMessage.value = 'Service request accepted successfully'
            } catch (err) {
                error.value = err.response?.data?.detail || 'Failed to accept request'
            } finally {
                accepting.value = null
            }
        }

        // Open complete modal
        const openCompleteModal = (request) => {
            selectedRequest.value = request
            completionForm.value = { remarks: '' }
            error.value = ''

            if (!completeModal.value) {
                completeModal.value = new Modal(document.getElementById('completeModal'))
            }
            completeModal.value.show()
        }

        // Open details modal
        const openDetailsModal = (request) => {
            selectedRequest.value = request

            if (!detailsModal.value) {
                detailsModal.value = new Modal(document.getElementById('detailsModal'))
            }
            detailsModal.value.show()
        }

        // Complete a service
        const handleComplete = async () => {
            if (!selectedRequest.value || !completionForm.value.remarks.trim()) return

            try {
                completing.value = true
                await axios.post(`/api/requests/${selectedRequest.value.id}/complete`, completionForm.value)
                await fetchRequests()
                completeModal.value.hide()
                showSuccessAlert.value = true
                successMessage.value = 'Service marked as completed successfully'
            } catch (err) {
                error.value = err.response?.data?.detail || 'Failed to complete service'
            } finally {
                completing.value = false
            }
        }

        // Utility functions
        const formatDate = (date) => moment(date).format('MMM D, YYYY')
        const formatTime = (date) => moment(date).format('h:mm A')

        onMounted(() => {
            fetchRequests()
        })

        return {
            loading,
            activeTab,
            stats,
            error,
            accepting,
            completing,
            selectedRequest,
            completionForm,
            showSuccessAlert,
            successMessage,
            availableRequests,
            activeJobs,
            completedJobs,
            handleAccept,
            openCompleteModal,
            openDetailsModal,
            handleComplete,
            formatDate,
            formatTime
        }
    }
}
</script>

<style scoped>
.card {
    transition: box-shadow 0.3s ease-in-out;
}

.nav-tabs .nav-link {
    color: #6c757d;
}

.nav-tabs .nav-link.active {
    color: #0d6efd;
    font-weight: 500;
}

.table> :not(:first-child) {
    border-top: none;
}
</style>

================
File: src/views/Register.vue
================
<template>
    <div class="container mt-5">
      <div class="row justify-content-center">
        <div class="col-md-6 col-lg-4">
          <div class="card">
            <div class="card-body">
              <h2 class="text-center mb-4">Register</h2>
              <form @submit.prevent="handleSubmit">
                <div class="mb-3">
                  <label for="username" class="form-label">Username</label>
                  <input type="text" id="username" v-model="username" class="form-control" required />
                </div>
                <div class="mb-3">
                  <label for="password" class="form-label">Password</label>
                  <input type="password" id="password" v-model="password" class="form-control" required />
                </div>
                <div class="mb-3">
                  <label for="confirmPassword" class="form-label">Confirm Password</label>
                  <input type="password" id="confirmPassword" v-model="confirmPassword" class="form-control" required />
                </div>
                <button type="submit" class="btn btn-primary w-100">Register</button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </template>
  
  <script>
  import { ref } from 'vue';
  
  export default {
    setup() {
      const username = ref('');
      const password = ref('');
      const confirmPassword = ref('');
  
      const handleSubmit = () => {
        // Add registration logic here
        alert('Registration submitted');
      };
  
      return {
        username,
        password,
        confirmPassword,
        handleSubmit,
      };
    },
  };
  </script>

================
File: vite.config.js
================
import { fileURLToPath, URL } from 'node:url'

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import VueDevTools from 'vite-plugin-vue-devtools'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    vue(),
    VueDevTools(),
  ],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    }
  },
  base: '/',
  build: {
    outDir: '../build', // Set the output directory to the project root
    emptyOutDir: true, // Clear the output directory before building
    assetsDir: 'static'
  }
})
