This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-30T03:10:53.846Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
index.html
package.json
src/App.vue
src/assets/styles.scss
src/components/auth/CustomerRegisterForm.vue
src/components/auth/LoginForm.vue
src/components/auth/ProfessionalRegisterForm.vue
src/components/layout/NotificationsList.vue
src/components/layout/TheNavbar.vue
src/components/shared/ConfirmDialog.vue
src/components/shared/FormNavigationGuard.vue
src/components/shared/Loading.vue
src/components/shared/Toast.vue
src/composables/useProfessionalProfile.js
src/composables/useProfileManagement.js
src/layouts/BaseLayout.vue
src/main.js
src/mixins/formHandling.js
src/mixins/formNavigation.js
src/router/index.js
src/services/api.js
src/services/profile.services.js
src/store/index.js
src/store/modules/auth.js
src/store/modules/profile.js
src/utils/validation/profile.js
src/views/admin/AdminProfessionalManagement.vue
src/views/admin/AdminServiceManagement.vue
src/views/admin/Dashboard.vue
src/views/customer/Dashboard.vue
src/views/customer/ServiceBrowser.vue
src/views/customer/ServiceRequests.vue
src/views/customer/ServiceSearch.vue
src/views/Login.vue
src/views/NotFound.vue
src/views/professional/Dashboard.vue
src/views/professional/ProfessionalDashboard.vue
src/views/professional/ServiceRequestManagement.vue
src/views/professional/ServiceRequests.vue
src/views/profile/ProfilePage.vue
src/views/public/AboutPage.vue
src/views/public/ContactPage.vue
src/views/public/PrivacyPage.vue
src/views/public/ServicesPage.vue
src/views/public/TermsPage.vue
src/views/Register.vue
vite.config.js

================================================================
Repository Files
================================================================

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Influencer Engagement & Sponsorship Coordination Platform</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "frontend",
  "version": "0.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@popperjs/core": "^2.11.8",
    "@vuelidate/core": "^2.0.3",
    "@vuelidate/validators": "^2.0.4",
    "axios": "^1.7.8",
    "bootstrap": "^5.3.3",
    "bootstrap-icons": "^1.11.3",
    "chart.js": "^4.4.6",
    "moment": "^2.30.1",
    "vue": "^3.4.29",
    "vue-router": "^4.3.3",
    "vuex": "^4.1.0"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^5.0.5",
    "npm-run-all2": "^6.2.0",
    "sass": "^1.81.0",
    "vite": "^5.3.1",
    "vite-plugin-vue-devtools": "^7.3.1"
  }
}

================
File: src/App.vue
================
// frontend/src/App.vue
<template>
  <base-layout />
</template>

<script>
import BaseLayout from './layouts/BaseLayout.vue'

export default {
  name: 'App',
  components: {
    BaseLayout
  }
}
</script>

<style>
/* Global styles */
body {
  margin: 0;
  font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", "Noto Sans", "Liberation Sans", Arial, sans-serif;
}

.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.3s;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}

/* Bootstrap overrides and customizations */
.btn {
  font-weight: 500;
}

.form-control:focus {
  box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.15);
}

.invalid-feedback {
  font-size: 0.875em;
}
</style>

================
File: src/assets/styles.scss
================
@import "bootstrap/scss/bootstrap";

*, *::before, *::after {
    box-sizing: border-box;
  }
  * {
    margin: 0;
  }
  body {
    line-height: 1.5;
    -webkit-font-smoothing: antialiased;
  }
  img, picture, video, canvas, svg {
    display: block;
    max-width: 100%;
  }
  input, button, textarea, select {
    font: inherit;
  }
  p, h1, h2, h3, h4, h5, h6 {
    overflow-wrap: break-word;
  }
  #root, #__next {
    isolation: isolate;
  }

================
File: src/components/auth/CustomerRegisterForm.vue
================
// frontend/src/components/auth/CustomerRegisterForm.vue
<template>
    <div class="container mt-5">
        <div class="row justify-content-center">
            <!-- Main form content remains the same until the end -->
            <div class="col-md-8 col-lg-6">
                <div class="card shadow">
                    <div class="card-header bg-primary text-white text-center py-3">
                        <h4 class="mb-0">Customer Registration</h4>
                    </div>
                    <div class="card-body p-4">
                        <!-- Alert for errors -->
                        <div v-if="error" class="alert alert-danger alert-dismissible fade show" role="alert">
                            {{ error }}
                            <button type="button" class="btn-close" @click="error = ''"></button>
                        </div>

                        <form @submit.prevent="handleSubmit" class="needs-validation" novalidate>
                            <div class="row g-3">
                                <!-- Username -->
                                <div class="col-12">
                                    <label for="username" class="form-label">Username</label>
                                    <input type="text" id="username" v-model="form.username"
                                        :class="['form-control', { 'is-invalid': v$.form.username.$error }]"
                                        :disabled="isLoading" @input="v$.form.username.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.username.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Email -->
                                <div class="col-12">
                                    <label for="email" class="form-label">Email</label>
                                    <input type="email" id="email" v-model="form.email"
                                        :class="['form-control', { 'is-invalid': v$.form.email.$error }]"
                                        :disabled="isLoading" @input="v$.form.email.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.email.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Full Name -->
                                <div class="col-12">
                                    <label for="fullName" class="form-label">Full Name</label>
                                    <input type="text" id="fullName" v-model="form.full_name"
                                        :class="['form-control', { 'is-invalid': v$.form.full_name.$error }]"
                                        :disabled="isLoading" @input="v$.form.full_name.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.full_name.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Phone -->
                                <div class="col-md-6">
                                    <label for="phone" class="form-label">Phone Number</label>
                                    <input type="tel" id="phone" v-model="form.phone"
                                        :class="['form-control', { 'is-invalid': v$.form.phone.$error }]"
                                        :disabled="isLoading" @input="v$.form.phone.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.phone.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- PIN Code -->
                                <div class="col-md-6">
                                    <label for="pinCode" class="form-label">PIN Code</label>
                                    <input type="text" id="pinCode" v-model="form.pin_code"
                                        :class="['form-control', { 'is-invalid': v$.form.pin_code.$error }]"
                                        :disabled="isLoading" @input="v$.form.pin_code.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.pin_code.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Address -->
                                <div class="col-12">
                                    <label for="address" class="form-label">Address</label>
                                    <textarea id="address" v-model="form.address"
                                        :class="['form-control', { 'is-invalid': v$.form.address.$error }]"
                                        :disabled="isLoading" @input="v$.form.address.$touch()" rows="3"></textarea>
                                    <div class="invalid-feedback">
                                        {{ v$.form.address.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Password -->
                                <div class="col-md-6">
                                    <label for="password" class="form-label">Password</label>
                                    <div class="input-group">
                                        <input :type="showPassword ? 'text' : 'password'" id="password"
                                            v-model="form.password"
                                            :class="['form-control', { 'is-invalid': v$.form.password.$error }]"
                                            :disabled="isLoading" @input="v$.form.password.$touch()" />
                                        <button class="btn btn-outline-secondary" type="button" @click="togglePassword">
                                            <i :class="showPassword ? 'bi bi-eye-slash' : 'bi bi-eye'"></i>
                                        </button>
                                        <div class="invalid-feedback">
                                            {{ v$.form.password.$errors[0]?.$message }}
                                        </div>
                                    </div>
                                </div>

                                <!-- Confirm Password -->
                                <div class="col-md-6">
                                    <label for="confirmPassword" class="form-label">Confirm Password</label>
                                    <input type="password" id="confirmPassword" v-model="form.confirm_password"
                                        :class="['form-control', { 'is-invalid': v$.form.confirm_password.$error }]"
                                        :disabled="isLoading" @input="v$.form.confirm_password.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.confirm_password.$errors[0]?.$message }}
                                    </div>
                                </div>
                                <!-- Submit Button -->
                                <div class="col-12">
                                    <div class="d-grid gap-2">
                                        <button type="submit" class="btn btn-primary" :disabled="isLoading">
                                            <span v-if="isLoading" class="spinner-border spinner-border-sm me-1"></span>
                                            {{ isLoading ? 'Creating Account...' : 'Create Account' }}
                                        </button>
                                    </div>
                                </div>

                                <!-- Login Link -->
                                <div class="col-12 text-center">
                                    <p class="mb-0">
                                        Already have an account?
                                        <router-link to="/login">Sign in</router-link>
                                    </p>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <FormNavigationGuard v-if="shouldShowNavigationGuard" :is-dirty="isFormDirty"
            @proceed="handleNavigationConfirm" />
    </div>
    <ConfirmDialog id="navigationConfirmDialog" title="Unsaved Changes"
        message="You have unsaved changes. Are you sure you want to leave?" type="warning" confirm-text="Leave"
        cancel-text="Stay" @confirm="handleNavigationConfirm" />
</template>
<script>
import { ref, reactive, computed } from 'vue'
import { useStore } from 'vuex'
import { useRouter } from 'vue-router'
import { useVuelidate } from '@vuelidate/core'
import { required, email, minLength, helpers } from '@vuelidate/validators'
import ConfirmDialog from '@/components/shared/ConfirmDialog.vue'
import { useFormNavigation } from '@/mixins/formNavigation'

export default {
    name: 'CustomerRegisterForm',
    components: {
        ConfirmDialog
    },
    setup() {
        const store = useStore()
        const router = useRouter()
        const isLoading = ref(false)
        const error = ref('')
        const showPassword = ref(false)
        const isRegistered = ref(false)

        const initialForm = {
            username: '',
            email: '',
            full_name: '',
            phone: '',
            pin_code: '',
            address: '',
            password: '',
            confirm_password: ''
        }

        const form = reactive({ ...initialForm })

        const isFormDirty = computed(() => {
            return Object.keys(form).some(key => form[key] !== initialForm[key])
        })

        const shouldShowNavigationGuard = computed(() => {
            return isFormDirty.value && !isRegistered.value
        })

        const resetForm = () => {
            Object.keys(form).forEach(key => {
                form[key] = initialForm[key]
            })
        }

        // Use the form navigation mixin
        const handleNavigationConfirm = () => {
            resetForm()
            hideModal()
            // Let the router continue with navigation
            router.push(router.currentRoute.value.query.redirect || '/login')
        }

        const hideModal = () => {
            if (!modalInstance.value) {
                modalInstance.value = Modal.getInstance(document.getElementById('navigationConfirmDialog'))
            }
            if (modalInstance.value) {
                modalInstance.value.hide()
                // Clean up backdrop
                const backdrop = document.querySelector('.modal-backdrop')
                if (backdrop) {
                    backdrop.remove()
                }
                document.body.classList.remove('modal-open')
                document.body.style.removeProperty('padding-right')
            }
        }

        const rules = {
            form: {
                username: {
                    required,
                    minLength: minLength(4),
                    alphaNum: helpers.regex(/^[a-zA-Z0-9_.-]+$/),
                },
                email: {
                    required,
                    email,
                },
                full_name: {
                    required,
                    minLength: minLength(4),
                    validName: helpers.regex(/^[a-zA-Z\s.-]+$/),
                },
                phone: {
                    required,
                    validPhone: helpers.regex(/^[1-9]\d{9}$/),

                },
                pin_code: {
                    required,
                    validPin: helpers.regex(/^[1-9][0-9]{5}$/),
                },
                address: {
                    required,
                    minLength: minLength(5),
                    maxLength: helpers.withMessage(
                        'Address cannot exceed 200 characters',
                        value => value.length <= 200
                    ),
                },
                password: {
                    required,
                    minLength: minLength(8),
                    hasUppercase: helpers.regex(/[A-Z]/),
                    hasLowercase: helpers.regex(/[a-z]/),
                    hasNumber: helpers.regex(/\d/),
                    hasSpecial: helpers.regex(/[!@#$%^&*(),.?":{}|<>]/),
                },
                confirm_password: {
                    required,
                    sameAsPassword: helpers.withMessage(
                        'Passwords must match',
                        value => value === form.password
                    )
                }
            }
        }

        const v$ = useVuelidate(rules, { form })

        const handleSubmit = async () => {
            error.value = ''

            const isValid = await v$.value.$validate()
            if (!isValid) return

            isLoading.value = true

            try {
                const { confirm_password, ...formData } = form
                await store.dispatch('auth/register', {
                    role: 'customer',
                    data: formData
                })

                // Set registration success flag
                isRegistered.value = true

                window.showToast({
                    type: 'success',
                    title: 'Registration Successful',
                    message: 'Your account has been created successfully. Please login to continue.'
                })

                router.push({
                    path: '/login',
                    query: { registered: 'true' }
                })
            } catch (err) {
                error.value = err.detail || 'An error occurred during registration'
            } finally {
                isLoading.value = false
            }
        }

        const togglePassword = () => {
            showPassword.value = !showPassword.value
        }

        return {
            form,
            v$,
            isLoading,
            error,
            showPassword,
            isFormDirty,
            isRegistered,
            shouldShowNavigationGuard,
            handleSubmit,
            handleNavigationConfirm,
            togglePassword
        }
    }
}
</script>

================
File: src/components/auth/LoginForm.vue
================
// frontend/src/components/auth/LoginForm.vue
<template>
  <div class="container mt-5">
    <div class="row justify-content-center">
      <div class="col-md-6 col-lg-5">
        <div class="card shadow">
          <div class="card-header bg-primary text-white text-center py-3">
            <h4 class="mb-0">Welcome Back!</h4>
          </div>
          <div class="card-body p-4">
            <form @submit.prevent="handleSubmit" novalidate>
              <!-- Alert for errors -->
              <div v-if="error" class="alert alert-danger alert-dismissible fade show" role="alert">
                {{ error }}
                <button type="button" class="btn-close" @click="error = ''"></button>
              </div>

              <!-- Username Field -->
              <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <input type="text" id="username" v-model="form.username"
                  :class="['form-control', { 'is-invalid': v$.form.username.$error }]" :disabled="isLoading"
                  @input="v$.form.username.$touch()" />
                <div class="invalid-feedback">
                  {{ v$.form.username.$errors[0]?.$message }}
                </div>
              </div>

              <!-- Password Field -->
              <div class="mb-4">
                <label for="password" class="form-label">Password</label>
                <div class="input-group">
                  <input :type="showPassword ? 'text' : 'password'" id="password" v-model="form.password"
                    :class="['form-control', { 'is-invalid': v$.form.password.$error }]" :disabled="isLoading"
                    @input="v$.form.password.$touch()" />
                  <button class="btn btn-outline-secondary" type="button" @click="togglePassword">
                    <i :class="showPassword ? 'bi bi-eye-slash' : 'bi bi-eye'"></i>
                  </button>
                  <div class="invalid-feedback">
                    {{ v$.form.password.$errors[0]?.$message }}
                  </div>
                </div>
              </div>

              <!-- Submit Button -->
              <div class="d-grid gap-2">
                <button type="submit" class="btn btn-primary" :disabled="isLoading">
                  <span v-if="isLoading" class="spinner-border spinner-border-sm me-1"></span>
                  {{ isLoading ? 'Signing in...' : 'Sign In' }}
                </button>
              </div>

              <!-- Registration Links -->
              <div class="mt-4 text-center">
                <p class="mb-2">Don't have an account? Register as:</p>
                <div class="d-flex justify-content-center gap-2">
                  <router-link to="/register/customer" class="btn btn-outline-primary btn-sm">
                    Customer
                  </router-link>
                  <router-link to="/register/professional" class="btn btn-outline-success btn-sm">
                    Professional
                  </router-link>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { ref, reactive } from 'vue'
import { useStore } from 'vuex'
import { useRouter } from 'vue-router'
import { useVuelidate } from '@vuelidate/core'
import { required, minLength } from '@vuelidate/validators'

export default {
  name: 'LoginForm',

  setup() {
    const store = useStore()
    const router = useRouter()
    const isLoading = ref(false)
    const error = ref('')
    const showPassword = ref(false)

    const form = reactive({
      username: '',
      password: ''
    })

    const rules = {
      form: {
        username: { required, minLength: minLength(4) },
        password: { required, minLength: minLength(8) }
      }
    }

    const v$ = useVuelidate(rules, { form })

    const handleSubmit = async () => {
      error.value = ''

      // Validate form
      const isValid = await v$.value.$validate()
      if (!isValid) return

      isLoading.value = true

      try {
        await store.dispatch('auth/login', form)

        window.showToast({
          type: 'success',
          title: 'Login Successful',
          message: 'You are logged in successfully.'
        })

        // Redirect based on user role
        const role = store.getters['auth/userRole']
        switch (role) {
          case 'admin':
            router.push('/admin/dashboard')
            break
          case 'professional':
            router.push('/professional/dashboard')
            break
          case 'customer':
            router.push('/customer/dashboard')
            break
          default:
            router.push('/dashboard')
        }
      } catch (err) {
        error.value = err.detail || 'An error occurred during login'
      } finally {
        isLoading.value = false
      }
    }

    const togglePassword = () => {
      showPassword.value = !showPassword.value
    }

    return {
      form,
      v$,
      isLoading,
      error,
      showPassword,
      handleSubmit,
      togglePassword
    }
  }
}
</script>

<style scoped>
.card {
  border: none;
  border-radius: 10px;
}

.card-header {
  border-radius: 10px 10px 0 0 !important;
}

.form-control:focus {
  border-color: #0d6efd;
  box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.15);
}

.btn-outline-secondary:focus {
  box-shadow: none;
}
</style>

================
File: src/components/auth/ProfessionalRegisterForm.vue
================
// frontend/src/components/auth/ProfessionalRegisterForm.vue
<template>
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-8 col-lg-6">
                <div class="card shadow">
                    <div class="card-header bg-success text-white text-center py-3">
                        <h4 class="mb-0">Professional Registration</h4>
                    </div>
                    <div class="card-body p-4">
                        <!-- Alert for errors -->
                        <div v-if="error" class="alert alert-danger alert-dismissible fade show" role="alert">
                            {{ error }}
                            <button type="button" class="btn-close" @click="error = ''"></button>
                        </div>

                        <!-- Registration Form -->
                        <form @submit.prevent="handleSubmit" class="needs-validation" novalidate>
                            <div class="row g-3">
                                <!-- Basic Information Section -->
                                <div class="col-12">
                                    <h5 class="border-bottom pb-2">Basic Information</h5>
                                </div>

                                <!-- Username -->
                                <div class="col-12">
                                    <label for="username" class="form-label">Username</label>
                                    <input type="text" id="username" v-model="form.username"
                                        :class="['form-control', { 'is-invalid': v$.form.username.$error }]"
                                        :disabled="isLoading" @input="v$.form.username.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.username.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Email -->
                                <div class="col-12">
                                    <label for="email" class="form-label">Email</label>
                                    <input type="email" id="email" v-model="form.email"
                                        :class="['form-control', { 'is-invalid': v$.form.email.$error }]"
                                        :disabled="isLoading" @input="v$.form.email.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.email.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Full Name -->
                                <div class="col-12">
                                    <label for="fullName" class="form-label">Full Name</label>
                                    <input type="text" id="fullName" v-model="form.full_name"
                                        :class="['form-control', { 'is-invalid': v$.form.full_name.$error }]"
                                        :disabled="isLoading" @input="v$.form.full_name.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.full_name.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Contact Section -->
                                <div class="col-12">
                                    <h5 class="border-bottom pb-2 mt-2">Contact Details</h5>
                                </div>

                                <!-- Phone -->
                                <div class="col-md-6">
                                    <label for="phone" class="form-label">Phone Number</label>
                                    <input type="tel" id="phone" v-model="form.phone"
                                        :class="['form-control', { 'is-invalid': v$.form.phone.$error }]"
                                        :disabled="isLoading" @input="v$.form.phone.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.phone.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- PIN Code -->
                                <div class="col-md-6">
                                    <label for="pinCode" class="form-label">PIN Code</label>
                                    <input type="text" id="pinCode" v-model="form.pin_code"
                                        :class="['form-control', { 'is-invalid': v$.form.pin_code.$error }]"
                                        :disabled="isLoading" @input="v$.form.pin_code.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.pin_code.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Address -->
                                <div class="col-12">
                                    <label for="address" class="form-label">Address</label>
                                    <textarea id="address" v-model="form.address"
                                        :class="['form-control', { 'is-invalid': v$.form.address.$error }]"
                                        :disabled="isLoading" @input="v$.form.address.$touch()" rows="3"></textarea>
                                    <div class="invalid-feedback">
                                        {{ v$.form.address.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Professional Details Section -->
                                <div class="col-12">
                                    <h5 class="border-bottom pb-2 mt-2">Professional Details</h5>
                                </div>

                                <!-- Service Type -->
                                <div class="col-md-6">
                                    <label for="serviceType" class="form-label">Service Type</label>
                                    <select id="serviceType" v-model="form.service_type_id"
                                        :class="['form-select', { 'is-invalid': v$.form.service_type_id.$error }]"
                                        :disabled="isLoading" @change="v$.form.service_type_id.$touch()">
                                        <option value="">Select a service</option>
                                        <option v-for="service in services" :key="service.id" :value="service.id">
                                            {{ service.name }}
                                        </option>
                                    </select>
                                    <div class="invalid-feedback">
                                        {{ v$.form.service_type_id.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Experience Years -->
                                <div class="col-md-6">
                                    <label for="experience" class="form-label">Years of Experience</label>
                                    <input type="number" id="experience" v-model="form.experience_years"
                                        :class="['form-control', { 'is-invalid': v$.form.experience_years.$error }]"
                                        :disabled="isLoading" min="0" max="50"
                                        @input="v$.form.experience_years.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.experience_years.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Description -->
                                <div class="col-12">
                                    <label for="description" class="form-label">Professional Description</label>
                                    <textarea id="description" v-model="form.description"
                                        :class="['form-control', { 'is-invalid': v$.form.description.$error }]"
                                        :disabled="isLoading" @input="v$.form.description.$touch()" rows="4"
                                        placeholder="Describe your experience, skills, and expertise..."></textarea>
                                    <div class="invalid-feedback">
                                        {{ v$.form.description.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Verification Document -->
                                <div class="col-12">
                                    <label for="verificationDoc" class="form-label">
                                        Verification Documents
                                        <small class="text-muted">(PDF, JPG, PNG - Max 5MB)</small>
                                    </label>
                                    <input type="file" id="verificationDoc"
                                        :class="['form-control', { 'is-invalid': v$.form.verification_document.$error }]"
                                        :disabled="isLoading" @change="handleFileChange"
                                        accept=".pdf,.jpg,.jpeg,.png" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.verification_document.$errors[0]?.$message }}
                                    </div>
                                    <small class="form-text text-muted">
                                        Please upload identification and relevant certification documents.
                                    </small>
                                </div>

                                <!-- Password Section -->
                                <div class="col-12">
                                    <h5 class="border-bottom pb-2 mt-2">Security</h5>
                                </div>

                                <!-- Password -->
                                <div class="col-md-6">
                                    <label for="password" class="form-label">Password</label>
                                    <div class="input-group">
                                        <input :type="showPassword ? 'text' : 'password'" id="password"
                                            v-model="form.password"
                                            :class="['form-control', { 'is-invalid': v$.form.password.$error }]"
                                            :disabled="isLoading" @input="v$.form.password.$touch()" />
                                        <button class="btn btn-outline-secondary" type="button" @click="togglePassword">
                                            <i :class="showPassword ? 'bi bi-eye-slash' : 'bi bi-eye'"></i>
                                        </button>
                                        <div class="invalid-feedback">
                                            {{ v$.form.password.$errors[0]?.$message }}
                                        </div>
                                    </div>
                                </div>

                                <!-- Confirm Password -->
                                <div class="col-md-6">
                                    <label for="confirmPassword" class="form-label">Confirm Password</label>
                                    <input type="password" id="confirmPassword" v-model="form.confirm_password"
                                        :class="['form-control', { 'is-invalid': v$.form.confirm_password.$error }]"
                                        :disabled="isLoading" @input="v$.form.confirm_password.$touch()" />
                                    <div class="invalid-feedback">
                                        {{ v$.form.confirm_password.$errors[0]?.$message }}
                                    </div>
                                </div>

                                <!-- Submit Button -->
                                <div class="col-12">
                                    <div class="d-grid gap-2">
                                        <button type="submit" class="btn btn-success" :disabled="isLoading">
                                            <span v-if="isLoading" class="spinner-border spinner-border-sm me-1"></span>
                                            {{ isLoading ? 'Creating Account...' : 'Create Professional Account' }}
                                        </button>
                                    </div>
                                </div>

                                <!-- Login Link -->
                                <div class="col-12 text-center">
                                    <p class="mb-0">
                                        Already have an account?
                                        <router-link to="/login">Sign in</router-link>
                                    </p>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <FormNavigationGuard v-if="shouldShowNavigationGuard" :is-dirty="isFormDirty"
            @proceed="handleNavigationConfirm" />
    </div>
    <ConfirmDialog id="navigationConfirmDialog" title="Unsaved Changes"
        message="You have unsaved changes. Are you sure you want to leave?" type="warning" confirm-text="Leave"
        cancel-text="Stay" @confirm="handleNavigationConfirm" />
</template>

<script>
import { ref, reactive, computed, onMounted } from 'vue'
import { useStore } from 'vuex'
import { useRouter } from 'vue-router'
import { useVuelidate } from '@vuelidate/core'
import { required, email, minLength, helpers, between, numeric } from '@vuelidate/validators'
import ConfirmDialog from '@/components/shared/ConfirmDialog.vue'
import FormNavigationGuard from '@/components/shared/FormNavigationGuard.vue'
import { Modal } from 'bootstrap'
import axios from 'axios'

export default {
    name: 'ProfessionalRegisterForm',
    components: {
        ConfirmDialog,
        FormNavigationGuard
    },

    setup() {
        const store = useStore()
        const router = useRouter()
        const isLoading = ref(false)
        const error = ref('')
        const showPassword = ref(false)
        const services = ref([])
        const isRegistered = ref(false)
        const modalInstance = ref(null)

        const initialForm = {
            username: '',
            email: '',
            full_name: '',
            phone: '',
            pin_code: '',
            address: '',
            service_type_id: '',
            experience_years: '',
            description: '',
            verification_document: null,
            password: '',
            confirm_password: ''
        }

        const form = reactive({ ...initialForm })

        // Computed properties
        const isFormDirty = computed(() => {
            return Object.keys(form).some(key => {
                if (key === 'verification_document') {
                    return form[key] !== null
                }
                return form[key] !== initialForm[key]
            })
        })

        // Only show navigation guard when form is dirty and not registered
        const shouldShowNavigationGuard = computed(() => {
            return isFormDirty.value && !isRegistered.value
        })

        // Form handling methods
        const resetForm = () => {
            Object.keys(form).forEach(key => {
                form[key] = initialForm[key]
            })
        }

        const hideModal = () => {
            if (!modalInstance.value) {
                modalInstance.value = Modal.getInstance(document.getElementById('navigationConfirmDialog'))
            }
            if (modalInstance.value) {
                modalInstance.value.hide()
                // Clean up backdrop
                const backdrop = document.querySelector('.modal-backdrop')
                if (backdrop) {
                    backdrop.remove()
                }
                document.body.classList.remove('modal-open')
                document.body.style.removeProperty('padding-right')
            }
        }

        const handleNavigationConfirm = () => {
            resetForm()
            hideModal()
            // Let the router continue with navigation
            router.push(router.currentRoute.value.query.redirect || '/login')
        }

        const rules = {
            form: {
                username: {
                    required,
                    minLength: minLength(4),
                    alphaNum: helpers.regex(/^[a-zA-Z0-9_.-]+$/),
                },
                email: {
                    required,
                    email,
                },
                full_name: {
                    required,
                    minLength: minLength(4),
                    validName: helpers.regex(/^[a-zA-Z\s.-]+$/),
                },
                phone: {
                    required,
                    validPhone: helpers.regex(/^[1-9]\d{9}$/),
                },
                pin_code: {
                    required,
                    validPin: helpers.regex(/^[1-9][0-9]{5}$/),
                },
                address: {
                    required,
                    minLength: minLength(5),
                    maxLength: helpers.withMessage(
                        'Address cannot exceed 200 characters',
                        value => value.length <= 200
                    ),
                },
                service_type_id: {
                    required: helpers.withMessage('Please select a service type', required),
                },
                experience_years: {
                    required,
                    numeric,
                    between: between(0, 50),
                },
                description: {
                    required,
                    minLength: helpers.withMessage(
                        'Description must be at least 10 characters long',
                        minLength(10)
                    ),
                    maxLength: helpers.withMessage(
                        'Description cannot exceed 1000 characters',
                        value => value.length <= 1000
                    ),
                },
                verification_document: {
                    required: helpers.withMessage('Please upload verification documents', required),
                },
                password: {
                    required,
                    minLength: minLength(8),
                    hasUppercase: helpers.regex(/[A-Z]/),
                    hasLowercase: helpers.regex(/[a-z]/),
                    hasNumber: helpers.regex(/\d/),
                    hasSpecial: helpers.regex(/[!@#$%^&*(),.?":{}|<>]/),
                },
                confirm_password: {
                    required,
                    sameAsPassword: helpers.withMessage(
                        'Passwords must match',
                        value => value === form.password
                    )
                }
            }
        }

        const v$ = useVuelidate(rules, { form })

        // File handling
        const handleFileChange = (event) => {
            const file = event.target.files[0]
            if (file) {
                const validTypes = ['image/jpeg', 'image/png', 'application/pdf']
                if (!validTypes.includes(file.type)) {
                    error.value = 'Invalid file type. Please upload PDF, JPG, or PNG files only.'
                    event.target.value = ''
                    return
                }

                if (file.size > 5 * 1024 * 1024) {
                    error.value = 'File size too large. Maximum size is 5MB.'
                    event.target.value = ''
                    return
                }

                form.verification_document = file
            }
        }

        // Form submission
        const handleSubmit = async () => {
            error.value = ''

            const isValid = await v$.value.$validate()
            if (!isValid) return

            isLoading.value = true

            try {
                const formData = new FormData()
                Object.keys(form).forEach(key => {
                    if (key !== 'confirm_password') {
                        formData.append(key, form[key])
                    }
                })

                await store.dispatch('auth/register', {
                    role: 'professional',
                    data: formData
                })

                // Set registration success flag before navigation
                isRegistered.value = true

                window.showToast({
                    type: 'success',
                    title: 'Registration Successful',
                    message: 'Your professional account has been created. Please wait for verification.'
                })

                // Navigate after successful registration
                router.push({
                    path: '/login',
                    query: { registered: 'true', type: 'professional' }
                })
            } catch (err) {
                error.value = err.response?.data?.detail || 'An error occurred during registration'
            } finally {
                isLoading.value = false
            }
        }
        onMounted(async () => {
            try {
                const response = await axios.get('/api/services')
                services.value = response.data.data
            } catch (err) {
                console.log(err)
                error.value = 'Failed to load available services'
            }
        })

        const togglePassword = () => {
            showPassword.value = !showPassword.value
        }

        return {
            form,
            v$,
            isLoading,
            error,
            showPassword,
            services,
            isFormDirty,
            isRegistered,
            shouldShowNavigationGuard,
            handleSubmit,
            handleFileChange,
            handleNavigationConfirm,
            togglePassword
        }
    }
}
</script>

<style scoped>
.card {
    border: none;
    border-radius: 10px;
}

.card-header {
    border-radius: 10px 10px 0 0 !important;
}

.form-control:focus {
    border-color: #198754;
    box-shadow: 0 0 0 0.25rem rgba(25, 135, 84, 0.15);
}

.btn-outline-secondary:focus {
    box-shadow: none;
}

h5 {
    color: #198754;
    font-size: 1.1rem;
    margin-top: 0.5rem;
}

.form-text {
    font-size: 0.875rem;
}
</style>

================
File: src/components/layout/NotificationsList.vue
================
<!-- src/components/layout/NotificationsList.vue -->
<template>
    <div class="notifications-list">
        <div v-if="loading" class="text-center py-4">
            <div class="spinner-border text-primary">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>

        <div v-else-if="notifications.length === 0" class="text-center py-4">
            <i class="bi bi-bell-slash fs-1 text-muted"></i>
            <p class="mt-2 text-muted mb-0">No notifications yet</p>
        </div>

        <div v-else class="list-group list-group-flush">
            <a v-for="notification in notifications" :key="notification.id" href="#"
                class="list-group-item list-group-item-action" :class="{ 'unread': !notification.read }"
                @click.prevent="handleNotificationClick(notification)">
                <div class="d-flex align-items-center">
                    <div :class="['notification-icon', notification.type]">
                        <i :class="getNotificationIcon(notification.type)"></i>
                    </div>
                    <div class="ms-3 flex-grow-1">
                        <div class="d-flex justify-content-between align-items-center mb-1">
                            <strong class="notification-title">{{ notification.title }}</strong>
                            <small class="text-muted">{{ formatTime(notification.created_at) }}</small>
                        </div>
                        <p class="notification-message mb-0">{{ notification.message }}</p>
                    </div>
                </div>
            </a>
        </div>

        <div v-if="hasMore" class="text-center py-3">
            <button class="btn btn-link btn-sm" @click="loadMore" :disabled="loadingMore">
                <span v-if="loadingMore" class="spinner-border spinner-border-sm me-1"></span>
                Load More
            </button>
        </div>
    </div>
</template>

<script>
import { ref } from 'vue';
import { useRouter } from 'vue-router';
import moment from 'moment';

export default {
    name: 'NotificationsList',

    setup() {
        const router = useRouter();
        const notifications = ref([]);
        const loading = ref(true);
        const loadingMore = ref(false);
        const hasMore = ref(false);
        const page = ref(1);

        const getNotificationIcon = (type) => {
            const icons = {
                'request': 'bi-clipboard-check',
                'review': 'bi-star',
                'service': 'bi-tools',
                'account': 'bi-person',
                'system': 'bi-gear',
                'default': 'bi-bell'
            };
            return icons[type] || icons.default;
        };

        const loadNotifications = async (isLoadMore = false) => {
            if (isLoadMore) {
                loadingMore.value = true;
            } else {
                loading.value = true;
            }

            try {
                const response = await fetch(`/api/notifications?page=${page.value}`);
                const data = await response.json();

                if (isLoadMore) {
                    notifications.value.push(...data.items);
                } else {
                    notifications.value = data.items;
                }

                hasMore.value = data.has_more;
                page.value++;
            } catch (error) {
                console.error('Error loading notifications:', error);
            } finally {
                loading.value = false;
                loadingMore.value = false;
            }
        };

        const handleNotificationClick = async (notification) => {
            try {
                if (!notification.read) {
                    await fetch(`/api/notifications/${notification.id}/read`, {
                        method: 'POST'
                    });
                }

                // Navigate based on notification type
                if (notification.link) {
                    router.push(notification.link);
                }
            } catch (error) {
                console.error('Error marking notification as read:', error);
            }
        };

        const formatTime = (date) => {
            return moment(date).fromNow();
        };

        const loadMore = () => {
            loadNotifications(true);
        };

        // Load initial notifications
        loadNotifications();

        return {
            notifications,
            loading,
            loadingMore,
            hasMore,
            getNotificationIcon,
            handleNotificationClick,
            formatTime,
            loadMore
        };
    }
};
</script>

<style scoped>
.notifications-list {
    max-height: calc(100vh - 150px);
    overflow-y: auto;
}

.notification-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.25rem;
}

.notification-icon.request {
    background-color: rgba(13, 110, 253, 0.1);
    color: #0d6efd;
}

.notification-icon.review {
    background-color: rgba(255, 193, 7, 0.1);
    color: #ffc107;
}

.notification-icon.service {
    background-color: rgba(25, 135, 84, 0.1);
    color: #198754;
}

.notification-icon.account {
    background-color: rgba(13, 202, 240, 0.1);
    color: #0dcaf0;
}

.notification-icon.system {
    background-color: rgba(108, 117, 125, 0.1);
    color: #6c757d;
}

.list-group-item.unread {
    background-color: rgba(13, 110, 253, 0.05);
}

.list-group-item:hover {
    background-color: rgba(0, 0, 0, 0.02);
}

.notification-title {
    font-size: 0.9375rem;
}

.notification-message {
    font-size: 0.875rem;
    color: #6c757d;
}

.btn-link {
    text-decoration: none;
}

.btn-link:hover {
    text-decoration: underline;
}
</style>

================
File: src/components/layout/TheNavbar.vue
================
# src/components/layout/TheNavbar.vue
<template>

    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <!-- Brand -->
            <router-link class="navbar-brand d-flex align-items-center" to="/">
                <i class="bi bi-tools me-2"></i>
                Household Services
            </router-link>

            <!-- Mobile Toggle -->
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#mainNav">
                <span class="navbar-toggler-icon"></span>
            </button>

            <!-- Navigation Links -->
            <div class="collapse navbar-collapse" id="mainNav">
                <!-- Authenticated Navigation -->
                <template v-if="isLoggedIn">
                    <!-- Admin Links -->
                    <ul v-if="isAdmin" class="navbar-nav me-auto">
                        <li class="nav-item">
                            <router-link class="nav-link" to="/admin/dashboard">
                                <i class="bi bi-speedometer2 me-1"></i>
                                Dashboard
                            </router-link>
                        </li>
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                                <i class="bi bi-gear me-1"></i>
                                Management
                            </a>
                            <ul class="dropdown-menu">
                                <li>
                                    <router-link class="dropdown-item" to="/admin/services">
                                        <i class="bi bi-tools me-2"></i>
                                        Services
                                    </router-link>
                                </li>
                                <li>
                                    <router-link class="dropdown-item" to="/admin/professionals">
                                        <i class="bi bi-person-badge me-2"></i>
                                        Professionals
                                    </router-link>
                                </li>
                                <li>
                                    <router-link class="dropdown-item" to="/admin/customers">
                                        <i class="bi bi-people me-2"></i>
                                        Customers
                                    </router-link>
                                </li>
                                <li>
                                    <hr class="dropdown-divider">
                                </li>
                                <li>
                                    <router-link class="dropdown-item" to="/admin/reports">
                                        <i class="bi bi-file-earmark-text me-2"></i>
                                        Reports
                                    </router-link>
                                </li>
                            </ul>
                        </li>
                        <li class="nav-item">
                            <router-link class="nav-link" to="/admin/requests">
                                <i class="bi bi-list-check me-1"></i>
                                Requests
                            </router-link>
                        </li>
                    </ul>

                    <!-- Professional Links -->
                    <ul v-else-if="isProfessional" class="navbar-nav me-auto">
                        <li class="nav-item">
                            <router-link class="nav-link" to="/professional/dashboard">
                                <i class="bi bi-speedometer2 me-1"></i>
                                Dashboard
                            </router-link>
                        </li>
                        <li class="nav-item">
                            <router-link class="nav-link" to="/professional/requests">
                                <i class="bi bi-list-check me-1"></i>
                                Service Requests
                            </router-link>
                        </li>
                        <li class="nav-item">
                            <router-link class="nav-link" to="/professional/schedule">
                                <i class="bi bi-calendar3 me-1"></i>
                                Schedule
                            </router-link>
                        </li>
                        <li class="nav-item">
                            <router-link class="nav-link" to="/professional/reviews">
                                <i class="bi bi-star me-1"></i>
                                Reviews
                            </router-link>
                        </li>
                    </ul>

                    <!-- Customer Links -->
                    <ul v-else-if="isCustomer" class="navbar-nav me-auto">
                        <li class="nav-item">
                            <router-link class="nav-link" to="/customer/dashboard">
                                <i class="bi bi-speedometer2 me-1"></i>
                                Dashboard
                            </router-link>
                        </li>
                        <li class="nav-item">
                            <router-link class="nav-link" to="/customer/services">
                                <i class="bi bi-tools me-1"></i>
                                Services
                            </router-link>
                        </li>
                        <li class="nav-item">
                            <router-link class="nav-link" to="/customer/requests">
                                <i class="bi bi-list-check me-1"></i>
                                My Requests
                            </router-link>
                        </li>
                    </ul>

                    <!-- Right Side Navigation (Authenticated) -->
                    <ul class="navbar-nav ms-auto">
                        <!-- Notifications -->
                        <li class="nav-item">
                            <a class="nav-link position-relative" href="#" @click.prevent="toggleNotifications">
                                <i class="bi bi-bell"></i>
                                <span v-if="unreadNotifications"
                                    class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                                    {{ unreadNotifications }}
                                </span>
                            </a>
                        </li>

                        <!-- User Menu Dropdown -->
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" role="button"
                                data-bs-toggle="dropdown">
                                <div class="avatar bg-light text-primary rounded-circle d-flex align-items-center justify-content-center me-2"
                                    style="width: 32px; height: 32px;">
                                    <i class="bi bi-person-fill"></i>
                                </div>
                                {{ userName }}
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li class="dropdown-header">
                                    <div class="text-muted small">Signed in as</div>
                                    <div class="fw-medium">{{ userEmail }}</div>
                                </li>
                                <li>
                                    <hr class="dropdown-divider">
                                </li>
                                <li>
                                    <router-link class="dropdown-item" :to="profileRoute">
                                        <i class="bi bi-person-circle me-2"></i>
                                        Profile
                                    </router-link>
                                </li>
                                <li>
                                    <router-link class="dropdown-item" to="/settings">
                                        <i class="bi bi-gear me-2"></i>
                                        Settings
                                    </router-link>
                                </li>
                                <li>
                                    <hr class="dropdown-divider">
                                </li>
                                <li>
                                    <a class="dropdown-item text-danger" href="#" @click.prevent="handleLogout">
                                        <i class="bi bi-box-arrow-right me-2"></i>
                                        Sign Out
                                    </a>
                                </li>
                            </ul>
                        </li>
                    </ul>
                </template>

                <!-- Unauthenticated Navigation -->
                <template v-else>
                    <ul class="navbar-nav me-auto">
                        <li class="nav-item">
                            <router-link class="nav-link" to="/services">
                                <i class="bi bi-tools me-1"></i>
                                Our Services
                            </router-link>
                        </li>
                        <li class="nav-item">
                            <router-link class="nav-link" to="/about">
                                <i class="bi bi-info-circle me-1"></i>
                                About Us
                            </router-link>
                        </li>
                        <li class="nav-item">
                            <router-link class="nav-link" to="/contact">
                                <i class="bi bi-envelope me-1"></i>
                                Contact
                            </router-link>
                        </li>
                    </ul>

                    <!-- Right Side Navigation (Unauthenticated) -->
                    <ul class="navbar-nav ms-auto">
                        <li class="nav-item">
                            <router-link class="nav-link" to="/login">
                                <i class="bi bi-box-arrow-in-right me-1"></i>
                                Sign In
                            </router-link>
                        </li>
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                                <i class="bi bi-person-plus me-1"></i>
                                Register
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li>
                                    <router-link class="dropdown-item" to="/register/customer">
                                        <i class="bi bi-person me-2"></i>
                                        As Customer
                                    </router-link>
                                </li>
                                <li>
                                    <router-link class="dropdown-item" to="/register/professional">
                                        <i class="bi bi-person-badge me-2"></i>
                                        As Professional
                                    </router-link>
                                </li>
                            </ul>
                        </li>
                    </ul>
                </template>
            </div>
        </div>
    </nav>
</template>
# src/components/layout/TheNavbar.vue
<script>
import { ref, computed, onMounted } from 'vue'
import { useStore } from 'vuex'
import { useRouter } from 'vue-router'
import { Modal } from 'bootstrap'

export default {
    name: 'TheNavbar',

    setup() {
        const store = useStore()
        const router = useRouter()
        const notificationsCanvas = ref(null)
        const unreadNotifications = ref(0)

        // Computed properties for auth state
        const isLoggedIn = computed(() => store.getters['auth/isLoggedIn'])
        const userName = computed(() => store.getters['auth/userName'])
        const userEmail = computed(() => store.getters['auth/userEmail'])
        const userRole = computed(() => store.getters['auth/userRole'])

        // Role-based computed properties
        const isAdmin = computed(() => userRole.value === 'admin')
        const isProfessional = computed(() => userRole.value === 'professional')
        const isCustomer = computed(() => userRole.value === 'customer')

        // Dynamic profile route based on user role
        const profileRoute = computed(() => {
            switch (userRole.value) {
                case 'admin':
                    return '/admin/profile'
                case 'professional':
                    return '/professional/profile'
                case 'customer':
                    return '/customer/profile'
                default:
                    return '/profile'
            }
        })

        // Handle logout
        const handleLogout = async () => {
            try {
                await store.dispatch('auth/logout')
                router.push('/login')
            } catch (error) {
                console.error('Logout error:', error)
            }
        }

        // Toggle notifications
        const toggleNotifications = () => {
            if (!notificationsCanvas.value) {
                notificationsCanvas.value = new Modal(document.getElementById('notificationsCanvas'))
            }
            notificationsCanvas.value.show()
        }


        return {
            isLoggedIn,
            userName,
            userEmail,
            userRole,
            isAdmin,
            isProfessional,
            isCustomer,
            profileRoute,
            unreadNotifications,
            handleLogout,
            toggleNotifications,
        }
    }
}
</script>

<style scoped>
.navbar {
    box-shadow: 0 2px 4px rgba(0, 0, 0, .1);
}

.navbar-brand {
    font-weight: 600;
}

.nav-link {
    padding: 0.5rem 1rem;
}

.dropdown-item {
    padding: 0.5rem 1rem;
}

.dropdown-item i {
    width: 1.25rem;
}

.avatar {
    font-size: 1.25rem;
}

/* Active link styling */
.nav-link.router-link-active {
    color: #fff !important;
    font-weight: 500;
}

.dropdown-item.router-link-active {
    color: #0d6efd;
    background-color: rgba(13, 110, 253, 0.1);
}

/* Mobile optimization */
@media (max-width: 992px) {
    .navbar-collapse {
        background-color: #0d6efd;
        padding: 1rem;
        border-radius: 0.5rem;
        margin-top: 0.5rem;
    }

    .dropdown-menu {
        background-color: rgba(0, 0, 0, 0.1);
        border: none;
    }

    .dropdown-item {
        color: rgba(255, 255, 255, 0.8);
    }

    .dropdown-item:hover {
        background-color: rgba(255, 255, 255, 0.1);
        color: #fff;
    }

    .dropdown-divider {
        border-color: rgba(255, 255, 255, 0.1);
    }
}
</style>

================
File: src/components/shared/ConfirmDialog.vue
================
// src/components/shared/ConfirmDialog.vue
<template>
    <div class="modal fade" :id="id" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog" :class="{ 'modal-sm': size === 'sm', 'modal-lg': size === 'lg' }">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">{{ title }}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <slot name="body">
                        {{ message }}
                    </slot>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        {{ cancelText }}
                    </button>
                    <button type="button" :class="['btn', `btn-${type}`]" @click="handleConfirm">
                        <span v-if="loading" class="spinner-border spinner-border-sm me-2"></span>
                        {{ confirmText }}
                    </button>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref, onUnmounted } from 'vue'
import { Modal } from 'bootstrap'

export default {
    name: 'ConfirmDialog',
    props: {
        id: {
            type: String,
            required: true
        },
        title: {
            type: String,
            default: 'Confirm Action'
        },
        message: {
            type: String,
            default: 'Are you sure you want to proceed?'
        },
        type: {
            type: String,
            default: 'primary',
            validator: value => ['primary', 'danger', 'warning', 'success'].includes(value)
        },
        confirmText: {
            type: String,
            default: 'Confirm'
        },
        cancelText: {
            type: String,
            default: 'Cancel'
        },
        size: {
            type: String,
            default: 'md',
            validator: value => ['sm', 'md', 'lg'].includes(value)
        }
    },

    emits: ['confirm', 'hidden.bs.modal'],

    setup(props, { emit }) {
        const loading = ref(false)
        let modalInstance = null

        const handleConfirm = async () => {
            try {
                loading.value = true
                await emit('confirm')
            } finally {
                loading.value = false
                hideModal()
            }
        }

        const hideModal = () => {
            if (!modalInstance) {
                modalInstance = Modal.getInstance(document.getElementById(props.id))
            }
            if (modalInstance) {
                modalInstance.hide()
            }
        }

        // Clean up when component is unmounted
        onUnmounted(() => {
            const backdrop = document.querySelector('.modal-backdrop')
            if (backdrop) {
                backdrop.remove()
            }
            document.body.classList.remove('modal-open')
            document.body.style.removeProperty('padding-right')
        })

        return {
            loading,
            handleConfirm
        }
    }
}
</script>

================
File: src/components/shared/FormNavigationGuard.vue
================
# src/components/shared/FormNavigationGuard.vue
<template>
    <ConfirmDialog id="navigationConfirmDialog" title="Unsaved Changes"
        message="You have unsaved changes. Are you sure you want to leave?" type="warning" confirm-text="Leave"
        cancel-text="Stay" @confirm="handleConfirm" />
</template>

<script>
import { ref, watch, onBeforeMount, onBeforeUnmount } from 'vue'
import { useRouter } from 'vue-router'
import { Modal } from 'bootstrap'
import ConfirmDialog from './ConfirmDialog.vue'

export default {
    name: 'FormNavigationGuard',
    components: {
        ConfirmDialog
    },

    props: {
        isDirty: {
            type: Boolean,
            required: true
        },
        confirmMessage: {
            type: String,
            default: 'You have unsaved changes. Are you sure you want to leave?'
        }
    },

    emits: ['proceed', 'cancel'],

    setup(props, { emit }) {
        const router = useRouter()
        const modal = ref(null)
        let nextRoute = null
        let unregisterGuard = null

        const showConfirmDialog = () => {
            if (!modal.value) {
                modal.value = new Modal(document.getElementById('navigationConfirmDialog'))
            }
            modal.value.show()
        }

        const handleConfirm = () => {
            emit('proceed')
            if (nextRoute) {
                router.push(nextRoute)
            }
        }

        // Router navigation guard
        const navigationGuard = (to, from, next) => {
            if (props.isDirty) {
                nextRoute = to
                showConfirmDialog()
                next(false)
            } else {
                next()
            }
        }

        // Window beforeunload handler
        const beforeUnloadHandler = (e) => {
            if (props.isDirty) {
                e.preventDefault()
                e.returnValue = ''
            }
        }

        // Setup guards when component mounts
        onBeforeMount(() => {
            unregisterGuard = router.beforeEach(navigationGuard)
            window.addEventListener('beforeunload', beforeUnloadHandler)
        })

        // Cleanup when component unmounts
        onBeforeUnmount(() => {
            if (unregisterGuard) unregisterGuard()
            window.removeEventListener('beforeunload', beforeUnloadHandler)
        })

        // Watch for changes in isDirty prop
        watch(() => props.isDirty, (newValue) => {
            if (!newValue && modal.value) {
                const modalInstance = Modal.getInstance(document.getElementById('navigationConfirmDialog'))
                if (modalInstance) modalInstance.hide()
            }
        })

        return {
            handleConfirm
        }
    }
}
</script>

================
File: src/components/shared/Loading.vue
================
# src/components/shared/Loading.vue
<template>
    <div class="loading-container" :class="{ overlay: overlay, full: fullscreen }">
        <div class="loading-content">
            <div class="spinner-border text-primary" :class="spinnerSize" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p v-if="message" class="mt-2 mb-0 text-muted">{{ message }}</p>
        </div>
    </div>
</template>

<script>
export default {
    name: 'Loading',
    props: {
        message: {
            type: String,
            default: ''
        },
        overlay: {
            type: Boolean,
            default: false
        },
        fullscreen: {
            type: Boolean,
            default: false
        },
        size: {
            type: String,
            default: 'md',
            validator: value => ['sm', 'md', 'lg'].includes(value)
        }
    },
    computed: {
        spinnerSize() {
            return {
                'spinner-border-sm': this.size === 'sm',
                '': this.size === 'md',
                'spinner-border-lg': this.size === 'lg'
            }
        }
    }
}
</script>

<style scoped>
.loading-container {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 200px;
}

.loading-container.overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(255, 255, 255, 0.8);
    z-index: 1000;
}

.loading-container.full {
    position: fixed;
    width: 100vw;
    height: 100vh;
}

.loading-content {
    text-align: center;
}

.spinner-border-lg {
    width: 3rem;
    height: 3rem;
}
</style>

================
File: src/components/shared/Toast.vue
================
# src/components/shared/Toast.vue
<template>
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div v-for="toast in toasts" :key="toast.id" class="toast show" :class="toastClasses(toast)" role="alert"
            aria-live="assertive" aria-atomic="true">
            <div class="toast-header" :class="headerClasses(toast)">
                <i :class="['bi', iconClass(toast.type), 'me-2']"></i>
                <strong class="me-auto">{{ toast.title }}</strong>
                <small>{{ timeAgo(toast.timestamp) }}</small>
                <button type="button" class="btn-close" @click="removeToast(toast.id)"></button>
            </div>
            <div class="toast-body" :class="{ 'text-white': toast.type }">
                {{ toast.message }}
            </div>
        </div>
    </div>
</template>

<script>
import { ref, onMounted } from 'vue'
import moment from 'moment'

export default {
    name: 'Toast',
    setup() {
        const toasts = ref([])
        let nextId = 1

        const toastClasses = (toast) => {
            if (!toast.type) return '';
            return {
                'bg-success': toast.type === 'success',
                'bg-danger': toast.type === 'danger',
                'bg-warning': toast.type === 'warning',
                'bg-info': toast.type === 'info'
            }
        }

        const headerClasses = (toast) => {
            if (!toast.type) return '';
            return {
                'text-white': ['success', 'danger'].includes(toast.type),
                'border-0': !!toast.type
            }
        }

        const iconClass = (type) => {
            switch (type) {
                case 'success': return 'bi-check-circle-fill'
                case 'danger': return 'bi-x-circle-fill'
                case 'warning': return 'bi-exclamation-triangle-fill'
                case 'info': return 'bi-info-circle-fill'
                default: return 'bi-bell-fill'
            }
        }

        const timeAgo = (timestamp) => moment(timestamp).fromNow()

        const addToast = (toast) => {
            const id = nextId++
            const newToast = {
                id,
                timestamp: new Date(),
                title: toast.title || 'Notification',
                type: toast.type,
                message: toast.message,
            }

            toasts.value.push(newToast)

            // Auto remove after duration
            setTimeout(() => {
                removeToast(id)
            }, toast.duration || 5000)
        }

        const removeToast = (id) => {
            const index = toasts.value.findIndex(t => t.id === id)
            if (index > -1) {
                toasts.value.splice(index, 1)
            }
        }

        // Expose the addToast method globally
        onMounted(() => {
            window.showToast = addToast
        })

        return {
            toasts,
            toastClasses,
            headerClasses,
            iconClass,
            timeAgo,
            removeToast
        }
    }
}
</script>

<style scoped>
.toast-container {
    z-index: 1050;
    max-width: 350px;
}

.toast {
    opacity: 1;
    margin-bottom: 0.5rem;
    box-shadow: 0 0.25rem 0.75rem rgba(0, 0, 0, 0.1);
}

.toast-header {
    padding: 0.75rem 1rem;
}

.toast-body {
    padding: 1rem;
}

/* Animations */
.toast-enter-active,
.toast-leave-active {
    transition: all 0.3s ease;
}

.toast-enter-from,
.toast-leave-to {
    transform: translateX(100%);
    opacity: 0;
}
</style>

================
File: src/composables/useProfessionalProfile.js
================
import { ref, computed } from 'vue'
import { useAsyncHandler, useFileHandling } from '@/mixins/formHandling'
import { documentValidationRules } from '@/utils/validation/profile'
import { profileService } from '@/services/profile.service'

export function useProfessionalProfile() {
    // File handling setup
    const {
        file: verificationDoc,
        fileError: docError,
        handleFileChange: handleDocChange,
        clearFile: clearDoc
    } = useFileHandling({
        maxSize: documentValidationRules.maxSize,
        allowedTypes: documentValidationRules.allowedTypes
    })

    const { handleAsync } = useAsyncHandler()

    // Check if professional has active requests
    const hasActiveRequests = ref(false)
    const checkActiveRequests = async () => {
        await handleAsync(
            async () => {
                const response = await profileService.getActiveRequests()
                hasActiveRequests.value = response.data.count > 0
            },
            {
                showError: false
            }
        )
    }

    // Update verification document
    const updateDocument = async () => {
        if (!verificationDoc.value) return

        const formData = new FormData()
        formData.append('verification_document', verificationDoc.value)

        await handleAsync(
            async () => {
                await profileService.updateDocument(formData)
                clearDoc()
            },
            {
                successMessage: 'Document uploaded successfully. Your profile will be reviewed.',
                errorMessage: 'Failed to upload document'
            }
        )
    }

    // Update service type
    const updateServiceType = async (serviceTypeId) => {
        await handleAsync(
            async () => {
                await profileService.updateServiceType(serviceTypeId)
            },
            {
                successMessage: 'Service type updated successfully. Your profile will be reviewed.',
                errorMessage: 'Failed to update service type'
            }
        )
    }

    // View document
    const viewDocument = (documentUrl) => {
        window.open(`/api/static/uploads/verification_docs/${documentUrl}`, '_blank')
    }

    return {
        verificationDoc,
        docError,
        hasActiveRequests,
        handleDocChange,
        updateDocument,
        updateServiceType,
        viewDocument,
        checkActiveRequests
    }
}

================
File: src/composables/useProfileManagement.js
================
import { ref, computed } from 'vue'
import { useStore } from 'vuex'
import { useRouter } from 'vue-router'
import { useFormHandling, useAsyncHandler, useToastHandling } from '@/mixins/formHandling'
import { profileValidationRules, passwordValidationRules } from '@/utils/validation/profile'
import { profileService } from '@/services/profile.service'

export function useProfileManagement(userId = null) {
    const store = useStore()
    const router = useRouter()
    const isOwnProfile = computed(() => !userId || userId === store.getters['auth/userId'])

    // Form handling setup
    const { form, v$, formIsDirty, submitting, resetForm, updateOriginalForm } = useFormHandling({
        // Initial form shape
        email: '',
        full_name: '',
        phone: '',
        pin_code: '',
        address: '',
        description: '',
        service_type_id: '',
        experience_years: ''
    }, profileValidationRules)

    // Password form handling
    const passwordForm = ref({
        old_password: '',
        new_password: '',
        confirm_password: ''
    })

    const { handleAsync } = useAsyncHandler()
    const { showSuccessToast, showErrorToast } = useToastHandling()

    // Fetch profile data
    const fetchProfile = async () => {
        await handleAsync(
            async () => {
                const response = await profileService.getProfile(userId)
                form.value = { ...response.data }
                updateOriginalForm()
            },
            {
                errorMessage: 'Failed to load profile'
            }
        )
    }

    // Update profile
    const updateProfile = async () => {
        const isValid = await v$.value.$validate()
        if (!isValid) return

        await handleAsync(
            async () => {
                const response = await profileService.updateProfile(form.value)
                updateOriginalForm()
                return response
            },
            {
                successMessage: 'Profile updated successfully',
                errorMessage: 'Failed to update profile'
            }
        )
    }

    // Change password
    const changePassword = async () => {
        if (passwordForm.value.new_password !== passwordForm.value.confirm_password) {
            showErrorToast('Passwords do not match')
            return
        }

        await handleAsync(
            async () => {
                await profileService.changePassword({
                    old_password: passwordForm.value.old_password,
                    new_password: passwordForm.value.new_password
                })
                passwordForm.value = {
                    old_password: '',
                    new_password: '',
                    confirm_password: ''
                }
            },
            {
                successMessage: 'Password changed successfully',
                errorMessage: 'Failed to change password'
            }
        )
    }

    // Delete account
    const deleteAccount = async (password) => {
        await handleAsync(
            async () => {
                await profileService.deleteAccount(password)
                await store.dispatch('auth/logout')
                router.push('/login')
            },
            {
                successMessage: 'Account deleted successfully',
                errorMessage: 'Failed to delete account'
            }
        )
    }

    return {
        form,
        v$,
        formIsDirty,
        submitting,
        passwordForm,
        isOwnProfile,
        fetchProfile,
        updateProfile,
        changePassword,
        deleteAccount,
        resetForm
    }
}

================
File: src/layouts/BaseLayout.vue
================
<!-- src/layouts/BaseLayout.vue -->
<template>
    <div class="layout-container">
        <TheNavbar />


        <!-- Main Content -->
        <main class="flex-grow-1">
            <router-view></router-view>
            <Toast />
        </main>

        <!-- Footer -->
        <footer class="footer mt-auto py-3 bg-light">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col-md-6 text-center text-md-start">
                        <span class="text-muted">© 2024 Household Services. All rights reserved.</span>
                    </div>
                    <div class="col-md-6">
                        <ul class="list-inline mb-0 text-center text-md-end">
                            <li class="list-inline-item">
                                <router-link class="text-muted" to="/privacy">Privacy Policy</router-link>
                            </li>
                            <li class="list-inline-item">
                                <router-link class="text-muted" to="/terms">Terms of Service</router-link>
                            </li>
                            <li class="list-inline-item">
                                <router-link class="text-muted" to="/contact">Support</router-link>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </footer>

        <!-- Notifications Offcanvas -->
        <div class="offcanvas offcanvas-end" tabindex="-1" id="notificationsCanvas">
            <div class="offcanvas-header">
                <h5 class="offcanvas-title">Notifications</h5>
                <button type="button" class="btn-close" data-bs-dismiss="offcanvas"></button>
            </div>
            <div class="offcanvas-body">
                <!-- Add notifications content here -->
            </div>
        </div>
    </div>
</template>

<script>
import { ref, computed, onMounted } from 'vue';
import { useStore } from 'vuex';
import { useRouter } from 'vue-router';
import { Offcanvas } from 'bootstrap';
import TheNavbar from '@/components/layout/TheNavbar.vue'

export default {
    name: 'BaseLayout',

    setup() {
        const store = useStore();
        const router = useRouter();
        const notificationsCanvas = ref(null);
        const unreadNotifications = ref(0);

        // Computed properties for auth state
        const isLoggedIn = computed(() => store.getters['auth/isLoggedIn']);
        const userName = computed(() => store.getters['auth/userName']);
        const userEmail = computed(() => store.getters['auth/userEmail']);
        const userRole = computed(() => store.getters['auth/userRole']);

        // Role-based computed properties
        const isAdmin = computed(() => userRole.value === 'admin');
        const isProfessional = computed(() => userRole.value === 'professional');
        const isCustomer = computed(() => userRole.value === 'customer');

        // Dynamic profile route based on user role
        const profileRoute = computed(() => {
            switch (userRole.value) {
                case 'admin':
                    return '/admin/profile';
                case 'professional':
                    return '/professional/profile';
                case 'customer':
                    return '/customer/profile';
                default:
                    return '/profile';
            }
        });

        const handleLogout = async () => {
            try {
                await store.dispatch('auth/logout');
                router.push('/login');
            } catch (error) {
                console.error('Logout error:', error);
            }
        };

        const toggleNotifications = () => {
            if (!notificationsCanvas.value) {
                notificationsCanvas.value = new Offcanvas(document.getElementById('notificationsCanvas'));
            }
            notificationsCanvas.value.show();
        };

        onMounted(() => {
            // Fetch initial notifications count
            // Add notification polling or websocket connection here
        });

        return {
            isLoggedIn,
            userName,
            userEmail,
            userRole,
            isAdmin,
            isProfessional,
            isCustomer,
            profileRoute,
            unreadNotifications,
            handleLogout,
            toggleNotifications
        };
    },
    components: {
        TheNavbar
    }
};
</script>

<style scoped>
.layout-container {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

.navbar {
    box-shadow: 0 2px 4px rgba(0, 0, 0, .1);
}

.navbar-brand {
    font-weight: 600;
}

.nav-link {
    padding: 0.5rem 1rem;
}

.dropdown-item {
    padding: 0.5rem 1rem;
}

.dropdown-item i {
    width: 1.25rem;
}

.avatar {
    font-size: 1.25rem;
}

.footer {
    background-color: #f8f9fa;
    border-top: 1px solid #dee2e6;
}

.list-inline-item:not(:last-child) {
    margin-right: 1.5rem;
}

/* Notification badge positioning */
.position-relative .badge {
    transform: translate(-50%, -50%);
}

/* Offcanvas customization */
.offcanvas {
    width: 350px;
}

@media (max-width: 576px) {
    .offcanvas {
        width: 100%;
    }

    .navbar-nav .dropdown-menu {
        position: static;
        float: none;
    }

    .footer {
        text-align: center;
    }

    .list-inline-item {
        display: block;
        margin-bottom: 0.5rem;
    }
}

/* Transitions for dropdown menus */
.dropdown-menu {
    display: block;
    opacity: 0;
    visibility: hidden;
    transform: translateY(10px);
    transition: all 0.2s ease;
}

.dropdown-menu.show {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
}

/* Active link styling */
.nav-link.router-link-active {
    color: #fff !important;
    font-weight: 500;
}

.dropdown-item.router-link-active {
    color: #0d6efd;
    background-color: rgba(13, 110, 253, 0.1);
}

/* Hover effects */
.nav-link:hover {
    color: rgba(255, 255, 255, 0.9) !important;
}

.dropdown-item:hover {
    background-color: rgba(0, 0, 0, 0.05);
}

/* Custom scrollbar for notifications */
.offcanvas-body {
    scrollbar-width: thin;
    scrollbar-color: #888 #f1f1f1;
}

.offcanvas-body::-webkit-scrollbar {
    width: 6px;
}

.offcanvas-body::-webkit-scrollbar-track {
    background: #f1f1f1;
}

.offcanvas-body::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 10px;
}

.offcanvas-body::-webkit-scrollbar-thumb:hover {
    background: #555;
}

/* Profile dropdown customization */
.navbar-nav .dropdown-menu {
    min-width: 240px;
}

.dropdown-header {
    padding: 0.5rem 1rem;
}

/* Footer link hover effect */
.footer a {
    text-decoration: none;
    transition: color 0.2s ease;
}

.footer a:hover {
    color: #0d6efd !important;
}

/* Mobile optimization */
@media (max-width: 992px) {
    .navbar-collapse {
        background-color: #0d6efd;
        padding: 1rem;
        border-radius: 0.5rem;
        margin-top: 0.5rem;
    }

    .dropdown-menu {
        background-color: rgba(0, 0, 0, 0.1);
        border: none;
    }

    .dropdown-item {
        color: rgba(255, 255, 255, 0.8);
    }

    .dropdown-item:hover {
        background-color: rgba(255, 255, 255, 0.1);
        color: #fff;
    }

    .dropdown-divider {
        border-color: rgba(255, 255, 255, 0.1);
    }
}
</style>

================
File: src/main.js
================
// src/main.js
import { createApp } from 'vue'
import App from './App.vue'
import router from './router'
import store from './store'
import axios from 'axios'

// Import Bootstrap JavaScript with Popper.js
// import 'bootstrap/dist/js/bootstrap.bundle.min.js'

import * as bootstrap from 'bootstrap'


// Import Bootstrap and Bootstrap Icons CSS
// import 'bootstrap/dist/css/bootstrap.min.css'
import 'bootstrap-icons/font/bootstrap-icons.css'
import './assets/styles.scss'


// Import global components
import Loading from '@/components/shared/Loading.vue'
import Toast from '@/components/shared/Toast.vue'
import ConfirmDialog from '@/components/shared/ConfirmDialog.vue'
import FormNavigationGuard from '@/components/shared/FormNavigationGuard.vue'

// Create Vue app instance
const app = createApp(App)

// Register global components
app.component('Loading', Loading)
app.component('Toast', Toast)
app.component('ConfirmDialog', ConfirmDialog)
app.component('FormNavigationGuard', FormNavigationGuard)

// Configure axios
axios.defaults.baseURL = import.meta.env.VITE_API_URL || 'http://localhost:8080'

// Add token if it exists
const token = localStorage.getItem('token')
if (token) {
    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`
}

// Handle 401 responses globally
axios.interceptors.response.use(
    response => response,
    error => {
        if (error.response?.status === 401) {
            store.dispatch('auth/logout')
            router.push('/login')
        }
        return Promise.reject(error)
    }
)

// Use plugins
app.use(router)
app.use(store)

// Mount the app
app.mount('#app')

// Export the app instance if needed
export default app

================
File: src/mixins/formHandling.js
================
import { ref, computed } from 'vue'
import { useVuelidate } from '@vuelidate/core'
import _ from 'lodash'

export function useFormHandling(initialForm, validationRules) {
    const form = ref(_.cloneDeep(initialForm))
    const originalForm = ref(_.cloneDeep(initialForm))
    const v$ = useVuelidate(validationRules, form)
    const submitting = ref(false)

    const formIsDirty = computed(() => {
        return !_.isEqual(form.value, originalForm.value)
    })

    const resetForm = () => {
        form.value = _.cloneDeep(originalForm.value)
        v$.value.$reset()
    }

    const updateOriginalForm = () => {
        originalForm.value = _.cloneDeep(form.value)
    }

    const setFormData = (data) => {
        form.value = _.cloneDeep(data)
        originalForm.value = _.cloneDeep(data)
    }

    return {
        form,
        originalForm,
        v$,
        submitting,
        formIsDirty,
        resetForm,
        updateOriginalForm,
        setFormData
    }
}

export function useToastHandling() {
    const showSuccessToast = (message, title = 'Success') => {
        window.showToast({
            type: 'success',
            title,
            message
        })
    }

    const showErrorToast = (message, title = 'Error') => {
        window.showToast({
            type: 'danger',
            title,
            message: message || 'An unexpected error occurred'
        })
    }

    const showWarningToast = (message, title = 'Warning') => {
        window.showToast({
            type: 'warning',
            title,
            message
        })
    }

    const showInfoToast = (message, title = 'Information') => {
        window.showToast({
            type: 'info',
            title,
            message
        })
    }

    return {
        showSuccessToast,
        showErrorToast,
        showWarningToast,
        showInfoToast
    }
}

export function useModalHandling(modalId) {
    const modal = ref(null)

    const showModal = () => {
        if (!modal.value) {
            modal.value = new bootstrap.Modal(document.getElementById(modalId))
        }
        modal.value.show()
    }

    const hideModal = () => {
        if (modal.value) {
            modal.value.hide()
        }
    }

    return {
        showModal,
        hideModal
    }
}

export function useAsyncHandler() {
    const loading = ref(false)
    const error = ref(null)

    const handleAsync = async (asyncFn, {
        successMessage,
        errorMessage = 'An error occurred',
        showSuccess = true,
        showError = true,
        onSuccess = () => { },
        onError = () => { },
        onFinally = () => { }
    } = {}) => {
        try {
            loading.value = true
            error.value = null
            const result = await asyncFn()

            if (showSuccess && successMessage) {
                window.showToast({
                    type: 'success',
                    title: 'Success',
                    message: successMessage
                })
            }

            await onSuccess(result)
            return result
        } catch (err) {
            error.value = err.response?.data?.message || errorMessage

            if (showError) {
                window.showToast({
                    type: 'danger',
                    title: 'Error',
                    message: error.value
                })
            }

            await onError(err)
            throw err
        } finally {
            loading.value = false
            await onFinally()
        }
    }

    return {
        loading,
        error,
        handleAsync
    }
}

export function useFileHandling(validations = {}) {
    const file = ref(null)
    const fileError = ref(null)
    const preview = ref(null)

    const handleFileChange = (event) => {
        const selectedFile = event.target.files[0]
        fileError.value = null

        if (!selectedFile) {
            file.value = null
            preview.value = null
            return
        }

        // Size validation
        if (validations.maxSize && selectedFile.size > validations.maxSize) {
            fileError.value = `File size must not exceed ${validations.maxSize / (1024 * 1024)}MB`
            event.target.value = ''
            return
        }

        // Type validation
        if (validations.allowedTypes && !validations.allowedTypes.includes(selectedFile.type)) {
            fileError.value = `File type must be: ${validations.allowedTypes.join(', ')}`
            event.target.value = ''
            return
        }

        file.value = selectedFile

        // Generate preview for images
        if (selectedFile.type.startsWith('image/')) {
            const reader = new FileReader()
            reader.onload = (e) => {
                preview.value = e.target.result
            }
            reader.readAsDataURL(selectedFile)
        } else {
            preview.value = null
        }
    }

    const clearFile = () => {
        file.value = null
        preview.value = null
        fileError.value = null
    }

    return {
        file,
        fileError,
        preview,
        handleFileChange,
        clearFile
    }
}

================
File: src/mixins/formNavigation.js
================
// src/mixins/formNavigation.js
import { ref } from 'vue'
import { useRouter, onBeforeRouteLeave } from 'vue-router'
import { Modal } from 'bootstrap'

export function useFormNavigation(isDirty, resetForm) {
    const router = useRouter()
    const navigationConfirmDialog = ref(null)
    let nextRoute = null

    onBeforeRouteLeave((to, from, next) => {
        if (isDirty.value) {
            nextRoute = to
            showConfirmDialog()
            next(false)
        } else {
            next()
        }
    })

    const showConfirmDialog = () => {
        if (!navigationConfirmDialog.value) {
            navigationConfirmDialog.value = new Modal(document.getElementById('navigationConfirmDialog'))
        }
        navigationConfirmDialog.value.show()
    }

    const handleNavigationConfirm = () => {
        resetForm()
        hideConfirmDialog()
        if (nextRoute) {
            router.push(nextRoute)
        }
    }

    const hideConfirmDialog = () => {
        const modalInstance = Modal.getInstance(document.getElementById('navigationConfirmDialog'))
        if (modalInstance) {
            modalInstance.hide()
            // Clean up the backdrop manually if it exists
            const backdrop = document.querySelector('.modal-backdrop')
            if (backdrop) {
                backdrop.remove()
            }
            // Reset body styles
            document.body.classList.remove('modal-open')
            document.body.style.removeProperty('padding-right')
        }
    }

    return {
        navigationConfirmDialog,
        showConfirmDialog,
        handleNavigationConfirm,
        hideConfirmDialog
    }
}

================
File: src/router/index.js
================
// src/router/index.js
import { createRouter, createWebHistory } from 'vue-router';
import store from '../store';

// Import components
import CustomerRegisterForm from '../components/auth/CustomerRegisterForm.vue';
import ProfessionalRegisterForm from '../components/auth/ProfessionalRegisterForm.vue';
import LoginForm from '../components/auth/LoginForm.vue';
import NotFound from '../views/NotFound.vue';
import ServicesPage from '../views/public/ServicesPage.vue';

// Route Guards
function requireAuth(to, from, next) {
  if (!store.getters['auth/isLoggedIn']) {
    next({ name: 'Login', query: { redirect: to.fullPath } });
  } else {
    next();
  }
}

function requireAdmin(to, from, next) {
  if (!store.getters['auth/isLoggedIn'] || store.getters['auth/userRole'] !== 'admin') {
    next({ name: 'NotFound' });
  } else {
    next();
  }
}

function requireProfessional(to, from, next) {
  if (!store.getters['auth/isLoggedIn'] || store.getters['auth/userRole'] !== 'professional') {
    next({ name: 'NotFound' });
  } else {
    next();
  }
}

function requireCustomer(to, from, next) {
  if (!store.getters['auth/isLoggedIn'] || store.getters['auth/userRole'] !== 'customer') {
    next({ name: 'NotFound' });
  } else {
    next();
  }
}

const routes = [
  {
    path: '/',
    name: 'Home',
    redirect: to => {
      if (!store.getters['auth/isLoggedIn']) return { name: 'Login' };

      switch (store.getters['auth/userRole']) {
        case 'admin':
          return { name: 'AdminDashboard' };
        case 'professional':
          return { name: 'ProfessionalDashboard' };
        case 'customer':
          return { name: 'CustomerDashboard' };
        default:
          return { name: 'Login' };
      }
    }
  },
  {
    path: '/login',
    name: 'Login',
    component: LoginForm,
    meta: { guestOnly: true }
  },
  {
    path: '/register/customer',
    name: 'CustomerRegister',
    component: CustomerRegisterForm,
    meta: { guestOnly: true }
  },
  {
    path: '/register/professional',
    name: 'ProfessionalRegister',
    component: ProfessionalRegisterForm,
    meta: { guestOnly: true }
  },
  {
    path: '/services',
    name: 'PublicServices',
    component: ServicesPage,
    meta: { guestOnly: false }
  },
  {
    path: '/profile/:id?',
    name: 'Profile',
    component: () => import('@/views/profile/ProfilePage.vue'),
    meta: { requiresAuth: true }
  },
  {
    path: '/about',
    name: 'About',
    component: () => import('../views/public/AboutPage.vue'),
    meta: { guestOnly: false }
  },
  {
    path: '/contact',
    name: 'Contact',
    component: () => import('../views/public/ContactPage.vue'),
    meta: { guestOnly: false }
  },
  {
    path: '/terms',
    name: 'Terms',
    component: () => import('../views/public/TermsPage.vue'),
    meta: { guestOnly: false }
  },
  {
    path: '/privacy',
    name: 'Privacy',
    component: () => import('../views/public/PrivacyPage.vue'),
    meta: { guestOnly: false }
  },
  {
    path: '/admin',
    name: 'Admin',
    redirect: { name: 'AdminDashboard' },
    beforeEnter: requireAdmin,
    children: [
      {
        path: 'dashboard',
        name: 'AdminDashboard',
        component: () => import('../views/admin/Dashboard.vue')
      }
    ]
  },
  {
    path: '/professional',
    name: 'Professional',
    redirect: { name: 'ProfessionalDashboard' },
    beforeEnter: requireProfessional,
    children: [
      {
        path: 'dashboard',
        name: 'ProfessionalDashboard',
        component: () => import('../views/professional/Dashboard.vue')
      }
    ]
  },
  {
    path: '/customer',
    name: 'Customer',
    redirect: { name: 'CustomerDashboard' },
    beforeEnter: requireCustomer,
    children: [
      {
        path: 'dashboard',
        name: 'CustomerDashboard',
        component: () => import('../views/customer/Dashboard.vue')
      },
      {
        path: 'services',
        name: 'CustomerServices',
        component: () => import('../views/customer/ServiceBrowser.vue'),
        meta: {
          requiresAuth: true,
          roles: ['customer']
        }
      },
      {
        path: 'my-requests',
        name: 'MyRequests',
        component: () => import('../views/customer/ServiceRequests.vue'),
        meta: {
          requiresAuth: true,
          roles: ['customer']
        }
      }
    ]
  },
  {
    path: '/:pathMatch(.*)*',
    name: 'NotFound',
    component: NotFound
  }
];

const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes
});

// Global navigation guard
router.beforeEach((to, from, next) => {
  const isLoggedIn = store.getters['auth/isLoggedIn'];

  // Handle routes that should only be accessible to guests
  if (to.meta.guestOnly && isLoggedIn) {
    return next({ name: 'Home' });
  }

  // Handle routes that require authentication
  if (to.matched.some(record => record.meta.requiresAuth)) {
    if (!isLoggedIn) {
      return next({
        name: 'Login',
        query: { redirect: to.fullPath }
      });
    }
  }

  next();
});

export default router;

================
File: src/services/api.js
================
import axios from 'axios';

const api = axios.create({
    baseURL: '/api',
    headers: {
        'Content-Type': 'application/json'
    }
});

================
File: src/services/profile.services.js
================
import axios from 'axios'

class ProfileService {
    async getProfile(userId = null) {
        const url = userId ? `/api/users/${userId}` : '/api/profile'
        const response = await axios.get(url)
        return response.data
    }

    async updateProfile(profileData) {
        const response = await axios.put('/api/profile', profileData)
        return response.data
    }

    async changePassword(passwordData) {
        const response = await axios.post('/api/change-password', passwordData)
        return response.data
    }

    async updateDocument(formData) {
        const response = await axios.put('/api/professionals/document', formData, {
            headers: {
                'Content-Type': 'multipart/form-data'
            }
        })
        return response.data
    }

    async deleteAccount(password) {
        const response = await axios.delete('/api/delete-account', {
            data: { password }
        })
        return response.data
    }

    async updateServiceType(serviceTypeId) {
        const response = await axios.put('/api/professionals/service', {
            service_type_id: serviceTypeId
        })
        return response.data
    }

    // Helper method to validate file before upload
    validateFile(file) {
        const maxSize = 5 * 1024 * 1024 // 5MB
        const allowedTypes = ['image/jpeg', 'image/png', 'application/pdf']

        if (!file) return { valid: false, error: 'No file selected' }
        if (!allowedTypes.includes(file.type)) {
            return { valid: false, error: 'Invalid file type. Please upload a PDF, JPG, or PNG file' }
        }
        if (file.size > maxSize) {
            return { valid: false, error: 'File size exceeds 5MB limit' }
        }

        return { valid: true }
    }
}

export const profileService = new ProfileService()

================
File: src/store/index.js
================
// frontend/src/store/index.js
import { createStore } from 'vuex'
import auth from './modules/auth'
import profile from './modules/profile'

export default createStore({
    modules: {
        auth,
        profile
    }
})

================
File: src/store/modules/auth.js
================
// frontend/src/store/modules/auth.js
import axios from 'axios'

const state = {
  token: localStorage.getItem('token') || null,
  user: JSON.parse(localStorage.getItem('user')) || null,
}

const getters = {
  isLoggedIn: state => !!state.token,
  userName: state => state.user ? state.user.full_name : '',
  userRole: state => state.user ? state.user.role : null,
  getToken: state => state.token,
  getUser: state => state.user,
}

const actions = {
  async login({ commit }, credentials) {
    try {
      const response = await axios.post('/api/login', credentials)
      const { token } = response.data.data

      // Get user profile
      const userResponse = await axios.get('/api/profile', {
        headers: { 'Authorization': `Bearer ${token}` }
      })
      const user = userResponse.data.data

      // Save to store and localStorage
      commit('setToken', token)
      commit('setUser', user)

      // Set default auth header
      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`

      return Promise.resolve(user)
    } catch (error) {
      commit('clearAuth')
      return Promise.reject(error.response.data)
    }
  },

  async register({ commit }, { role, data }) {
    try {
      const endpoint = `/api/register/${role}`
      const response = await axios.post(endpoint, data)
      return Promise.resolve(response.data)
    } catch (error) {
      return Promise.reject(error.response.data)
    }
  },

  async logout({ commit }) {
    commit('clearAuth')
    delete axios.defaults.headers.common['Authorization']
    return Promise.resolve()
  },

  async updateProfile({ commit }, profileData) {
    try {
      const response = await axios.put('/api/profile', profileData)
      const updatedUser = response.data.data
      commit('setUser', updatedUser)
      return Promise.resolve(updatedUser)
    } catch (error) {
      return Promise.reject(error.response.data)
    }
  },

  async changePassword({ commit }, passwordData) {
    try {
      const response = await axios.post('/api/change-password', passwordData)
      return Promise.resolve(response.data)
    } catch (error) {
      return Promise.reject(error.response.data)
    }
  }
}

const mutations = {
  setToken(state, token) {
    state.token = token
    localStorage.setItem('token', token)
  },

  setUser(state, user) {
    state.user = user
    localStorage.setItem('user', JSON.stringify(user))
  },

  clearAuth(state) {
    state.token = null
    state.user = null
    localStorage.removeItem('token')
    localStorage.removeItem('user')
  }
}

export default {
  namespaced: true,
  state,
  getters,
  actions,
  mutations
}

================
File: src/store/modules/profile.js
================
import axios from 'axios'

const state = {
    profile: null,
    loading: false,
    error: null
}

const getters = {
    profile: state => state.profile,
    isLoading: state => state.loading,
    error: state => state.error,
    isProfessional: state => state.profile?.role === 'professional',
    isCustomer: state => state.profile?.role === 'customer',
    isAdmin: state => state.profile?.role === 'admin',
    hasActiveRequests: state => {
        if (!state.profile || !state.profile.professional_profile) return false
        return state.profile.professional_profile.active_requests_count > 0
    }
}

const actions = {
    async fetchProfile({ commit }, userId = null) {
        try {
            commit('SET_LOADING', true)
            const url = userId ? `/api/users/${userId}` : '/api/profile'
            const response = await axios.get(url)
            commit('SET_PROFILE', response.data.data)
        } catch (error) {
            commit('SET_ERROR', error.response?.data?.message || 'Failed to fetch profile')
            throw error
        } finally {
            commit('SET_LOADING', false)
        }
    },

    async updateProfile({ commit }, profileData) {
        try {
            commit('SET_LOADING', true)
            const response = await axios.put('/api/profile', profileData)
            commit('SET_PROFILE', response.data.data)
            return response.data
        } catch (error) {
            commit('SET_ERROR', error.response?.data?.message || 'Failed to update profile')
            throw error
        } finally {
            commit('SET_LOADING', false)
        }
    },

    async changePassword({ commit }, passwordData) {
        try {
            commit('SET_LOADING', true)
            const response = await axios.post('/api/change-password', passwordData)
            return response.data
        } catch (error) {
            commit('SET_ERROR', error.response?.data?.message || 'Failed to change password')
            throw error
        } finally {
            commit('SET_LOADING', false)
        }
    },

    async updateDocument({ commit }, formData) {
        try {
            commit('SET_LOADING', true)
            const response = await axios.put('/api/professionals/document', formData, {
                headers: {
                    'Content-Type': 'multipart/form-data'
                }
            })
            commit('SET_PROFILE', response.data.data)
            return response.data
        } catch (error) {
            commit('SET_ERROR', error.response?.data?.message || 'Failed to update document')
            throw error
        } finally {
            commit('SET_LOADING', false)
        }
    },

    async deleteAccount({ commit }, password) {
        try {
            commit('SET_LOADING', true)
            const response = await axios.delete('/api/delete-account', {
                data: { password }
            })
            commit('CLEAR_PROFILE')
            return response.data
        } catch (error) {
            commit('SET_ERROR', error.response?.data?.message || 'Failed to delete account')
            throw error
        } finally {
            commit('SET_LOADING', false)
        }
    },

    clearError({ commit }) {
        commit('SET_ERROR', null)
    }
}

const mutations = {
    SET_PROFILE(state, profile) {
        state.profile = profile
    },
    SET_LOADING(state, loading) {
        state.loading = loading
    },
    SET_ERROR(state, error) {
        state.error = error
    },
    CLEAR_PROFILE(state) {
        state.profile = null
    }
}

export default {
    namespaced: true,
    state,
    getters,
    actions,
    mutations
}

================
File: src/utils/validation/profile.js
================
import { helpers } from '@vuelidate/validators'

export const profileValidationRules = {
    email: {
        required: helpers.withMessage('Email is required', v => !!v),
        email: helpers.withMessage('Please enter a valid email address', v => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(v))
    },
    full_name: {
        required: helpers.withMessage('Full name is required', v => !!v),
        minLength: helpers.withMessage('Full name must be at least 3 characters', v => v.length >= 3),
        validName: helpers.withMessage(
            'Name can only contain letters, spaces, and hyphens',
            v => /^[a-zA-Z\s-]+$/.test(v)
        )
    },
    phone: {
        required: helpers.withMessage('Phone number is required', v => !!v),
        validPhone: helpers.withMessage(
            'Please enter a valid 10-digit phone number',
            v => /^[1-9]\d{9}$/.test(v)
        )
    },
    pin_code: {
        required: helpers.withMessage('PIN code is required', v => !!v),
        validPin: helpers.withMessage(
            'Please enter a valid 6-digit PIN code',
            v => /^[1-9]\d{5}$/.test(v)
        )
    },
    address: {
        required: helpers.withMessage('Address is required', v => !!v),
        minLength: helpers.withMessage('Address must be at least 10 characters', v => v.length >= 10),
        maxLength: helpers.withMessage('Address cannot exceed 200 characters', v => v.length <= 200)
    },
    description: {
        required: helpers.withMessage('Professional description is required', v => !!v),
        minLength: helpers.withMessage('Description must be at least 50 characters', v => v.length >= 50),
        maxLength: helpers.withMessage('Description cannot exceed 1000 characters', v => v.length <= 1000)
    },
    service_type_id: {
        required: helpers.withMessage('Please select a service type', v => !!v)
    },
    experience_years: {
        required: helpers.withMessage('Years of experience is required', v => !!v),
        numeric: helpers.withMessage('Please enter a valid number', v => !isNaN(v)),
        min: helpers.withMessage('Experience must be at least 0 years', v => v >= 0),
        max: helpers.withMessage('Experience cannot exceed 50 years', v => v <= 50)
    }
}

export const passwordValidationRules = {
    old_password: {
        required: helpers.withMessage('Current password is required', v => !!v)
    },
    new_password: {
        required: helpers.withMessage('New password is required', v => !!v),
        minLength: helpers.withMessage('Password must be at least 8 characters', v => v.length >= 8),
        containsUppercase: helpers.withMessage(
            'Password must contain at least one uppercase letter',
            v => /[A-Z]/.test(v)
        ),
        containsLowercase: helpers.withMessage(
            'Password must contain at least one lowercase letter',
            v => /[a-z]/.test(v)
        ),
        containsNumber: helpers.withMessage(
            'Password must contain at least one number',
            v => /\d/.test(v)
        ),
        containsSpecial: helpers.withMessage(
            'Password must contain at least one special character',
            v => /[!@#$%^&*(),.?":{}|<>]/.test(v)
        )
    },
    confirm_password: {
        required: helpers.withMessage('Please confirm your password', v => !!v),
        sameAsPassword: helpers.withMessage(
            'Passwords must match',
            (v, form) => v === form.new_password
        )
    }
}

export const documentValidationRules = {
    maxSize: 5 * 1024 * 1024, // 5MB
    allowedTypes: ['application/pdf', 'image/jpeg', 'image/png'],
    validateFile: (file) => {
        if (!file) return { valid: false, error: 'Please select a file' }
        if (!documentValidationRules.allowedTypes.includes(file.type)) {
            return { valid: false, error: 'File must be PDF, JPG, or PNG' }
        }
        if (file.size > documentValidationRules.maxSize) {
            return { valid: false, error: 'File size must not exceed 5MB' }
        }
        return { valid: true }
    }
}

================
File: src/views/admin/AdminProfessionalManagement.vue
================
<!-- src/views/admin/AdminProfessionalManagement.vue -->
<template>
    <div class="container py-4">
        <h2>Manage Service Professionals</h2>

        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Service Professionals</h5>
            </div>
            <div class="card-body">
                <div v-if="loading" class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>

                <div v-else-if="professionals.length === 0" class="text-center">
                    <p>No service professionals found.</p>
                </div>

                <div v-else>
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Service Type</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="professional in professionals" :key="professional.id">
                                <td>{{ professional.user.full_name }}</td>
                                <td>{{ professional.user.email }}</td>
                                <td>{{ professional.service_type.name }}</td>
                                <td>
                                    <span v-if="professional.is_verified" class="badge bg-success">Verified</span>
                                    <span v-else class="badge bg-warning">Pending</span>
                                </td>
                                <td>
                                    <button v-if="!professional.is_verified" class="btn btn-sm btn-primary me-2"
                                        @click="openVerificationModal(professional)">
                                        Review Documents
                                    </button>
                                    <button class="btn btn-sm btn-danger" @click="blockProfessional(professional.id)">
                                        Block
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Verification Modal -->
        <div class="modal fade" id="verificationModal" tabindex="-1" ref="verificationModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Review Verification Documents</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div v-if="selectedProfessional">
                            <p><strong>Professional:</strong> {{ selectedProfessional.user.full_name }}</p>
                            <p><strong>Service Type:</strong> {{ selectedProfessional.service_type.name }}</p>
                            <p><strong>Experience:</strong> {{ selectedProfessional.experience_years }} years</p>
                            <p><strong>Description:</strong> {{ selectedProfessional.description }}</p>

                            <div class="mb-3">
                                <label class="form-label">Verification Documents</label>
                                <ul>
                                    <li v-for="(doc, index) in selectedProfessional.verification_documents"
                                        :key="index">
                                        <a :href="doc.url" target="_blank">{{ doc.name }}</a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-success" @click="approveProfessional">Approve</button>
                        <button type="button" class="btn btn-danger" @click="rejectProfessional">Reject</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref, onMounted } from 'vue'
import { Modal } from 'bootstrap'
import axios from 'axios'

export default {
    name: 'AdminProfessionalManagement',

    setup() {
        const loading = ref(true)
        const professionals = ref([])
        const verificationModal = ref(null)
        const selectedProfessional = ref(null)

        const fetchProfessionals = async () => {
            try {
                loading.value = true
                const response = await axios.get('/api/professionals')
                professionals.value = response.data.data
            } catch (error) {
                console.error('Error fetching professionals:', error)
            } finally {
                loading.value = false
            }
        }

        const openVerificationModal = (professional) => {
            selectedProfessional.value = professional
            const modal = new Modal(verificationModal.value)
            modal.show()
        }

        const approveProfessional = async () => {
            try {
                await axios.post(`/api/professionals/${selectedProfessional.value.id}/verify`)
                await fetchProfessionals()
                const modal = Modal.getInstance(verificationModal.value)
                modal.hide()
            } catch (error) {
                console.error('Error approving professional:', error)
            }
        }

        const rejectProfessional = async () => {
            try {
                await axios.post(`/api/professionals/${selectedProfessional.value.id}/reject`)
                await fetchProfessionals()
                const modal = Modal.getInstance(verificationModal.value)
                modal.hide()
            } catch (error) {
                console.error('Error rejecting professional:', error)
            }
        }

        const blockProfessional = async (professionalId) => {
            try {
                await axios.post(`/api/professionals/${professionalId}/block`)
                await fetchProfessionals()
            } catch (error) {
                console.error('Error blocking professional:', error)
            }
        }

        onMounted(() => {
            fetchProfessionals()
        })

        return {
            loading,
            professionals,
            verificationModal,
            selectedProfessional,
            openVerificationModal,
            approveProfessional,
            rejectProfessional,
            blockProfessional
        }
    }
}
</script>

================
File: src/views/admin/AdminServiceManagement.vue
================
<!-- src/views/admin/AdminServiceManagement.vue -->
<template>
    <div class="container py-4">
        <h2>Manage Services</h2>

        <div class="mb-3">
            <button class="btn btn-primary" @click="openCreateModal">Create New Service</button>
        </div>

        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Services</h5>
            </div>
            <div class="card-body">
                <div v-if="loading" class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>

                <div v-else-if="services.length === 0" class="text-center">
                    <p>No services found.</p>
                </div>

                <div v-else>
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Description</th>
                                <th>Base Price</th>
                                <th>Time Required</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="service in services" :key="service.id">
                                <td>{{ service.name }}</td>
                                <td>{{ service.description }}</td>
                                <td>{{ service.base_price }}</td>
                                <td>{{ service.estimated_time }} minutes</td>
                                <td>
                                    <button class="btn btn-sm btn-primary me-2" @click="openEditModal(service)">
                                        Edit
                                    </button>
                                    <button class="btn btn-sm btn-danger" @click="deleteService(service.id)">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Create Service Modal -->
        <div class="modal fade" id="createModal" tabindex="-1" ref="createModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Create New Service</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form @submit.prevent="createService">
                            <div class="mb-3">
                                <label class="form-label">Name</label>
                                <input type="text" class="form-control" v-model="newService.name" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <textarea class="form-control" v-model="newService.description" required></textarea>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Base Price</label>
                                <input type="number" class="form-control" v-model="newService.base_price" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Time Required (minutes)</label>
                                <input type="number" class="form-control" v-model="newService.estimated_time" required>
                            </div>
                            <div class="text-end">
                                <button type="button" class="btn btn-secondary me-2"
                                    data-bs-dismiss="modal">Cancel</button>
                                <button type="submit" class="btn btn-primary">Create</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Edit Service Modal -->
        <div class="modal fade" id="editModal" tabindex="-1" ref="editModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Service</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form @submit.prevent="updateService">
                            <div class="mb-3">
                                <label class="form-label">Name</label>
                                <input type="text" class="form-control" v-model="editedService.name" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <textarea class="form-control" v-model="editedService.description" required></textarea>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Base Price</label>
                                <input type="number" class="form-control" v-model="editedService.base_price" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Time Required (minutes)</label>
                                <input type="number" class="form-control" v-model="editedService.estimated_time"
                                    required>
                            </div>
                            <div class="text-end">
                                <button type="button" class="btn btn-secondary me-2"
                                    data-bs-dismiss="modal">Cancel</button>
                                <button type="submit" class="btn btn-primary">Update</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref, onMounted } from 'vue'
import { Modal } from 'bootstrap'
import axios from 'axios'

export default {
    name: 'AdminServiceManagement',

    setup() {
        const loading = ref(true)
        const services = ref([])
        const createModal = ref(null)
        const editModal = ref(null)
        const newService = ref({
            name: '',
            description: '',
            base_price: 0,
            estimated_time: 0
        })
        const editedService = ref({
            id: null,
            name: '',
            description: '',
            base_price: 0,
            estimated_time: 0
        })

        const fetchServices = async () => {
            try {
                loading.value = true
                const response = await axios.get('/api/services')
                services.value = response.data.data
            } catch (error) {
                console.error('Error fetching services:', error)
            } finally {
                loading.value = false
            }
        }

        const openCreateModal = () => {
            newService.value = {
                name: '',
                description: '',
                base_price: 0,
                estimated_time: 0
            }
            const modal = new Modal(createModal.value)
            modal.show()
        }

        const createService = async () => {
            try {
                await axios.post('/api/services', newService.value)
                await fetchServices()
                const modal = Modal.getInstance(createModal.value)
                modal.hide()
            } catch (error) {
                console.error('Error creating service:', error)
            }
        }

        const openEditModal = (service) => {
            editedService.value = { ...service }
            const modal = new Modal(editModal.value)
            modal.show()
        }

        const updateService = async () => {
            try {
                await axios.put(`/api/services/${editedService.value.id}`, editedService.value)
                await fetchServices()
                const modal = Modal.getInstance(editModal.value)
                modal.hide()
            } catch (error) {
                console.error('Error updating service:', error)
            }
        }

        const deleteService = async (serviceId) => {
            try {
                await axios.delete(`/api/services/${serviceId}`)
                await fetchServices()
            } catch (error) {
                console.error('Error deleting service:', error)
            }
        }

        onMounted(() => {
            fetchServices()
        })

        return {
            loading,
            services,
            createModal,
            editModal,
            newService,
            editedService,
            openCreateModal,
            createService,
            openEditModal,
            updateService,
            deleteService
        }
    }
}
</script>

================
File: src/views/admin/Dashboard.vue
================
<!-- src/views/admin/DashboardOverview.vue -->
<template>
    <div class="dashboard-overview">
        <!-- Stats Cards Row -->
        <div class="row g-4 mb-4">
            <!-- Professionals Card -->
            <div class="col-md-6 col-lg-3">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-primary bg-opacity-10 p-3 rounded">
                                <i class="bi bi-people fs-4 text-primary"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Service Professionals</h6>
                                <small class="text-muted">
                                    {{ stats.verified_professionals }} verified
                                </small>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.total_professionals }}</h3>
                    </div>
                </div>
            </div>

            <!-- Customers Card -->
            <div class="col-md-6 col-lg-3">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-success bg-opacity-10 p-3 rounded">
                                <i class="bi bi-person-check fs-4 text-success"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Active Customers</h6>
                                <small class="text-muted">
                                    Past 30 days
                                </small>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.total_customers }}</h3>
                    </div>
                </div>
            </div>

            <!-- Service Requests Card -->
            <div class="col-md-6 col-lg-3">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-info bg-opacity-10 p-3 rounded">
                                <i class="bi bi-clipboard-check fs-4 text-info"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Service Requests</h6>
                                <small class="text-muted">
                                    {{ stats.pending_requests }} pending
                                </small>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.total_requests }}</h3>
                    </div>
                </div>
            </div>

            <!-- Actions Required Card -->
            <div class="col-md-6 col-lg-3">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-warning bg-opacity-10 p-3 rounded">
                                <i class="bi bi-exclamation-circle fs-4 text-warning"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Actions Required</h6>
                                <small class="text-muted">Needs attention</small>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ pendingActions }}</h3>
                    </div>
                </div>
            </div>
        </div>
        <!-- Alert for errors -->
        <div v-if="error" class="alert alert-danger alert-dismissible fade show mb-4" role="alert">
            {{ error }}
            <button type="button" class="btn-close" @click="error = null"></button>
        </div>

        <!-- Main Content Row -->
        <div class="row g-4">
            <!-- Left Column -->
            <div class="col-lg-8">
                <!-- Pending Verifications -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-transparent">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                Pending Verifications
                                <span class="badge bg-warning ms-2">
                                    {{ stats.pending_verifications }}
                                </span>
                            </h5>
                            <router-link to="/admin/verifications" class="btn btn-sm btn-primary">
                                View All
                            </router-link>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div v-if="loading" class="text-center py-4">
                            <div class="spinner-border text-primary">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                        <div v-else-if="!pendingVerifications.length" class="text-center py-4">
                            <i class="bi bi-check-circle fs-1 text-muted"></i>
                            <p class="mt-2 mb-0">No pending verifications</p>
                        </div>
                        <div v-else class="table-responsive">
                            <table class="table table-hover align-middle mb-0">
                                <thead class="bg-light">
                                    <tr>
                                        <th>Professional</th>
                                        <th>Service Type</th>
                                        <th>Experience</th>
                                        <th>Date Applied</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="prof in pendingVerifications" :key="prof?.id">
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div>
                                                    <div class="fw-medium">
                                                        {{ prof?.user?.full_name || 'Unknown' }}
                                                    </div>
                                                    <small class="text-muted">
                                                        {{ prof?.user?.email || 'No email' }}
                                                    </small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>{{ prof?.service_type?.name || 'Unknown Service' }}</td>
                                        <td>{{ prof?.experience_years || 0 }} years</td>
                                        <td>{{ formatDate(prof?.created_at) }}</td>
                                        <td>
                                            <button class="btn btn-sm btn-primary" @click="viewDocuments(prof)"
                                                :disabled="!prof?.verification_documents">
                                                Review
                                            </button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- Recent Service Requests -->
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-transparent">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Recent Service Requests</h5>
                            <router-link to="/admin/requests" class="btn btn-sm btn-primary">
                                View All
                            </router-link>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div v-if="loading" class="text-center py-4">
                            <div class="spinner-border text-primary">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                        <div v-else-if="!recentRequests.length" class="text-center py-4">
                            <i class="bi bi-inbox fs-1 text-muted"></i>
                            <p class="mt-2 mb-0">No recent service requests</p>
                        </div>
                        <div v-else class="table-responsive">
                            <table class="table table-hover align-middle mb-0">
                                <thead class="bg-light">
                                    <tr>
                                        <th>Customer</th>
                                        <th>Service</th>
                                        <th>Professional</th>
                                        <th>Status</th>
                                        <th>Date</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="request in recentRequests" :key="request?.id">
                                        <td>{{ request?.customer?.user?.full_name || 'Unknown' }}</td>
                                        <td>{{ request?.service?.name || 'Unknown Service' }}</td>
                                        <td>
                                            <span v-if="request?.professional?.user?.full_name">
                                                {{ request.professional.user.full_name }}
                                            </span>
                                            <span v-else class="text-muted">Not assigned</span>
                                        </td>
                                        <td>
                                            <span :class="[
                                                'badge',
                                                {
                                                    'bg-warning': request?.status === 'created',
                                                    'bg-primary': request?.status === 'assigned',
                                                    'bg-success': request?.status === 'completed'
                                                }
                                            ]">
                                                {{ request?.status || 'Unknown' }}
                                            </span>
                                        </td>
                                        <td>{{ formatDate(request?.created_at) }}</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Column -->
            <div class="col-lg-4">
                <!-- Quick Actions -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-transparent">
                        <h5 class="mb-0">Quick Actions</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <button class="btn btn-primary" @click="openNewServiceModal">
                                <i class="bi bi-plus-circle me-2"></i>
                                Add New Service
                            </button>
                            <router-link to="/admin/export" class="btn btn-outline-primary">
                                <i class="bi bi-download me-2"></i>
                                Export Reports
                            </router-link>
                            <router-link to="/admin/settings" class="btn btn-outline-secondary">
                                <i class="bi bi-gear me-2"></i>
                                Platform Settings
                            </router-link>
                        </div>
                    </div>
                </div>

                <!-- Reported Reviews -->
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-transparent">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                Reported Reviews
                                <span class="badge bg-danger ms-2">
                                    {{ stats.reported_reviews }}
                                </span>
                            </h5>
                            <router-link to="/admin/reviews" class="btn btn-sm btn-primary">
                                View All
                            </router-link>
                        </div>
                    </div>
                    <div class="card-body">
                        <div v-if="loading" class="text-center py-4">
                            <div class="spinner-border text-primary">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                        <div v-else-if="!reportedReviews.length" class="text-center py-4">
                            <i class="bi bi-check-circle fs-1 text-muted"></i>
                            <p class="mt-2 mb-0">No reported reviews</p>
                        </div>
                        <div v-else>
                            <div v-for="review in reportedReviews" :key="review?.id"
                                class="review-card p-3 mb-3 bg-light rounded">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <div class="rating text-warning">
                                        <i v-for="n in 5" :key="n"
                                            :class="['bi', n <= (review?.rating || 0) ? 'bi-star-fill' : 'bi-star']">
                                        </i>
                                    </div>
                                    <span class="badge bg-danger">Reported</span>
                                </div>
                                <p class="mb-2">{{ review?.comment || 'No comment provided' }}</p>
                                <div class="report-reason mb-2">
                                    <small class="text-danger">
                                        <i class="bi bi-exclamation-triangle me-1"></i>
                                        {{ review?.report_reason || 'No reason provided' }}
                                    </small>
                                </div>
                                <div class="d-flex justify-content-between align-items-center mt-2">
                                    <small class="text-muted">
                                        {{ formatDate(review?.created_at) }}
                                    </small>
                                    <div>
                                        <button class="btn btn-sm btn-outline-danger me-2"
                                            @click="handleRemoveReview(review?.id)" :disabled="!review?.id">
                                            Remove
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary"
                                            @click="handleDismissReview(review?.id)" :disabled="!review?.id">
                                            Dismiss
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Document Review Modal -->
        <div class="modal fade" id="documentModal" tabindex="-1" ref="documentModal">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Review Verification Documents</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <!-- Professional Details -->
                        <div v-if="selectedProfessional" class="mb-4">
                            <h6>Professional Details</h6>
                            <div class="table-responsive">
                                <table class="table table-borderless">
                                    <tbody>
                                        <tr>
                                            <th style="width: 150px">Name:</th>
                                            <td>{{ selectedProfessional.user.full_name }}</td>
                                        </tr>
                                        <tr>
                                            <th>Service Type:</th>
                                            <td>{{ selectedProfessional.service_type.name }}</td>
                                        </tr>
                                        <tr>
                                            <th>Experience:</th>
                                            <td>{{ selectedProfessional.experience_years }} years</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <!-- Document Preview -->
                            <h6>Verification Documents</h6>
                            <div class="document-preview bg-light p-3 rounded">
                                <iframe v-if="documentUrl" :src="documentUrl" class="w-100" style="height: 500px;">
                                </iframe>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                            Close
                        </button>
                        <button type="button" class="btn btn-success"
                            @click="verifyProfessional(selectedProfessional?.id)"
                            :disabled="verifying === selectedProfessional?.id">
                            <span v-if="verifying === selectedProfessional?.id"
                                class="spinner-border spinner-border-sm me-1">
                            </span>
                            Verify Professional
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- New Service Modal -->
        <div class="modal fade" id="newServiceModal" tabindex="-1" ref="newServiceModal">
            <!-- Modal content here -->
        </div>
    </div>
</template>

<script>
import { ref, computed, onMounted } from 'vue';
import { Modal } from 'bootstrap';
import moment from 'moment';
import axios from 'axios';

export default {
    name: 'DashboardOverview',

    setup() {
        // Initialize with proper data structures
        const loading = ref(true);
        const error = ref(null);
        const stats = ref({
            total_professionals: 0,
            verified_professionals: 0,
            total_customers: 0,
            active_customers: 0,
            pending_verifications: 0,
            reported_reviews: 0,
            service_requests: {
                total: 0,
                pending: 0,
                completed: 0
            }
        });

        const pendingVerifications = ref([]);
        const recentRequests = ref([]);
        const reportedReviews = ref([]);
        const selectedProfessional = ref(null);
        const verifying = ref(null);
        const documentUrl = ref('');
        const documentModal = ref(null);
        const newServiceModal = ref(null);

        const fetchDashboardData = async () => {
            try {
                loading.value = true;
                error.value = null;

                const [statsRes, verificationsRes, requestsRes, reviewsRes] = await Promise.all([
                    axios.get('/api/dashboard-stats'),
                    axios.get('/api/detailed-stats?stat_type=pending_verifications'),
                    axios.get('/api/detailed-stats?stat_type=recent_requests'),
                    axios.get('/api/detailed-stats?stat_type=reported_reviews')
                ]);

                // Validate responses before assignment
                if (statsRes.data?.data) {
                    stats.value = statsRes.data.data;
                }

                if (verificationsRes.data?.data) {
                    pendingVerifications.value = verificationsRes.data.data;
                }

                if (requestsRes.data?.data) {
                    recentRequests.value = requestsRes.data.data;
                }

                if (reviewsRes.data?.data) {
                    reportedReviews.value = reviewsRes.data.data;
                }

            } catch (err) {
                console.error('Error fetching dashboard data:', err);
                error.value = err.response?.data?.message || 'Error loading dashboard data';
            } finally {
                loading.value = false;
            }
        };

        const formatDate = (date) => {
            if (!date) return 'N/A';
            return moment(date).format('MMM D, YYYY');
        };

        const viewDocuments = (professional) => {
            if (!professional) return;
            selectedProfessional.value = professional;

            if (professional.verification_documents) {
                documentUrl.value = `/api/static/uploads/verification_docs/${professional.verification_documents}`;
                const modal = new Modal(document.getElementById('documentModal'));
                modal?.show();
            }
        };

        const verifyProfessional = async (professionalId) => {
            try {
                verifying.value = professionalId;
                await axios.post(`/api/professionals/${professionalId}/verify`);
                await fetchDashboardData();
                documentModal.value.hide();
            } catch (error) {
                console.error('Error verifying professional:', error);
            } finally {
                verifying.value = null;
            }
        };

        const openNewServiceModal = () => {
            if (!newServiceModal.value) {
                newServiceModal.value = new Modal(document.getElementById('newServiceModal'));
            }
            newServiceModal.value.show();
        };

        const handleDismissReview = async (reviewId) => {
            try {
                await axios.post(`/api/reviews/${reviewId}/dismiss`);
                await fetchDashboardData();
            } catch (error) {
                console.error('Error dismissing review:', error);
            }
        };

        const handleRemoveReview = async (reviewId) => {
            if (!confirm('Are you sure you want to remove this review?')) return;

            try {
                await axios.delete(`/api/reviews/${reviewId}`);
                await fetchDashboardData();
            } catch (error) {
                console.error('Error removing review:', error);
            }
        };

        const pendingActions = computed(() => {
            return (stats.value.pending_verifications || 0) + (stats.value.reported_reviews || 0);
        });

        // Lifecycle hooks
        onMounted(() => {
            fetchDashboardData().catch(err => {
                console.error('Error during component mount:', err);
                error.value = 'Failed to initialize dashboard';
            });
        });

        return {
            loading,
            stats,
            error,
            pendingVerifications,
            recentRequests,
            reportedReviews,
            selectedProfessional,
            verifying,
            documentUrl,
            documentModal,
            newServiceModal,
            pendingActions,
            viewDocuments,
            verifyProfessional,
            openNewServiceModal,
            handleDismissReview,
            handleRemoveReview,
            formatDate
        };
    }
};
</script>
<style scoped>
.dashboard-overview {
    padding: 1.5rem;
}

.card {
    transition: box-shadow 0.3s ease-in-out, transform 0.2s ease;
}

.card:hover {
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    transform: translateY(-2px);
}

.review-card {
    transition: background-color 0.2s ease;
}

.review-card:hover {
    background-color: #f0f0f0 !important;
}

.rating i {
    font-size: 0.875rem;
    margin-right: 1px;
}

.table th {
    font-weight: 600;
}

.document-preview {
    border: 1px solid #dee2e6;
    border-radius: 0.25rem;
}

.table-hover>tbody>tr:hover {
    background-color: rgba(0, 0, 0, 0.02);
}

/* Custom scrollbar for reviews section */
.card-body {
    scrollbar-width: thin;
    scrollbar-color: #888 #f1f1f1;
}

.card-body::-webkit-scrollbar {
    width: 6px;
}

.card-body::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
}

.card-body::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 10px;
}

.card-body::-webkit-scrollbar-thumb:hover {
    background: #555;
}

/* Loading spinner colors */
.spinner-border {
    --bs-spinner-width: 1.5rem;
    --bs-spinner-height: 1.5rem;
    --bs-spinner-border-width: 0.15em;
}

.bg-light {
    background-color: #f8f9fa !important;
}
</style>

================
File: src/views/customer/Dashboard.vue
================
<template>
    <div class="dashboard">
        <!-- Stats Overview -->
        <div class="row g-4 mb-4">
            <div class="col-md-6 col-lg-3">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-primary bg-opacity-10 p-3 rounded">
                                <i class="bi bi-calendar-check fs-4 text-primary"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Active Requests</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.service_requests?.active || 0 }}</h3>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-lg-3">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-success bg-opacity-10 p-3 rounded">
                                <i class="bi bi-check-circle fs-4 text-success"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Completed Services</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.service_requests?.completed || 0 }}</h3>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-lg-3">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-warning bg-opacity-10 p-3 rounded">
                                <i class="bi bi-clock fs-4 text-warning"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Pending Requests</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.service_requests?.pending || 0 }}</h3>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-lg-3">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-info bg-opacity-10 p-3 rounded">
                                <i class="bi bi-star fs-4 text-info"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Reviews Given</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.reviews_given || 0 }}</h3>
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Requests and Actions -->
        <div class="row g-4">
            <!-- Active Requests -->
            <div class="col-lg-8">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-transparent border-0">
                        <div class="d-flex align-items-center justify-content-between">
                            <h5 class="mb-0">Recent Service Requests</h5>
                            <router-link to="/customer/requests" class="btn btn-sm btn-primary">
                                View All
                            </router-link>
                        </div>
                    </div>
                    <div class="card-body">
                        <div v-if="loading" class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>

                        <div v-else-if="recentRequests.length === 0" class="text-center py-4">
                            <i class="bi bi-inbox fs-1 text-muted"></i>
                            <p class="mt-2 mb-0">No service requests yet</p>
                        </div>

                        <div v-else class="table-responsive">
                            <table class="table table-hover align-middle">
                                <thead class="table-light">
                                    <tr>
                                        <th>Service</th>
                                        <th>Status</th>
                                        <th>Date</th>
                                        <th>Professional</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="request in recentRequests" :key="request.id">
                                        <td>{{ request.service.name }}</td>
                                        <td>
                                            <span :class="[
                                                'badge',
                                                {
                                                    'bg-warning': request.status === 'created',
                                                    'bg-primary': request.status === 'assigned',
                                                    'bg-success': request.status === 'completed'
                                                }
                                            ]">
                                                {{ request.status }}
                                            </span>
                                        </td>
                                        <td>{{ formatDate(request.preferred_time) }}</td>
                                        <td>
                                            <span v-if="request.professional">
                                                {{ request.professional.user.full_name }}
                                            </span>
                                            <span v-else class="text-muted">Not assigned</span>
                                        </td>
                                        <td>
                                            <button v-if="request.status === 'completed' && !request.review"
                                                class="btn btn-sm btn-outline-primary me-2"
                                                @click="openReviewModal(request)">
                                                Add Review
                                            </button>
                                            <button v-if="request.status === 'created'"
                                                class="btn btn-sm btn-outline-danger"
                                                @click="cancelRequest(request.id)">
                                                Cancel
                                            </button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="col-lg-4">
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-transparent border-0">
                        <h5 class="mb-0">Quick Actions</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-3">
                            <router-link to="/customer/book-service" class="btn btn-primary">
                                <i class="bi bi-plus-circle me-2"></i>
                                Book New Service
                            </router-link>
                            <router-link to="/customer/services" class="btn btn-outline-primary">
                                <i class="bi bi-grid me-2"></i>
                                Browse Services
                            </router-link>
                            <router-link to="/customer/profile" class="btn btn-outline-secondary">
                                <i class="bi bi-person me-2"></i>
                                Update Profile
                            </router-link>
                        </div>
                    </div>
                </div>

                <!-- Recent Reviews -->
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-transparent border-0">
                        <h5 class="mb-0">Your Recent Reviews</h5>
                    </div>
                    <div class="card-body">
                        <div v-if="loading" class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>

                        <div v-else-if="recentReviews.length === 0" class="text-center py-4">
                            <i class="bi bi-star fs-1 text-muted"></i>
                            <p class="mt-2 mb-0">No reviews yet</p>
                        </div>

                        <div v-else class="reviews-list">
                            <div v-for="review in recentReviews" :key="review.id" class="review-item mb-3">
                                <div class="d-flex align-items-center mb-2">
                                    <div class="rating text-warning me-2">
                                        <i v-for="n in 5" :key="n"
                                            :class="['bi', n <= review.rating ? 'bi-star-fill' : 'bi-star']">
                                        </i>
                                    </div>
                                    <small class="text-muted">
                                        {{ formatDate(review.created_at) }}
                                    </small>
                                </div>
                                <p class="mb-1">{{ review.comment }}</p>
                                <small class="text-muted">
                                    For: {{ review.service_request.service.name }}
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Review Modal -->
        <div class="modal fade" id="reviewModal" tabindex="-1" ref="reviewModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add Review</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form @submit.prevent="submitReview">
                            <div class="mb-3">
                                <label class="form-label">Rating</label>
                                <div class="rating-input">
                                    <div class="btn-group">
                                        <button v-for="n in 5" :key="n" type="button" class="btn btn-outline-warning"
                                            :class="{ active: reviewForm.rating >= n }" @click="reviewForm.rating = n">
                                            <i class="bi bi-star-fill"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Comment</label>
                                <textarea v-model="reviewForm.comment" class="form-control" rows="3"
                                    placeholder="Share your experience..."></textarea>
                            </div>
                            <div class="text-end">
                                <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">
                                    Cancel
                                </button>
                                <button type="submit" class="btn btn-primary" :disabled="!reviewForm.rating">
                                    Submit Review
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref, reactive, onMounted } from 'vue'
import { Modal } from 'bootstrap'
import moment from 'moment'
import axios from 'axios'

export default {
    name: 'CustomerDashboard',

    setup() {
        const loading = ref(true)
        const stats = ref({})
        const recentRequests = ref([])
        const recentReviews = ref([])
        const reviewModal = ref(null)
        const selectedRequest = ref(null)

        const reviewForm = reactive({
            rating: 0,
            comment: ''
        })

        // Fetch dashboard data
        const fetchDashboardData = async () => {
            try {
                loading.value = true
                const [statsRes, requestsRes, reviewsRes] = await Promise.all([
                    axios.get('/api/dashboard-stats'),
                    axios.get('/api/customer/requests?per_page=5'),
                    axios.get('/api/requests/reviews?per_page=3')
                ])

                stats.value = statsRes.data.data
                recentRequests.value = requestsRes.data.data
                recentReviews.value = reviewsRes.data.data
            } catch (error) {
                console.error('Error fetching dashboard data:', error)
            } finally {
                loading.value = false
            }
        }

        const openReviewModal = (request) => {
            selectedRequest.value = request
            reviewForm.rating = 0
            reviewForm.comment = ''
            const modal = new Modal(reviewModal.value)
            modal.show()
        }

        const submitReview = async () => {
            if (!selectedRequest.value || !reviewForm.rating) return

            try {
                await axios.post(`/api/requests/${selectedRequest.value.id}/review`, reviewForm)
                const modal = Modal.getInstance(reviewModal.value)
                modal.hide()
                await fetchDashboardData()
            } catch (error) {
                console.error('Error submitting review:', error)
            }
        }

        const cancelRequest = async (requestId) => {
            if (!confirm('Are you sure you want to cancel this request?')) return

            try {
                await axios.post(`/api/requests/${requestId}/cancel`)
                await fetchDashboardData()
            } catch (error) {
                console.error('Error canceling request:', error)
            }
        }

        const formatDate = (date) => {
            return moment(date).format('MMM D, YYYY h:mm A')
        }

        onMounted(() => {
            fetchDashboardData()
        })

        return {
            loading,
            stats,
            recentRequests,
            recentReviews,
            reviewModal,
            reviewForm,
            openReviewModal,
            submitReview,
            cancelRequest,
            formatDate
        }
    }
}
</script>

<style scoped>
.dashboard {
    padding: 1.5rem;
}

.card {
    transition: transform 0.2s;
}

.card:hover {
    transform: translateY(-2px);
}

.rating-input .btn-group {
    width: 100%;
}

.rating-input .btn {
    flex: 1;
}

.rating-input .btn:not(:last-child) {
    margin-right: 5px;
}

.rating-input .btn.active {
    background-color: #ffc107;
    border-color: #ffc107;
    color: white;
}

.reviews-list {
    max-height: 300px;
    overflow-y: auto;
}

.review-item {
    padding: 1rem;
    border-radius: 0.5rem;
    background-color: #f8f9fa;
}

.review-item:not(:last-child) {
    margin-bottom: 1rem;
}
</style>

================
File: src/views/customer/ServiceBrowser.vue
================
<!-- src/views/customer/ServiceBrowser.vue -->
<template>
    <div class="container py-4">
        <!-- Search and Filter Section -->
        <div class="card shadow-sm mb-4">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-8">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="bi bi-search"></i>
                            </span>
                            <input type="text" class="form-control" placeholder="Search services..."
                                v-model="searchQuery">
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="bi bi-geo-alt"></i>
                            </span>
                            <input type="text" class="form-control" placeholder="PIN Code" v-model="pinCode"
                                maxlength="6" pattern="[0-9]*">
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Services Grid -->
        <div v-if="loading" class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>

        <div v-else-if="filteredServices.length === 0" class="text-center py-5">
            <i class="bi bi-inbox fs-1 text-muted"></i>
            <p class="mt-2 mb-0">No services found</p>
        </div>

        <div v-else class="row g-4">
            <div v-for="service in filteredServices" :key="service.id" class="col-md-6 col-lg-4">
                <div class="card h-100 shadow-sm hover-shadow">
                    <div class="card-body">
                        <h5 class="card-title">{{ service.name }}</h5>
                        <p class="card-text text-muted">{{ service.description }}</p>
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <div class="text-muted">
                                <i class="bi bi-clock me-1"></i>
                                {{ service.estimated_time }} mins
                            </div>
                            <div class="text-primary fw-bold">
                                ₹{{ service.base_price }}
                            </div>
                        </div>
                        <button class="btn btn-primary w-100" @click="openBookingModal(service)"
                            :disabled="!service.is_active">
                            Book Now
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Booking Modal -->
        <div class="modal fade" id="bookingModal" tabindex="-1" ref="bookingModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            Book {{ selectedService?.name }}
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <form @submit.prevent="handleBooking">
                        <div class="modal-body">
                            <!-- Error Alert -->
                            <div v-if="error" class="alert alert-danger alert-dismissible fade show" role="alert">
                                {{ error }}
                                <button type="button" class="btn-close" @click="error = ''"></button>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Preferred Date</label>
                                <input type="date" class="form-control" v-model="bookingForm.preferred_date"
                                    :min="minDate" :max="maxDate" required>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Preferred Time</label>
                                <input type="time" class="form-control" v-model="bookingForm.preferred_time" min="09:00"
                                    max="17:00" required>
                                <div class="form-text">
                                    Business hours: 9 AM to 5 PM
                                </div>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Service Description</label>
                                <textarea class="form-control" v-model="bookingForm.description" rows="3"
                                    placeholder="Please describe your service requirement..." required></textarea>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-primary" :disabled="isBooking">
                                <span v-if="isBooking" class="spinner-border spinner-border-sm me-2"></span>
                                {{ isBooking ? 'Booking...' : 'Confirm Booking' }}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref, computed, onMounted } from 'vue'
import { Modal } from 'bootstrap'
import { useRouter } from 'vue-router'
import axios from 'axios'
import moment from 'moment'

export default {
    name: 'ServiceBrowser',

    setup() {
        const router = useRouter()
        const loading = ref(true)
        const services = ref([])
        const searchQuery = ref('')
        const pinCode = ref('')
        const error = ref('')
        const bookingModal = ref(null)
        const selectedService = ref(null)
        const isBooking = ref(false)

        const bookingForm = ref({
            preferred_date: '',
            preferred_time: '',
            description: ''
        })

        // Computed properties for date constraints
        const minDate = computed(() => moment().format('YYYY-MM-DD'))
        const maxDate = computed(() => moment().add(7, 'days').format('YYYY-MM-DD'))

        // Filter services based on search query and pin code
        const filteredServices = computed(() => {
            let filtered = services.value

            if (searchQuery.value) {
                const query = searchQuery.value.toLowerCase()
                filtered = filtered.filter(service =>
                    service.name.toLowerCase().includes(query) ||
                    service.description.toLowerCase().includes(query)
                )
            }

            // Add pin code filtering when backend supports it
            return filtered
        })

        // Fetch services from backend
        const fetchServices = async () => {
            try {
                loading.value = true
                const response = await axios.get('/api/services')
                services.value = response.data.data
            } catch (err) {
                console.error('Error fetching services:', err)
                error.value = 'Failed to load services. Please try again.'
            } finally {
                loading.value = false
            }
        }

        // Handle booking modal
        const openBookingModal = (service) => {
            selectedService.value = service
            // Reset form
            bookingForm.value = {
                preferred_date: '',
                preferred_time: '',
                description: ''
            }
            error.value = ''

            // Initialize and show modal
            if (!bookingModal.value) {
                bookingModal.value = new Modal(document.getElementById('bookingModal'))
            }
            bookingModal.value.show()
        }

        // Handle booking submission
        const handleBooking = async () => {
            if (!selectedService.value) return

            try {
                isBooking.value = true
                error.value = ''

                // Combine date and time
                const preferredTime = moment(
                    `${bookingForm.value.preferred_date} ${bookingForm.value.preferred_time}`
                ).format('YYYY-MM-DD HH:mm:ss')

                const requestData = {
                    service_id: selectedService.value.id,
                    preferred_time: preferredTime,
                    description: bookingForm.value.description
                }

                await axios.post('/api/requests', requestData)

                // Close modal and redirect to requests page
                bookingModal.value.hide()
                router.push({
                    path: '/customer/requests',
                    query: {
                        success: 'true',
                        message: 'Service request created successfully!'
                    }
                })
            } catch (err) {
                error.value = err.response?.data?.detail || 'Failed to create service request'
            } finally {
                isBooking.value = false
            }
        }

        onMounted(() => {
            fetchServices()
        })

        return {
            loading,
            services,
            searchQuery,
            pinCode,
            error,
            bookingModal,
            selectedService,
            bookingForm,
            isBooking,
            filteredServices,
            minDate,
            maxDate,
            openBookingModal,
            handleBooking
        }
    }
}
</script>

<style scoped>
.hover-shadow {
    transition: box-shadow 0.3s ease-in-out;
}

.hover-shadow:hover {
    box-shadow: 0 .5rem 1rem rgba(0, 0, 0, .15) !important;
}

.modal-dialog {
    max-width: 500px;
}
</style>

================
File: src/views/customer/ServiceRequests.vue
================
<!-- src/views/customer/ServiceRequests.vue -->
<template>
    <div class="container py-4">
        <!-- Success Alert -->
        <div v-if="showSuccessAlert" class="alert alert-success alert-dismissible fade show mb-4" role="alert">
            {{ successMessage }}
            <button type="button" class="btn-close" @click="showSuccessAlert = false"></button>
        </div>

        <!-- Stats Cards -->
        <div class="row g-4 mb-4">
            <div class="col-sm-6 col-lg-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-primary bg-opacity-10 p-3 rounded">
                                <i class="bi bi-clock fs-4 text-primary"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Pending</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.pending || 0 }}</h3>
                    </div>
                </div>
            </div>

            <div class="col-sm-6 col-lg-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-info bg-opacity-10 p-3 rounded">
                                <i class="bi bi-person-workspace fs-4 text-info"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Assigned</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.assigned || 0 }}</h3>
                    </div>
                </div>
            </div>

            <div class="col-sm-6 col-lg-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-success bg-opacity-10 p-3 rounded">
                                <i class="bi bi-check-circle fs-4 text-success"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Completed</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.completed || 0 }}</h3>
                    </div>
                </div>
            </div>

            <div class="col-sm-6 col-lg-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-warning bg-opacity-10 p-3 rounded">
                                <i class="bi bi-star fs-4 text-warning"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Reviews</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.reviews || 0 }}</h3>
                    </div>
                </div>
            </div>
        </div>

        <!-- Requests Table -->
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-white py-3">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">My Service Requests</h5>
                    <div class="d-flex gap-2">
                        <!-- Filter Dropdown -->
                        <div class="dropdown">
                            <button class="btn btn-outline-secondary dropdown-toggle" type="button"
                                data-bs-toggle="dropdown">
                                {{ selectedFilter === 'all' ? 'All Requests' :
                                    selectedFilter === 'created' ? 'Pending' :
                                        selectedFilter === 'assigned' ? 'Assigned' : 'Completed' }}
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="#" @click="selectedFilter = 'all'">All Requests</a>
                                </li>
                                <li><a class="dropdown-item" href="#" @click="selectedFilter = 'created'">Pending</a>
                                </li>
                                <li><a class="dropdown-item" href="#" @click="selectedFilter = 'assigned'">Assigned</a>
                                </li>
                                <li><a class="dropdown-item" href="#"
                                        @click="selectedFilter = 'completed'">Completed</a></li>
                            </ul>
                        </div>

                        <!-- Book New Service Button -->
                        <router-link to="/services" class="btn btn-primary">
                            <i class="bi bi-plus-lg me-1"></i>
                            Book New Service
                        </router-link>
                    </div>
                </div>
            </div>

            <div class="card-body p-0">
                <!-- Loading State -->
                <div v-if="loading" class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>

                <!-- Empty State -->
                <div v-else-if="filteredRequests.length === 0" class="text-center py-5">
                    <i class="bi bi-inbox fs-1 text-muted"></i>
                    <p class="mt-2 mb-0">No service requests found</p>
                    <router-link to="/services" class="btn btn-primary mt-3">
                        Book Your First Service
                    </router-link>
                </div>

                <!-- Requests Table -->
                <div v-else class="table-responsive">
                    <table class="table table-hover align-middle mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Service</th>
                                <th>Professional</th>
                                <th>Schedule</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="request in filteredRequests" :key="request.id">
                                <td>
                                    <div class="fw-medium">{{ request.service.name }}</div>
                                    <small class="text-muted d-block">
                                        {{ truncate(request.description, 50) }}
                                    </small>
                                </td>
                                <td>
                                    <div v-if="request.professional">
                                        {{ request.professional.user.full_name }}
                                        <div class="text-success small" v-if="request.professional.average_rating">
                                            <i class="bi bi-star-fill me-1"></i>
                                            {{ request.professional.average_rating.toFixed(1) }}
                                        </div>
                                    </div>
                                    <span v-else class="text-muted">Not assigned</span>
                                </td>
                                <td>
                                    <div>{{ formatDate(request.preferred_time) }}</div>
                                    <small class="text-muted">
                                        {{ formatTime(request.preferred_time) }}
                                    </small>
                                </td>
                                <td>
                                    <span :class="[
                                        'badge',
                                        {
                                            'bg-warning': request.status === 'created',
                                            'bg-primary': request.status === 'assigned',
                                            'bg-success': request.status === 'completed'
                                        }
                                    ]">
                                        {{ request.status }}
                                    </span>
                                </td>
                                <td>
                                    <div class="d-flex gap-2">
                                        <!-- Cancel button for pending requests -->
                                        <button v-if="request.status === 'created'"
                                            class="btn btn-sm btn-outline-danger" @click="handleCancel(request)"
                                            :disabled="cancelling === request.id">
                                            <span v-if="cancelling === request.id"
                                                class="spinner-border spinner-border-sm">
                                            </span>
                                            <span v-else>Cancel</span>
                                        </button>

                                        <!-- Review button for completed requests without review -->
                                        <button v-if="request.status === 'completed' && !request.review"
                                            class="btn btn-sm btn-outline-primary" @click="openReviewModal(request)">
                                            Add Review
                                        </button>

                                        <!-- View button for all requests -->
                                        <button class="btn btn-sm btn-outline-secondary"
                                            @click="openDetailsModal(request)">
                                            View
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Review Modal -->
        <div class="modal fade" id="reviewModal" tabindex="-1" ref="reviewModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add Review</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <form @submit.prevent="submitReview">
                        <div class="modal-body">
                            <div v-if="error" class="alert alert-danger">{{ error }}</div>

                            <div class="mb-3">
                                <label class="form-label d-block">Rating</label>
                                <div class="btn-group" role="group">
                                    <button v-for="n in 5" :key="n" type="button" class="btn"
                                        :class="reviewForm.rating >= n ? 'btn-warning' : 'btn-outline-warning'"
                                        @click="reviewForm.rating = n">
                                        <i class="bi bi-star-fill"></i>
                                    </button>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Comment</label>
                                <textarea class="form-control" v-model="reviewForm.comment" rows="3"
                                    placeholder="Share your experience..." required>
                                </textarea>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-primary"
                                :disabled="!reviewForm.rating || submittingReview">
                                <span v-if="submittingReview" class="spinner-border spinner-border-sm me-2"></span>
                                {{ submittingReview ? 'Submitting...' : 'Submit Review' }}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Details Modal -->
        <div class="modal fade" id="detailsModal" tabindex="-1" ref="detailsModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Request Details</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body" v-if="selectedRequest">
                        <div class="mb-4">
                            <h6>Service Information</h6>
                            <table class="table table-sm">
                                <tr>
                                    <th style="width: 150px">Service Type</th>
                                    <td>{{ selectedRequest.service.name }}</td>
                                </tr>
                                <tr>
                                    <th>Base Price</th>
                                    <td>₹{{ selectedRequest.service.base_price }}</td>
                                </tr>
                                <tr>
                                    <th>Status</th>
                                    <td>
                                        <span :class="[
                                            'badge',
                                            {
                                                'bg-warning': selectedRequest.status === 'created',
                                                'bg-primary': selectedRequest.status === 'assigned',
                                                'bg-success': selectedRequest.status === 'completed'
                                            }
                                        ]">
                                            {{ selectedRequest.status }}
                                        </span>
                                    </td>
                                </tr>
                            </table>
                        </div>

                        <div class="mb-4">
                            <h6>Schedule</h6>
                            <table class="table table-sm">
                                <tr>
                                    <th style="width: 150px">Date</th>
                                    <td>{{ formatDate(selectedRequest.preferred_time) }}</td>
                                </tr>
                                <tr>
                                    <th>Time</th>
                                    <td>{{ formatTime(selectedRequest.preferred_time) }}</td>
                                </tr>
                                <tr>
                                    <th>Duration</th>
                                    <td>{{ selectedRequest.service.estimated_time }} minutes</td>
                                </tr>
                            </table>
                        </div>

                        <div v-if="selectedRequest.professional" class="mb-4">
                            <h6>Professional</h6>
                            <table class="table table-sm">
                                <tr>
                                    <th style="width: 150px">Name</th>
                                    <td>{{ selectedRequest.professional.user.full_name }}</td>
                                </tr>
                                <tr>
                                    <th>Experience</th>
                                    <td>{{ selectedRequest.professional.experience_years }} years</td>
                                </tr>
                                <tr>
                                    <th>Rating</th>
                                    <td>
                                        <div class="text-warning">
                                            <i v-for="n in 5" :key="n"
                                                :class="['bi', n <= Math.round(selectedRequest.professional.average_rating || 0) ? 'bi-star-fill' : 'bi-star']">
                                            </i>
                                            <span class="text-dark ms-1">
                                                {{ selectedRequest.professional.average_rating?.toFixed(1) || "Not rated" }} 
                                            </span>
                                        </div>
                                    </td>
                                </tr>
                            </table>
                        </div>
                        <div class="mb-4">
                            <h6>Description</h6>
                            <p class="mb-0">{{ selectedRequest.description }}</p>
                        </div>

                        <div v-if="selectedRequest.status === 'completed'" class="mb-4">
                            <h6>Completion Details</h6>
                            <table class="table table-sm">
                                <tr>
                                    <th style="width: 150px">Completed On</th>
                                    <td>{{ formatDate(selectedRequest.date_of_completion) }}</td>
                                </tr>
                                <tr>
                                    <th>Remarks</th>
                                    <td>{{ selectedRequest.remarks || 'No remarks' }}</td>
                                </tr>
                            </table>
                        </div>

                        <div v-if="selectedRequest.review" class="mb-4">
                            <h6>Your Review</h6>
                            <div class="bg-light p-3 rounded">
                                <div class="text-warning mb-2">
                                    <i v-for="n in 5" :key="n"
                                        :class="['bi', n <= selectedRequest.review.rating ? 'bi-star-fill' : 'bi-star']">
                                    </i>
                                </div>
                                <p class="mb-1">{{ selectedRequest.review.comment }}</p>
                                <small class="text-muted">
                                    Posted on {{ formatDate(selectedRequest.review.created_at) }}
                                </small>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref, computed, onMounted } from 'vue'
import { Modal } from 'bootstrap'
import { useRoute } from 'vue-router'
import moment from 'moment'
import axios from 'axios'

export default {
    name: 'ServiceRequests',

    setup() {
        const route = useRoute()
        const loading = ref(true)
        const requests = ref([])
        const stats = ref({})
        const selectedFilter = ref('all')
        const error = ref('')
        const cancelling = ref(null)
        const selectedRequest = ref(null)
        const reviewModal = ref(null)
        const detailsModal = ref(null)
        const submittingReview = ref(false)
        const showSuccessAlert = ref(false)
        const successMessage = ref('')

        // Review form state
        const reviewForm = ref({
            rating: 0,
            comment: ''
        })

        // Show success message from query params
        onMounted(() => {
            if (route.query.success === 'true') {
                showSuccessAlert.value = true
                successMessage.value = route.query.message || 'Operation completed successfully!'
            }
            fetchRequests()
        })

        // Filter requests based on selected status
        const filteredRequests = computed(() => {
            if (selectedFilter.value === 'all') return requests.value
            return requests.value.filter(request => request.status === selectedFilter.value)
        })

        // Fetch requests from backend
        const fetchRequests = async () => {
            try {
                loading.value = true
                const [requestsResponse, statsResponse] = await Promise.all([
                    axios.get('/api/customer/requests'),
                    axios.get('/api/dashboard-stats')
                ])

                requests.value = requestsResponse.data.data
                stats.value = statsResponse.data.data.service_requests || {}
            } catch (err) {
                console.error('Error fetching requests:', err)
                error.value = 'Failed to load service requests'
            } finally {
                loading.value = false
            }
        }

        // Cancel a service request
        const handleCancel = async (request) => {
            if (!confirm('Are you sure you want to cancel this service request?')) return

            try {
                cancelling.value = request.id
                await axios.post(`/api/requests/${request.id}/cancel`)
                await fetchRequests()
                showSuccessAlert.value = true
                successMessage.value = 'Service request cancelled successfully'
            } catch (err) {
                error.value = err.response?.data?.detail || 'Failed to cancel request'
            } finally {
                cancelling.value = null
            }
        }

        // Open review modal
        const openReviewModal = (request) => {
            selectedRequest.value = request
            reviewForm.value = { rating: 0, comment: '' }
            error.value = ''

            if (!reviewModal.value) {
                reviewModal.value = new Modal(document.getElementById('reviewModal'))
            }
            reviewModal.value.show()
        }

        // Open details modal
        const openDetailsModal = (request) => {
            selectedRequest.value = request

            if (!detailsModal.value) {
                detailsModal.value = new Modal(document.getElementById('detailsModal'))
            }
            detailsModal.value.show()
        }

        // Submit review
        const submitReview = async () => {
            if (!selectedRequest.value || !reviewForm.value.rating) return

            try {
                submittingReview.value = true
                await axios.post(`/api/requests/${selectedRequest.value.id}/review`, reviewForm.value)
                await fetchRequests()
                reviewModal.value.hide()
                showSuccessAlert.value = true
                successMessage.value = 'Review submitted successfully'
            } catch (err) {
                error.value = err.response?.data?.detail || 'Failed to submit review'
            } finally {
                submittingReview.value = false
            }
        }

        // Utility functions
        const formatDate = (date) => moment(date).format('MMM D, YYYY')
        const formatTime = (date) => moment(date).format('h:mm A')
        const truncate = (str, length) => {
            if (!str) return ''
            return str.length > length ? str.substring(0, length) + '...' : str
        }

        return {
            loading,
            requests,
            stats,
            selectedFilter,
            error,
            cancelling,
            selectedRequest,
            reviewForm,
            submittingReview,
            showSuccessAlert,
            successMessage,
            filteredRequests,
            handleCancel,
            openReviewModal,
            openDetailsModal,
            submitReview,
            formatDate,
            formatTime,
            truncate
        }
    }
}
</script>

<style scoped>
.card {
    transition: box-shadow 0.3s ease-in-out;
}

.btn-group .btn {
    min-width: 40px;
}

.table> :not(:first-child) {
    border-top: none;
}
</style>

================
File: src/views/customer/ServiceSearch.vue
================
<!-- src/views/customer/ServiceSearch.vue -->
<template>
    <div class="container py-4">
        <h2>Search Services</h2>

        <div class="card shadow-sm mb-4">
            <div class="card-body">
                <form @submit.prevent="searchServices">
                    <div class="row g-3">
                        <div class="col-md-4">
                            <input type="text" class="form-control" v-model="searchQuery" placeholder="Search by name">
                        </div>
                        <div class="col-md-4">
                            <input type="text" class="form-control" v-model="pinCode" placeholder="Search by PIN code">
                        </div>
                        <div class="col-md-4">
                            <button type="submit" class="btn btn-primary">Search</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>

        <div v-if="loading" class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>

        <div v-else-if="services.length === 0" class="text-center">
            <p>No services found.</p>
        </div>

        <div v-else class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            <div v-for="service in services" :key="service.id" class="col">
                <div class="card h-100 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">{{ service.name }}</h5>
                        <p class="card-text">{{ service.description }}</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="text-muted">{{ service.estimated_time }} mins</span>
                            <span class="text-primary fw-bold">₹{{ service.base_price }}</span>
                        </div>
                    </div>
                    <div class="card-footer text-center">
                        <button class="btn btn-primary" @click="bookService(service)">Book Now</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref } from 'vue'
import axios from 'axios'

export default {
    name: 'ServiceSearch',

    setup() {
        const searchQuery = ref('')
        const pinCode = ref('')
        const services = ref([])
        const loading = ref(false)

        const searchServices = async () => {
            try {
                loading.value = true
                const response = await axios.get('/api/services', {
                    params: {
                        search: searchQuery.value,
                        pin_code: pinCode.value
                    }
                })
                services.value = response.data.data
            } catch (error) {
                console.error('Error searching services:', error)
            } finally {
                loading.value = false
            }
        }

        const bookService = (service) => {
            // Navigate to service booking page with selected service
            // You can use Vue Router to pass the service as a parameter
            // Example: router.push({ name: 'BookService', params: { service } })
        }

        return {
            searchQuery,
            pinCode,
            services,
            loading,
            searchServices,
            bookService
        }
    }
}
</script>

================
File: src/views/Login.vue
================
<template>
    <div class="login-view">
      <LoginForm />
    </div>
  </template>
  
  <script>
  import LoginForm from '../components/auth/LoginForm.vue';
  
  export default {
    components: {
      LoginForm,
    },
  };
  </script>

================
File: src/views/NotFound.vue
================
<template>
  <div class="min-vh-100 bg-light d-flex align-items-center justify-content-center py-12 px-4">
    <div class="text-center">
      <div class="card shadow-lg">
        <div class="card-body p-5">
          <!-- Warning Icon Container -->
          <div class="mx-auto d-flex align-items-center justify-content-center rounded-circle bg-danger bg-opacity-10"
            style="width: 96px; height: 96px;">
            <span style="font-size: 3rem;">⚠️</span>
          </div>

          <!-- Error Message -->
          <h2 class="mt-4 fw-bold">
            Oops! Page Not Found
          </h2>

          <p class="mt-3 text-muted fs-5">
            The page you're looking for doesn't exist or has been moved.
          </p>

          <!-- Home Button -->
          <div class="mt-4">
            <button @click="goHome" class="btn btn-primary d-inline-flex align-items-center gap-2">
              <i class="bi bi-house-fill"></i>
              Back to Home
            </button>
          </div>

          <!-- Error Code -->
          <div class="mt-4">
            <p class="text-muted small">
              Error Code: 404
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { useRouter } from 'vue-router';

export default {
  setup() {
    const router = useRouter();

    const goHome = () => {
      router.push('/');
    };

    return {
      goHome,
    };
  },
};
</script>

================
File: src/views/professional/Dashboard.vue
================
// frontend/src/views/professional/Dashboard.vue
<template>
    <div class="dashboard">
        <!-- Profile Status Alert -->
        <div v-if="!stats.profile_status?.is_verified" class="alert alert-warning alert-dismissible fade show mb-4"
            role="alert">
            <div class="d-flex align-items-center">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <div>
                    <strong>Account Pending Verification</strong>
                    <p class="mb-0">Your account is currently under review. You'll be notified once verified.</p>
                </div>
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>

        <!-- Stats Overview -->
        <div class="row g-4 mb-4">
            <div class="col-md-6 col-lg-3">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-primary bg-opacity-10 p-3 rounded">
                                <i class="bi bi-briefcase fs-4 text-primary"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Active Jobs</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.service_requests?.active || 0 }}</h3>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-lg-3">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-success bg-opacity-10 p-3 rounded">
                                <i class="bi bi-check-circle fs-4 text-success"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Completed Jobs</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.service_requests?.completed || 0 }}</h3>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-lg-3">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-info bg-opacity-10 p-3 rounded">
                                <i class="bi bi-star fs-4 text-info"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Average Rating</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">
                            {{ stats.reviews?.average_rating?.toFixed(1) || '0.0' }}
                            <small class="text-muted fs-6">/5</small>
                        </h3>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-lg-3">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-warning bg-opacity-10 p-3 rounded">
                                <i class="bi bi-bell fs-4 text-warning"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Available Requests</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ availableRequests.length }}</h3>
                    </div>
                </div>
            </div>
        </div>

        <div class="row g-4">
            <!-- Available Service Requests -->
            <div class="col-lg-8">
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-transparent border-0">
                        <div class="d-flex align-items-center justify-content-between">
                            <h5 class="mb-0">Available Service Requests</h5>
                            <router-link to="/professional/requests" class="btn btn-sm btn-primary">
                                View All
                            </router-link>
                        </div>
                    </div>
                    <div class="card-body">
                        <div v-if="loading" class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>

                        <div v-else-if="availableRequests.length === 0" class="text-center py-4">
                            <i class="bi bi-calendar-x fs-1 text-muted"></i>
                            <p class="mt-2 mb-0">No available service requests</p>
                        </div>

                        <div v-else class="table-responsive">
                            <table class="table table-hover align-middle">
                                <thead class="table-light">
                                    <tr>
                                        <th>Customer</th>
                                        <th>Location</th>
                                        <th>Preferred Time</th>
                                        <th>Description</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="request in availableRequests" :key="request.id">
                                        <td>{{ request.customer.user.full_name }}</td>
                                        <td>{{ request.customer.user.pin_code }}</td>
                                        <td>{{ formatDate(request.preferred_time) }}</td>
                                        <td>
                                            <span class="text-truncate d-inline-block" style="max-width: 200px;">
                                                {{ request.description }}
                                            </span>
                                        </td>
                                        <td>
                                            <button class="btn btn-sm btn-success" @click="acceptRequest(request.id)"
                                                :disabled="accepting === request.id">
                                                <span v-if="accepting === request.id"
                                                    class="spinner-border spinner-border-sm me-1">
                                                </span>
                                                Accept
                                            </button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- Active Jobs -->
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-transparent border-0">
                        <div class="d-flex align-items-center justify-content-between">
                            <h5 class="mb-0">Active Jobs</h5>
                            <router-link to="/professional/jobs" class="btn btn-sm btn-primary">
                                View All
                            </router-link>
                        </div>
                    </div>
                    <div class="card-body">
                        <div v-if="loading" class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>

                        <div v-else-if="activeJobs.length === 0" class="text-center py-4">
                            <i class="bi bi-briefcase fs-1 text-muted"></i>
                            <p class="mt-2 mb-0">No active jobs</p>
                        </div>

                        <div v-else class="table-responsive">
                            <table class="table table-hover align-middle">
                                <thead class="table-light">
                                    <tr>
                                        <th>Customer</th>
                                        <th>Service</th>
                                        <th>Schedule</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="job in activeJobs" :key="job.id">
                                        <td>{{ job.customer.user.full_name }}</td>
                                        <td>{{ job.service.name }}</td>
                                        <td>{{ formatDate(job.preferred_time) }}</td>
                                        <td>
                                            <span class="badge bg-primary">{{ job.status }}</span>
                                        </td>
                                        <td>
                                            <button class="btn btn-sm btn-success me-2" @click="openCompleteModal(job)">
                                                Complete
                                            </button>
                                            <button class="btn btn-sm btn-outline-primary" @click="viewDetails(job)">
                                                Details
                                            </button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Side Section -->
            <div class="col-lg-4">
                <!-- Professional Profile Card -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-body">
                        <div class="text-center mb-4">
                            <div class="avatar mb-3">
                                <i class="bi bi-person-circle display-1 text-primary"></i>
                            </div>
                            <h5 class="mb-1">{{ user.full_name }}</h5>
                            <p class="text-muted mb-2">{{ user.service_type }}</p>
                            <div class="rating text-warning">
                                <i v-for="n in 5" :key="n"
                                    :class="['bi', n <= Math.round(stats.reviews?.average_rating || 0) ? 'bi-star-fill' : 'bi-star']">
                                </i>
                                <span class="ms-2 text-muted">
                                    ({{ stats.reviews?.total || 0 }} reviews)
                                </span>
                            </div>
                        </div>

                        <div class="border-top pt-3">
                            <div class="row text-center">
                                <div class="col">
                                    <h6 class="mb-1">{{ stats.service_requests?.total || 0 }}</h6>
                                    <small class="text-muted">Total Jobs</small>
                                </div>
                                <div class="col border-start">
                                    <h6 class="mb-1">{{ stats.service_requests?.completed || 0 }}</h6>
                                    <small class="text-muted">Completed</small>
                                </div>
                                <div class="col border-start">
                                    <h6 class="mb-1">{{ user.experience_years }}</h6>
                                    <small class="text-muted">Years Exp.</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Recent Reviews -->
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-transparent border-0">
                        <h5 class="mb-0">Recent Reviews</h5>
                    </div>
                    <div class="card-body">
                        <div v-if="loading" class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>

                        <div v-else-if="recentReviews.length === 0" class="text-center py-4">
                            <i class="bi bi-star fs-1 text-muted"></i>
                            <p class="mt-2 mb-0">No reviews yet</p>
                        </div>

                        <div v-else class="reviews-list">
                            <div v-for="review in recentReviews" :key="review.id"
                                class="review-item mb-3 p-3 bg-light rounded">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <div class="rating text-warning">
                                        <i v-for="n in 5" :key="n"
                                            :class="['bi', n <= review.rating ? 'bi-star-fill' : 'bi-star']">
                                        </i>
                                    </div>
                                    <small class="text-muted">
                                        {{ formatDate(review.created_at) }}
                                    </small>
                                </div>
                                <p class="mb-1">{{ review.comment }}</p>
                                <small class="text-muted">
                                    By: {{ review.service_request.customer.user.full_name }}
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Complete Job Modal -->
        <div class="modal fade" id="completeModal" tabindex="-1" ref="completeModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Complete Service</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form @submit.prevent="completeJob">
                            <div class="mb-3">
                                <label class="form-label">Completion Remarks</label>
                                <textarea v-model="completionForm.remarks" class="form-control" rows="3"
                                    placeholder="Describe the completed work..." required></textarea>
                            </div>
                            <div class="text-end">
                                <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">
                                    Cancel
                                </button>
                                <button type="submit" class="btn btn-success" :disabled="completing">
                                    <span v-if="completing" class="spinner-border spinner-border-sm me-1"></span>
                                    Mark as Complete
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref, reactive, onMounted, computed } from 'vue'
import { useStore } from 'vuex'
import { Modal } from 'bootstrap'
import moment from 'moment'
import axios from 'axios'

export default {
    name: 'ProfessionalDashboard',

    setup() {
        const store = useStore()
        const loading = ref(true)
        const stats = ref({})
        const availableRequests = ref([])
        const activeJobs = ref([])
        const recentReviews = ref([])
        const accepting = ref(null)
        const completing = ref(false)
        const completeModal = ref(null)
        const selectedJob = ref(null)

        const user = computed(() => store.getters['auth/getUser'])

        const completionForm = reactive({
            remarks: ''
        })

        // Fetch dashboard data
        const fetchDashboardData = async () => {
            try {
                loading.value = true
                const [statsRes, requestsRes, jobsRes, reviewsRes] = await Promise.all([
                    axios.get('/api/professional/requests?type=active'),
                    axios.get('/api/professional/reviews?per_page=3')
                ])

                stats.value = statsRes.data.data
                availableRequests.value = requestsRes.data.data
                activeJobs.value = jobsRes.data.data
                recentReviews.value = reviewsRes.data.data
            } catch (error) {
                console.error('Error fetching dashboard data:', error)
            } finally {
                loading.value = false
            }
        }

        const acceptRequest = async (requestId) => {
            try {
                accepting.value = requestId
                await axios.post(`/api/requests/${requestId}/accept`)
                await fetchDashboardData()
            } catch (error) {
                console.error('Error accepting request:', error)
            } finally {
                accepting.value = null
            }
        }

        const openCompleteModal = (job) => {
            selectedJob.value = job
            completionForm.remarks = ''
            const modal = new Modal(completeModal.value)
            modal.show()
        }

        const completeJob = async () => {
            if (!selectedJob.value || !completionForm.remarks.trim()) return

            try {
                completing.value = true
                await axios.post(`/api/requests/${selectedJob.value.id}/complete`, completionForm)
                const modal = Modal.getInstance(completeModal.value)
                modal.hide()
                await fetchDashboardData()
            } catch (error) {
                console.error('Error completing job:', error)
            } finally {
                completing.value = false
            }
        }

        const viewDetails = (job) => {
            // Implement job details view navigation
            router.push(`/professional/jobs/${job.id}`)
        }

        const formatDate = (date) => {
            return moment(date).format('MMM D, YYYY h:mm A')
        }

        onMounted(() => {
            fetchDashboardData()
        })

        return {
            user,
            loading,
            stats,
            availableRequests,
            activeJobs,
            recentReviews,
            accepting,
            completing,
            completeModal,
            completionForm,
            acceptRequest,
            openCompleteModal,
            completeJob,
            viewDetails,
            formatDate
        }
    }
}
</script>

<style scoped>
.dashboard {
    padding: 1.5rem;
}

.card {
    transition: transform 0.2s;
}

.card:hover {
    transform: translateY(-2px);
}

.avatar {
    width: 100px;
    height: 100px;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
}

.rating i {
    cursor: default;
    margin-right: 2px;
}

.reviews-list {
    max-height: 400px;
    overflow-y: auto;
}

.review-item:hover {
    background-color: #f0f0f0 !important;
}

/* Custom scrollbar for reviews list */
.reviews-list::-webkit-scrollbar {
    width: 6px;
}

.reviews-list::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
}

.reviews-list::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 10px;
}

.reviews-list::-webkit-scrollbar-thumb:hover {
    background: #555;
}
</style>

================
File: src/views/professional/ProfessionalDashboard.vue
================
# src/views/professional/ProfessionalDashboard.vue
<template>
    <div class="container-fluid py-4">
        <!-- Stats Cards Row -->
        <div class="row g-4 mb-4">
            <!-- Earnings Card -->
            <div class="col-md-6 col-lg-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-primary bg-opacity-10 p-3 rounded-circle">
                                <i class="bi bi-currency-rupee fs-4 text-primary"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Total Earnings</h6>
                                <h3 class="mb-0">₹{{ stats.earnings?.total || 0 }}</h3>
                            </div>
                        </div>
                        <div class="progress" style="height: 4px;">
                            <div class="progress-bar" :style="{ width: earningsProgress + '%' }" role="progressbar">
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Requests Card -->
            <div class="col-md-6 col-lg-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-success bg-opacity-10 p-3 rounded-circle">
                                <i class="bi bi-list-check fs-4 text-success"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Active Requests</h6>
                                <h3 class="mb-0">{{ stats.requests?.active || 0 }}</h3>
                            </div>
                        </div>
                        <div class="progress" style="height: 4px;">
                            <div class="progress-bar bg-success" :style="{ width: requestProgress + '%' }"
                                role="progressbar"></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Rating Card -->
            <div class="col-md-6 col-lg-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-warning bg-opacity-10 p-3 rounded-circle">
                                <i class="bi bi-star fs-4 text-warning"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Average Rating</h6>
                                <h3 class="mb-0">{{ stats.rating?.average || 0 }}/5</h3>
                            </div>
                        </div>
                        <div class="d-flex align-items-center">
                            <div class="rating text-warning me-2">
                                <i v-for="n in 5" :key="n" class="bi"
                                    :class="n <= (stats.rating?.average || 0) ? 'bi-star-fill' : 'bi-star'"></i>
                            </div>
                            <small class="text-muted">({{ stats.rating?.total || 0 }} reviews)</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Completion Rate Card -->
            <div class="col-md-6 col-lg-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-info bg-opacity-10 p-3 rounded-circle">
                                <i class="bi bi-check-circle fs-4 text-info"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Completion Rate</h6>
                                <h3 class="mb-0">{{ completionRate }}%</h3>
                            </div>
                        </div>
                        <div class="progress" style="height: 4px;">
                            <div class="progress-bar bg-info" :style="{ width: completionRate + '%' }"
                                role="progressbar"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Row -->
        <div class="row g-4 mb-4">
            <!-- Earnings Chart -->
            <div class="col-lg-8">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-transparent">
                        <h5 class="mb-0">Earnings Overview</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="earningsChart" ref="earningsChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Request Distribution -->
            <div class="col-lg-4">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-transparent">
                        <h5 class="mb-0">Request Distribution</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="requestsChart" ref="requestsChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Activities Row -->
        <div class="row g-4">
            <!-- Today's Schedule -->
            <div class="col-lg-6">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-transparent d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Today's Schedule</h5>
                        <button class="btn btn-sm btn-outline-primary">View All</button>
                    </div>
                    <div class="card-body p-0">
                        <div v-if="!todaySchedule.length" class="text-center py-4">
                            <i class="bi bi-calendar2-check fs-1 text-muted"></i>
                            <p class="mt-2 mb-0">No appointments scheduled for today</p>
                        </div>
                        <div v-else class="list-group list-group-flush">
                            <div v-for="appointment in todaySchedule" :key="appointment.id" class="list-group-item">
                                <div class="d-flex align-items-center">
                                    <div class="bg-light rounded-circle p-3 me-3">
                                        <i class="bi bi-clock text-primary"></i>
                                    </div>
                                    <div class="flex-grow-1">
                                        <h6 class="mb-0">{{ appointment.customer_name }}</h6>
                                        <p class="text-muted mb-0 small">
                                            {{ formatTime(appointment.scheduled_time) }} - {{ appointment.service }}
                                        </p>
                                    </div>
                                    <button class="btn btn-sm btn-outline-primary">Details</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Recent Reviews -->
            <div class="col-lg-6">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-transparent d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Recent Reviews</h5>
                        <button class="btn btn-sm btn-outline-primary">View All</button>
                    </div>
                    <div class="card-body p-0">
                        <div v-if="!recentReviews.length" class="text-center py-4">
                            <i class="bi bi-star fs-1 text-muted"></i>
                            <p class="mt-2 mb-0">No reviews yet</p>
                        </div>
                        <div v-else class="list-group list-group-flush">
                            <div v-for="review in recentReviews" :key="review.id" class="list-group-item">
                                <div class="d-flex align-items-start">
                                    <div class="flex-grow-1">
                                        <div class="d-flex align-items-center mb-1">
                                            <div class="rating text-warning me-2">
                                                <i v-for="n in 5" :key="n" class="bi"
                                                    :class="n <= review.rating ? 'bi-star-fill' : 'bi-star'"></i>
                                            </div>
                                            <small class="text-muted">{{ formatDate(review.created_at) }}</small>
                                        </div>
                                        <p class="mb-1">{{ review.comment }}</p>
                                        <small class="text-muted">{{ review.customer_name }}</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref, onMounted, computed } from 'vue';
import Chart from 'chart.js/auto';
import moment from 'moment';

export default {
    name: 'ProfessionalDashboard',

    setup() {
        const earningsChart = ref(null);
        const requestsChart = ref(null);
        const stats = ref({
            earnings: {
                total: 15000,
                monthly: [12000, 13500, 15000, 14000, 15000, 16000],
                target: 20000
            },
            requests: {
                active: 5,
                completed: 45,
                cancelled: 2,
                total: 52
            },
            rating: {
                average: 4.5,
                total: 40
            }
        });

        const todaySchedule = ref([
            {
                id: 1,
                customer_name: 'John Doe',
                service: 'AC Repair',
                scheduled_time: '2024-03-29T10:00:00'
            },
            {
                id: 2,
                customer_name: 'Jane Smith',
                service: 'AC Maintenance',
                scheduled_time: '2024-03-29T14:00:00'
            }
        ]);

        const recentReviews = ref([
            {
                id: 1,
                customer_name: 'Mike Johnson',
                rating: 5,
                comment: 'Excellent service! Very professional and on time.',
                created_at: '2024-03-28T15:30:00'
            },
            {
                id: 2,
                customer_name: 'Sarah Wilson',
                rating: 4,
                comment: 'Good service, would recommend.',
                created_at: '2024-03-27T11:20:00'
            }
        ]);

        // Computed Properties
        const completionRate = computed(() => {
            const { completed, total } = stats.value.requests;
            return total ? Math.round((completed / total) * 100) : 0;
        });

        const earningsProgress = computed(() => {
            const { total, target } = stats.value.earnings;
            return Math.min(Math.round((total / target) * 100), 100);
        });

        const requestProgress = computed(() => {
            const { active, total } = stats.value.requests;
            return total ? Math.round((active / total) * 100) : 0;
        });

        // Methods
        const initCharts = () => {
            // Earnings Chart
            if (earningsChart.value) {
                new Chart(earningsChart.value, {
                    type: 'line',
                    data: {
                        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
                        datasets: [{
                            label: 'Monthly Earnings',
                            data: stats.value.earnings.monthly,
                            borderColor: '#0d6efd',
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'top',
                            }
                        }
                    }
                });
            }

            // Requests Chart
            if (requestsChart.value) {
                new Chart(requestsChart.value, {
                    type: 'doughnut',
                    data: {
                        labels: ['Active', 'Completed', 'Cancelled'],
                        datasets: [{
                            data: [
                                stats.value.requests.active,
                                stats.value.requests.completed,
                                stats.value.requests.cancelled
                            ],
                            backgroundColor: ['#0d6efd', '#198754', '#dc3545']
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'bottom'
                            }
                        }
                    }
                });
            }
        };

        const formatTime = (time) => {
            return moment(time).format('h:mm A');
        };

        const formatDate = (date) => {
            return moment(date).fromNow();
        };

        // Lifecycle Hooks
        onMounted(() => {
            initCharts();
        });

        return {
            stats,
            todaySchedule,
            recentReviews,
            earningsChart,
            requestsChart,
            completionRate,
            earningsProgress,
            requestProgress,
            formatTime,
            formatDate
        };
    }
};
</script>

<style scoped>
.rating i {
    font-size: 0.875rem;
}

.card {
    transition: transform 0.2s ease-in-out;
}

.card:hover {
    transform: translateY(-2px);
}

.progress {
    border-radius: 2px;
}

.progress-bar {
    transition: width 1s ease-in-out;
}

.list-group-item {
    transition: background-color 0.2s ease-in-out;
}

.list-group-item:hover {
    background-color: #f8f9fa;
}
</style>

================
File: src/views/professional/ServiceRequestManagement.vue
================
# src/views/professional/ServiceRequestManagement.vue
<template>
    <div class="container-fluid py-4">
        <!-- Status Tabs -->
        <ul class="nav nav-tabs mb-4">
            <li class="nav-item" v-for="tab in tabs" :key="tab.value">
                <button class="nav-link" :class="{ active: activeTab === tab.value }" @click="activeTab = tab.value">
                    {{ tab.label }}
                    <span v-if="requestCounts[tab.value]" class="badge bg-primary ms-2">
                        {{ requestCounts[tab.value] }}
                    </span>
                </button>
            </li>
        </ul>

        <!-- Loading State -->
        <div v-if="loading" class="text-center py-5">
            <div class="spinner-border text-primary">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>

        <!-- Error Alert -->
        <div v-else-if="error" class="alert alert-danger alert-dismissible fade show" role="alert">
            {{ error }}
            <button type="button" class="btn-close" @click="error = null"></button>
        </div>

        <!-- Empty State -->
        <div v-else-if="!filteredRequests.length" class="text-center py-5">
            <i class="bi bi-inbox fs-1 text-muted"></i>
            <p class="mt-2 mb-0">No {{ activeTab }} requests found</p>
        </div>

        <!-- Request Cards -->
        <div v-else class="row g-4">
            <div v-for="request in filteredRequests" :key="request.id" class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <!-- Customer Info -->
                            <div class="col-md-3">
                                <div class="d-flex align-items-center">
                                    <div class="bg-light rounded-circle p-3 me-3">
                                        <i class="bi bi-person fs-4"></i>
                                    </div>
                                    <div>
                                        <h6 class="mb-1">{{ request.customer.full_name }}</h6>
                                        <p class="text-muted mb-0">
                                            <i class="bi bi-telephone me-1"></i>
                                            {{ request.customer.phone }}
                                        </p>
                                    </div>
                                </div>
                            </div>

                            <!-- Service Details -->
                            <div class="col-md-3">
                                <h6 class="text-muted mb-1">Service Type</h6>
                                <p class="mb-0">{{ request.service.name }}</p>
                            </div>

                            <!-- Schedule -->
                            <div class="col-md-3">
                                <h6 class="text-muted mb-1">Schedule</h6>
                                <p class="mb-0">
                                    <i class="bi bi-calendar me-1"></i>
                                    {{ formatDate(request.preferred_time) }}
                                </p>
                                <p class="mb-0">
                                    <i class="bi bi-clock me-1"></i>
                                    {{ formatTime(request.preferred_time) }}
                                </p>
                            </div>

                            <!-- Actions -->
                            <div class="col-md-3 text-md-end mt-3 mt-md-0">
                                <button v-if="activeTab === 'pending'" class="btn btn-success me-2"
                                    @click="handleAccept(request.id)" :disabled="processing === request.id">
                                    <span v-if="processing === request.id"
                                        class="spinner-border spinner-border-sm me-2"></span>
                                    Accept
                                </button>
                                <button v-if="activeTab === 'pending'" class="btn btn-danger"
                                    @click="handleReject(request.id)" :disabled="processing === request.id">
                                    Reject
                                </button>
                                <button v-if="activeTab === 'active'" class="btn btn-primary"
                                    @click="openCompleteModal(request)" :disabled="processing === request.id">
                                    Complete
                                </button>
                                <button v-if="activeTab === 'completed'" class="btn btn-outline-primary"
                                    @click="viewDetails(request)">
                                    View Details
                                </button>
                            </div>
                        </div>

                        <!-- Additional Details (Description) -->
                        <div class="mt-3">
                            <h6 class="text-muted mb-2">Description</h6>
                            <p class="mb-0">{{ request.description }}</p>
                        </div>

                        <!-- Review Info (for completed requests) -->
                        <div v-if="request.review" class="mt-3 border-top pt-3">
                            <div class="d-flex align-items-center">
                                <div class="rating text-warning me-2">
                                    <i v-for="n in 5" :key="n" class="bi"
                                        :class="n <= request.review.rating ? 'bi-star-fill' : 'bi-star'">
                                    </i>
                                </div>
                                <p class="mb-0">{{ request.review.comment }}</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Complete Service Modal -->
        <div class="modal fade" id="completeModal" tabindex="-1" ref="completeModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Complete Service Request</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form @submit.prevent="handleComplete">
                            <div class="mb-3">
                                <label class="form-label">Completion Remarks</label>
                                <textarea v-model="completionRemarks" class="form-control" rows="3"
                                    placeholder="Describe the work completed..." required>
                </textarea>
                            </div>
                            <div class="text-end">
                                <button type="button" class="btn btn-secondary me-2"
                                    data-bs-dismiss="modal">Cancel</button>
                                <button type="submit" class="btn btn-primary" :disabled="processing">
                                    <span v-if="processing" class="spinner-border spinner-border-sm me-2"></span>
                                    Complete Service
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref, computed, onMounted } from 'vue';
import { Modal } from 'bootstrap';
import moment from 'moment';

export default {
    name: 'ServiceRequestManagement',

    setup() {
        const activeTab = ref('pending');
        const loading = ref(true);
        const error = ref(null);
        const processing = ref(null);
        const completeModal = ref(null);
        const completionRemarks = ref('');
        const selectedRequest = ref(null);

        const tabs = [
            { label: 'Pending Requests', value: 'pending' },
            { label: 'Active Requests', value: 'active' },
            { label: 'Completed', value: 'completed' }
        ];

        const requests = ref({
            pending: [],
            active: [],
            completed: []
        });

        const requestCounts = computed(() => ({
            pending: requests.value.pending.length,
            active: requests.value.active.length,
            completed: requests.value.completed.length
        }));

        const filteredRequests = computed(() => {
            return requests.value[activeTab.value] || [];
        });

        // Fetch requests from API
        const fetchRequests = async () => {
            try {
                loading.value = true;
                error.value = null;

                // Replace with actual API call
                await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API delay

                requests.value = {
                    pending: [
                        {
                            id: 1,
                            customer: {
                                full_name: 'John Doe',
                                phone: '9876543210'
                            },
                            service: {
                                name: 'AC Repair'
                            },
                            preferred_time: new Date('2024-03-30T10:00:00'),
                            description: 'AC not cooling properly'
                        }
                    ],
                    active: [
                        {
                            id: 2,
                            customer: {
                                full_name: 'Jane Smith',
                                phone: '9876543211'
                            },
                            service: {
                                name: 'AC Installation'
                            },
                            preferred_time: new Date('2024-03-29T14:00:00'),
                            description: 'New AC installation'
                        }
                    ],
                    completed: [
                        {
                            id: 3,
                            customer: {
                                full_name: 'Mike Johnson',
                                phone: '9876543212'
                            },
                            service: {
                                name: 'AC Maintenance'
                            },
                            preferred_time: new Date('2024-03-28T11:00:00'),
                            description: 'Regular maintenance',
                            review: {
                                rating: 5,
                                comment: 'Excellent service!'
                            }
                        }
                    ]
                };
            } catch (err) {
                error.value = 'Failed to load service requests';
                console.error('Error fetching requests:', err);
            } finally {
                loading.value = false;
            }
        };

        const handleAccept = async (requestId) => {
            try {
                processing.value = requestId;
                // Replace with actual API call
                await new Promise(resolve => setTimeout(resolve, 1000));

                // Move request from pending to active
                const request = requests.value.pending.find(r => r.id === requestId);
                requests.value.pending = requests.value.pending.filter(r => r.id !== requestId);
                requests.value.active.push(request);

                window.showToast({
                    type: 'success',
                    title: 'Success',
                    message: 'Request accepted successfully'
                });
            } catch (err) {
                error.value = 'Failed to accept request';
                console.error('Error accepting request:', err);
            } finally {
                processing.value = null;
            }
        };

        const handleReject = async (requestId) => {
            try {
                processing.value = requestId;
                // Replace with actual API call
                await new Promise(resolve => setTimeout(resolve, 1000));

                requests.value.pending = requests.value.pending.filter(r => r.id !== requestId);

                window.showToast({
                    type: 'success',
                    title: 'Success',
                    message: 'Request rejected successfully'
                });
            } catch (err) {
                error.value = 'Failed to reject request';
                console.error('Error rejecting request:', err);
            } finally {
                processing.value = null;
            }
        };

        const openCompleteModal = (request) => {
            selectedRequest.value = request;
            completionRemarks.value = '';
            const modal = new Modal(completeModal.value);
            modal.show();
        };

        const handleComplete = async () => {
            if (!selectedRequest.value || !completionRemarks.value.trim()) return;

            try {
                processing.value = selectedRequest.value.id;
                // Replace with actual API call
                await new Promise(resolve => setTimeout(resolve, 1000));

                const request = requests.value.active.find(r => r.id === selectedRequest.value.id);
                requests.value.active = requests.value.active.filter(r => r.id !== selectedRequest.value.id);
                requests.value.completed.push({
                    ...request,
                    remarks: completionRemarks.value
                });

                const modal = Modal.getInstance(completeModal.value);
                modal.hide();

                window.showToast({
                    type: 'success',
                    title: 'Success',
                    message: 'Service completed successfully'
                });
            } catch (err) {
                error.value = 'Failed to complete service';
                console.error('Error completing service:', err);
            } finally {
                processing.value = null;
                selectedRequest.value = null;
            }
        };

        const viewDetails = (request) => {
            // Implement view details functionality
            console.log('View details:', request);
        };

        const formatDate = (date) => {
            return moment(date).format('MMM D, YYYY');
        };

        const formatTime = (date) => {
            return moment(date).format('h:mm A');
        };

        onMounted(() => {
            fetchRequests();
        });

        return {
            activeTab,
            tabs,
            loading,
            error,
            processing,
            requests,
            completeModal,
            completionRemarks,
            requestCounts,
            filteredRequests,
            handleAccept,
            handleReject,
            openCompleteModal,
            handleComplete,
            viewDetails,
            formatDate,
            formatTime
        };
    }
};
</script>

<style scoped>
.nav-tabs .nav-link {
    color: #6c757d;
    cursor: pointer;
}

.nav-tabs .nav-link.active {
    color: #0d6efd;
    font-weight: 500;
}

.card {
    transition: transform 0.2s;
}

.card:hover {
    transform: translateY(-2px);
}

.rating i {
    font-size: 0.875rem;
    margin-right: 2px;
}
</style>

================
File: src/views/professional/ServiceRequests.vue
================
<!-- src/views/professional/ServiceRequests.vue -->
<template>
    <div class="container py-4">
        <!-- Success Alert -->
        <div v-if="showSuccessAlert" class="alert alert-success alert-dismissible fade show mb-4" role="alert">
            {{ successMessage }}
            <button type="button" class="btn-close" @click="showSuccessAlert = false"></button>
        </div>

        <!-- Stats Overview -->
        <div class="row g-4 mb-4">
            <div class="col-sm-6 col-lg-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-primary bg-opacity-10 p-3 rounded">
                                <i class="bi bi-briefcase fs-4 text-primary"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Active Jobs</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.service_requests?.active || 0 }}</h3>
                    </div>
                </div>
            </div>

            <div class="col-sm-6 col-lg-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-success bg-opacity-10 p-3 rounded">
                                <i class="bi bi-check-circle fs-4 text-success"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Completed</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ stats.service_requests?.completed || 0 }}</h3>
                    </div>
                </div>
            </div>

            <div class="col-sm-6 col-lg-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-info bg-opacity-10 p-3 rounded">
                                <i class="bi bi-star fs-4 text-info"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Rating</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">
                            {{ stats.reviews?.average_rating?.toFixed(1) || '0.0' }}
                            <small class="text-muted fs-6">/5</small>
                        </h3>
                    </div>
                </div>
            </div>

            <div class="col-sm-6 col-lg-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-warning bg-opacity-10 p-3 rounded">
                                <i class="bi bi-bell fs-4 text-warning"></i>
                            </div>
                            <div class="ms-3">
                                <h6 class="mb-0">Available</h6>
                            </div>
                        </div>
                        <h3 class="mb-0">{{ availableRequests.length }}</h3>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tabs -->
        <ul class="nav nav-tabs mb-4">
            <li class="nav-item">
                <a class="nav-link" :class="{ active: activeTab === 'available' }" href="#"
                    @click.prevent="activeTab = 'available'">
                    Available Requests
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" :class="{ active: activeTab === 'active' }" href="#"
                    @click.prevent="activeTab = 'active'">
                    Active Jobs
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" :class="{ active: activeTab === 'completed' }" href="#"
                    @click.prevent="activeTab = 'completed'">
                    Completed
                </a>
            </li>
        </ul>

        <!-- Content Area -->
        <div class="card border-0 shadow-sm">
            <!-- Available Requests Tab -->
            <div v-show="activeTab === 'available'" class="card-body p-0">
                <div v-if="loading" class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>

                <div v-else-if="availableRequests.length === 0" class="text-center py-5">
                    <i class="bi bi-inbox fs-1 text-muted"></i>
                    <p class="mt-2 mb-0">No available service requests</p>
                </div>

                <div v-else class="table-responsive">
                    <table class="table table-hover align-middle mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Customer</th>
                                <th>Location</th>
                                <th>Schedule</th>
                                <th>Description</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="request in availableRequests" :key="request.id">
                                <td>
                                    {{ request.customer.user.full_name }}
                                    <small class="text-muted d-block">
                                        {{ request.customer.user.phone }}
                                    </small>
                                </td>
                                <td>{{ request.customer.user.pin_code }}</td>
                                <td>
                                    <div>{{ formatDate(request.preferred_time) }}</div>
                                    <small class="text-muted">
                                        {{ formatTime(request.preferred_time) }}
                                    </small>
                                </td>
                                <td>
                                    <span class="text-truncate d-inline-block" style="max-width: 200px;">
                                        {{ request.description }}
                                    </span>
                                </td>
                                <td>
                                    <div class="d-flex gap-2">
                                        <button class="btn btn-sm btn-success" @click="handleAccept(request)"
                                            :disabled="accepting === request.id">
                                            <span v-if="accepting === request.id"
                                                class="spinner-border spinner-border-sm me-1">
                                            </span>
                                            Accept
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary"
                                            @click="openDetailsModal(request)">
                                            View
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Active Jobs Tab -->
            <div v-show="activeTab === 'active'" class="card-body p-0">
                <div v-if="loading" class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>

                <div v-else-if="activeJobs.length === 0" class="text-center py-5">
                    <i class="bi bi-briefcase fs-1 text-muted"></i>
                    <p class="mt-2 mb-0">No active jobs</p>
                </div>

                <div v-else class="table-responsive">
                    <table class="table table-hover align-middle mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Customer</th>
                                <th>Service</th>
                                <th>Schedule</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="job in activeJobs" :key="job.id">
                                <td>
                                    {{ job.customer.user.full_name }}
                                    <small class="text-muted d-block">
                                        {{ job.customer.user.phone }}
                                    </small>
                                </td>
                                <td>{{ job.service.name }}</td>
                                <td>
                                    <div>{{ formatDate(job.preferred_time) }}</div>
                                    <small class="text-muted">
                                        {{ formatTime(job.preferred_time) }}
                                    </small>
                                </td>
                                <td>
                                    <span class="badge bg-primary">{{ job.status }}</span>
                                </td>
                                <td>
                                    <div class="d-flex gap-2">
                                        <button class="btn btn-sm btn-success" @click="openCompleteModal(job)">
                                            Complete
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary" @click="openDetailsModal(job)">
                                            View
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Completed Jobs Tab -->
            <div v-show="activeTab === 'completed'" class="card-body p-0">
                <div v-if="loading" class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>

                <div v-else-if="completedJobs.length === 0" class="text-center py-5">
                    <i class="bi bi-check-circle fs-1 text-muted"></i>
                    <p class="mt-2 mb-0">No completed jobs</p>
                </div>

                <div v-else class="table-responsive">
                    <table class="table table-hover align-middle mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Customer</th>
                                <th>Service</th>
                                <th>Completed On</th>
                                <th>Review</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="job in completedJobs" :key="job.id">
                                <td>
                                    {{ job.customer.user.full_name }}
                                    <small class="text-muted d-block">
                                        {{ job.customer.user.phone }}
                                    </small>
                                </td>
                                <td>{{ job.service.name }}</td>
                                <td>
                                    {{ formatDate(job.date_of_completion) }}
                                </td>
                                <td>
                                    <div v-if="job.review" class="text-warning">
                                        <i v-for="n in 5" :key="n"
                                            :class="['bi', n <= job.review.rating ? 'bi-star-fill' : 'bi-star']">
                                        </i>
                                    </div>
                                    <span v-else class="text-muted">No review yet</span>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-outline-secondary" @click="openDetailsModal(job)">
                                        View
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Complete Job Modal -->
        <div class="modal fade" id="completeModal" tabindex="-1" ref="completeModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Complete Service</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <form @submit.prevent="handleComplete">
                        <div class="modal-body">
                            <div v-if="error" class="alert alert-danger">{{ error }}</div>

                            <div class="mb-3">
                                <label class="form-label">Service Remarks</label>
                                <textarea class="form-control" v-model="completionForm.remarks" rows="3"
                                    placeholder="Describe the completed work..." required>
                                </textarea>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-success" :disabled="completing">
                                <span v-if="completing" class="spinner-border spinner-border-sm me-2"></span>
                                {{ completing ? 'Completing...' : 'Mark as Complete' }}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Details Modal -->
        <div class="modal fade" id="detailsModal" tabindex="-1" ref="detailsModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Request Details</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body" v-if="selectedRequest">
                        <div class="mb-4">
                            <h6>Service Information</h6>
                            <table class="table table-sm">
                                <tr>
                                    <th style="width: 150px">Service Type</th>
                                    <td>{{ selectedRequest.service.name }}</td>
                                </tr>
                                <tr>
                                    <th>Base Price</th>
                                    <td>₹{{ selectedRequest.service.base_price }}</td>
                                </tr>
                                <tr>
                                    <th>Status</th>
                                    <td>
                                        <span :class="[
                                            'badge',
                                            {
                                                'bg-warning': selectedRequest.status === 'created',
                                                'bg-primary': selectedRequest.status === 'assigned',
                                                'bg-success': selectedRequest.status === 'completed'
                                            }
                                        ]">
                                            {{ selectedRequest.status }}
                                        </span>
                                    </td>
                                </tr>
                            </table>
                        </div>

                        <div class="mb-4">
                            <h6>Customer Information</h6>
                            <table class="table table-sm">
                                <tr>
                                    <th style="width: 150px">Name</th>
                                    <td>{{ selectedRequest.customer.user.full_name }}</td>
                                </tr>
                                <tr>
                                    <th>Phone</th>
                                    <td>{{ selectedRequest.customer.user.phone }}</td>
                                </tr>
                                <tr>
                                    <th>PIN Code</th>
                                    <td>{{ selectedRequest.customer.user.pin_code }}</td>
                                </tr>
                            </table>
                        </div>

                        <div class="mb-4">
                            <h6>Schedule</h6>
                            <table class="table table-sm">
                                <tr>
                                    <th style="width: 150px">Date</th>
                                    <td>{{ formatDate(selectedRequest.preferred_time) }}</td>
                                </tr>
                                <tr>
                                    <th>Time</th>
                                    <td>{{ formatTime(selectedRequest.preferred_time) }}</td>
                                </tr>
                                <tr>
                                    <th>Duration</th>
                                    <td>{{ selectedRequest.service.estimated_time }} minutes</td>
                                </tr>
                            </table>
                        </div>

                        <div class="mb-4">
                            <h6>Description</h6>
                            <p class="mb-0">{{ selectedRequest.description }}</p>
                        </div>

                        <div v-if="selectedRequest.status === 'completed'" class="mb-4">
                            <h6>Completion Details</h6>
                            <table class="table table-sm">
                                <tr>
                                    <th style="width: 150px">Completed On</th>
                                    <td>{{ formatDate(selectedRequest.date_of_completion) }}</td>
                                </tr>
                                <tr>
                                    <th>Remarks</th>
                                    <td>{{ selectedRequest.remarks || 'No remarks' }}</td>
                                </tr>
                            </table>
                        </div>

                        <div v-if="selectedRequest.review" class="mb-4">
                            <h6>Customer Review</h6>
                            <div class="bg-light p-3 rounded">
                                <div class="text-warning mb-2">
                                    <i v-for="n in 5" :key="n"
                                        :class="['bi', n <= selectedRequest.review.rating ? 'bi-star-fill' : 'bi-star']">
                                    </i>
                                </div>
                                <p class="mb-1">{{ selectedRequest.review.comment }}</p>
                                <small class="text-muted">
                                    Posted on {{ formatDate(selectedRequest.review.created_at) }}
                                </small>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref, computed, onMounted } from 'vue'
import { Modal } from 'bootstrap'
import moment from 'moment'
import axios from 'axios'

export default {
    name: 'ServiceRequests',

    setup() {
        // State
        const loading = ref(true)
        const activeTab = ref('available')
        const requests = ref([])
        const stats = ref({})
        const error = ref('')
        const accepting = ref(null)
        const completing = ref(false)
        const selectedRequest = ref(null)
        const completeModal = ref(null)
        const detailsModal = ref(null)
        const showSuccessAlert = ref(false)
        const successMessage = ref('')

        const completionForm = ref({
            remarks: ''
        })

        // Computed properties for different request types
        const availableRequests = computed(() =>
            requests.value.filter(r => r.status === 'created')
        )

        const activeJobs = computed(() =>
            requests.value.filter(r => r.status === 'assigned')
        )

        const completedJobs = computed(() =>
            requests.value.filter(r => r.status === 'completed')
        )

        // Fetch requests from backend
        const fetchRequests = async () => {
            try {
                loading.value = true
                const [requestsResponse, statsResponse] = await Promise.all([
                    axios.get('/api/professional/requests?type=all'),
                    axios.get('/api/dashboard-stats')
                ])

                requests.value = requestsResponse.data.data
                stats.value = statsResponse.data.data
            } catch (err) {
                console.error('Error fetching requests:', err)
                error.value = 'Failed to load service requests'
            } finally {
                loading.value = false
            }
        }

        // Accept a service request
        const handleAccept = async (request) => {
            try {
                accepting.value = request.id
                await axios.post(`/api/requests/${request.id}/accept`)
                await fetchRequests()
                showSuccessAlert.value = true
                successMessage.value = 'Service request accepted successfully'
            } catch (err) {
                error.value = err.response?.data?.detail || 'Failed to accept request'
            } finally {
                accepting.value = null
            }
        }

        // Open complete modal
        const openCompleteModal = (request) => {
            selectedRequest.value = request
            completionForm.value = { remarks: '' }
            error.value = ''

            if (!completeModal.value) {
                completeModal.value = new Modal(document.getElementById('completeModal'))
            }
            completeModal.value.show()
        }

        // Open details modal
        const openDetailsModal = (request) => {
            selectedRequest.value = request

            if (!detailsModal.value) {
                detailsModal.value = new Modal(document.getElementById('detailsModal'))
            }
            detailsModal.value.show()
        }

        // Complete a service
        const handleComplete = async () => {
            if (!selectedRequest.value || !completionForm.value.remarks.trim()) return

            try {
                completing.value = true
                await axios.post(`/api/requests/${selectedRequest.value.id}/complete`, completionForm.value)
                await fetchRequests()
                completeModal.value.hide()
                showSuccessAlert.value = true
                successMessage.value = 'Service marked as completed successfully'
            } catch (err) {
                error.value = err.response?.data?.detail || 'Failed to complete service'
            } finally {
                completing.value = false
            }
        }

        // Utility functions
        const formatDate = (date) => moment(date).format('MMM D, YYYY')
        const formatTime = (date) => moment(date).format('h:mm A')

        onMounted(() => {
            fetchRequests()
        })

        return {
            loading,
            activeTab,
            stats,
            error,
            accepting,
            completing,
            selectedRequest,
            completionForm,
            showSuccessAlert,
            successMessage,
            availableRequests,
            activeJobs,
            completedJobs,
            handleAccept,
            openCompleteModal,
            openDetailsModal,
            handleComplete,
            formatDate,
            formatTime
        }
    }
}
</script>

<style scoped>
.card {
    transition: box-shadow 0.3s ease-in-out;
}

.nav-tabs .nav-link {
    color: #6c757d;
}

.nav-tabs .nav-link.active {
    color: #0d6efd;
    font-weight: 500;
}

.table> :not(:first-child) {
    border-top: none;
}
</style>

================
File: src/views/profile/ProfilePage.vue
================
# src/views/profile/ProfilePage.vue
<template>
    <div class="container py-4">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <!-- Profile Header -->
                <div class="card mb-4 shadow-sm">
                    <div class="card-body text-center">
                        <div class="avatar-circle mb-3">
                            <i class="bi bi-person-circle display-1 text-primary"></i>
                        </div>
                        <h4 class="mb-1">{{ profileData.full_name }}</h4>
                        <p class="text-muted mb-3">{{ profileData.role }}</p>
                        <div v-if="isProfessional" class="d-flex justify-content-center align-items-center gap-2">
                            <span :class="['badge', profileData.is_verified ? 'bg-success' : 'bg-warning']">
                                {{ profileData.is_verified ? 'Verified' : 'Pending Verification' }}
                            </span>
                            <div class="text-warning" v-if="profileData.average_rating">
                                <i class="bi bi-star-fill"></i>
                                {{ profileData.average_rating.toFixed(1) }}
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Navigation Tabs -->
                <ul class="nav nav-tabs mb-4">
                    <li class="nav-item">
                        <a class="nav-link" :class="{ active: activeTab === 'profile' }" href="#"
                            @click.prevent="activeTab = 'profile'">Profile Details</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" :class="{ active: activeTab === 'security' }" href="#"
                            @click.prevent="activeTab = 'security'">Security</a>
                    </li>
                    <li class="nav-item" v-if="isProfessional">
                        <a class="nav-link" :class="{ active: activeTab === 'documents' }" href="#"
                            @click.prevent="activeTab = 'documents'">Documents</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" :class="{ active: activeTab === 'danger' }" href="#"
                            @click.prevent="activeTab = 'danger'">Danger Zone</a>
                    </li>
                </ul>

                <!-- Form Navigation Guard -->
                <FormNavigationGuard :is-dirty="formIsDirty" @proceed="handleNavigationConfirm" />

                <!-- Profile Details Form -->
                <div v-show="activeTab === 'profile'" class="card shadow-sm">
                    <div class="card-body">
                        <form @submit.prevent="handleProfileUpdate">
                            <div class="row g-3">
                                <!-- Basic Information -->
                                <div class="col-12">
                                    <h5 class="border-bottom pb-2">Basic Information</h5>
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label">Username</label>
                                    <input type="text" class="form-control" v-model="form.username" disabled>
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label">Email</label>
                                    <input type="email" class="form-control" v-model="form.email"
                                        :disabled="!isOwnProfile" required>
                                </div>

                                <div class="col-12">
                                    <label class="form-label">Full Name</label>
                                    <input type="text" class="form-control" v-model="form.full_name"
                                        :disabled="!isOwnProfile" required>
                                </div>

                                <!-- Contact Information -->
                                <div class="col-12">
                                    <h5 class="border-bottom pb-2 mt-2">Contact Details</h5>
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label">Phone Number</label>
                                    <input type="tel" class="form-control" v-model="form.phone"
                                        :disabled="!isOwnProfile" required>
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label">PIN Code</label>
                                    <input type="text" class="form-control" v-model="form.pin_code"
                                        :disabled="!isOwnProfile" required>
                                </div>

                                <div class="col-12">
                                    <label class="form-label">Address</label>
                                    <textarea class="form-control" v-model="form.address" :disabled="!isOwnProfile"
                                        rows="3" required></textarea>
                                </div>

                                <!-- Professional Details -->
                                <template v-if="isProfessional">
                                    <div class="col-12">
                                        <h5 class="border-bottom pb-2 mt-2">Professional Details</h5>
                                    </div>

                                    <div class="col-md-6">
                                        <label class="form-label">Service Type</label>
                                        <select class="form-select" v-model="form.service_type_id"
                                            :disabled="!isOwnProfile || hasActiveRequests">
                                            <option v-for="service in services" :key="service.id" :value="service.id">
                                                {{ service.name }}
                                            </option>
                                        </select>
                                    </div>

                                    <div class="col-md-6">
                                        <label class="form-label">Years of Experience</label>
                                        <input type="number" class="form-control" v-model="form.experience_years"
                                            :disabled="!isOwnProfile">
                                    </div>

                                    <div class="col-12">
                                        <label class="form-label">Professional Description</label>
                                        <textarea class="form-control" v-model="form.description"
                                            :disabled="!isOwnProfile" rows="4"></textarea>
                                    </div>
                                </template>

                                <!-- Submit Button -->
                                <div class="col-12" v-if="isOwnProfile">
                                    <div class="d-grid gap-2">
                                        <button type="submit" class="btn btn-primary"
                                            :disabled="updating || !formIsDirty">
                                            <span v-if="updating" class="spinner-border spinner-border-sm me-2"></span>
                                            {{ updating ? 'Updating...' : 'Update Profile' }}
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- Security Tab -->
                <div v-show="activeTab === 'security'" class="card shadow-sm">
                    <div class="card-body">
                        <form @submit.prevent="handlePasswordChange">
                            <div class="mb-3">
                                <label class="form-label">Current Password</label>
                                <input type="password" class="form-control" v-model="passwordForm.old_password"
                                    required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">New Password</label>
                                <input type="password" class="form-control" v-model="passwordForm.new_password"
                                    required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Confirm New Password</label>
                                <input type="password" class="form-control" v-model="passwordForm.confirm_password"
                                    required>
                            </div>
                            <button type="submit" class="btn btn-primary" :disabled="changingPassword">
                                <span v-if="changingPassword" class="spinner-border spinner-border-sm me-2"></span>
                                {{ changingPassword ? 'Changing Password...' : 'Change Password' }}
                            </button>
                        </form>
                    </div>
                </div>

                <!-- Documents Tab -->
                <div v-show="activeTab === 'documents'" class="card shadow-sm">
                    <div class="card-body">
                        # src/views/profile/ProfilePage.vue (continued)
                        <form @submit.prevent="handleDocumentUpdate" enctype="multipart/form-data">
                            <div class="mb-4">
                                <h6>Current Document Status</h6>
                                <div v-if="profileData.verification_documents" class="bg-light p-3 rounded">
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-file-earmark-text fs-4 text-primary me-2"></i>
                                        <div>
                                            <p class="mb-0">Verification Document</p>
                                            <small class="text-muted">Uploaded on {{
                                                formatDate(profileData.document_upload_date)
                                            }}</small>
                                        </div>
                                        <a href="#" class="btn btn-sm btn-outline-primary ms-auto"
                                            @click.prevent="viewDocument">
                                            View Document
                                        </a>
                                    </div>
                                </div>
                                <div v-else class="alert alert-warning">
                                    <i class="bi bi-exclamation-triangle me-2"></i>
                                    No verification documents uploaded yet.
                                </div>
                            </div>

                            <div v-if="isOwnProfile" class="mb-4">
                                <h6>Update Document</h6>
                                <div class="alert alert-info mb-3">
                                    <i class="bi bi-info-circle me-2"></i>
                                    Uploading new documents will require re-verification of your account.
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">New Verification Document</label>
                                    <input type="file" class="form-control" @change="handleFileChange"
                                        accept=".pdf,.jpg,.jpeg,.png" required>
                                    <div class="form-text">Accepted formats: PDF, JPG, PNG (max 5MB)</div>
                                </div>
                                <button type="submit" class="btn btn-primary"
                                    :disabled="uploadingDocument || !selectedFile">
                                    <span v-if="uploadingDocument" class="spinner-border spinner-border-sm me-2"></span>
                                    {{ uploadingDocument ? 'Uploading...' : 'Upload Document' }}
                                </button>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- Danger Zone Tab -->
                <div v-show="activeTab === 'danger'" class="card shadow-sm border-danger">
                    <div class="card-header bg-danger text-white">
                        <h5 class="mb-0">Danger Zone</h5>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            Actions in this section are irreversible. Please proceed with caution.
                        </div>

                        <div class="mb-4">
                            <h6>Delete Account</h6>
                            <p class="text-muted">Once you delete your account, there is no going back. Please be
                                certain.</p>
                            <button class="btn btn-danger" @click="showDeleteConfirm">
                                Delete Account
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Confirm Profile Update Modal -->
    <ConfirmDialog id="updateConfirmDialog" title="Confirm Profile Update"
        message="Are you sure you want to update your profile information?" type="primary" confirmText="Update"
        @confirm="confirmProfileUpdate" />

    <!-- Confirm Delete Account Modal -->
    <ConfirmDialog id="deleteConfirmDialog" title="Delete Account"
        message="This action cannot be undone. Please enter your password to confirm." type="danger"
        confirmText="Delete Forever" @confirm="confirmDeleteAccount">
        <template #body>
            <p class="mb-3">This action cannot be undone. Please enter your password to confirm.</p>
            <input type="password" class="form-control" v-model="deleteForm.password" placeholder="Enter your password">
        </template>
    </ConfirmDialog>

    <!-- View Document Modal -->
    <div class="modal fade" id="documentModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Verification Document</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <iframe :src="documentUrl" width="100%" height="600px" frameborder="0"></iframe>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref, computed, onMounted, watch } from 'vue'
import { useStore } from 'vuex'
import { useRoute, useRouter } from 'vue-router'
import { Modal } from 'bootstrap'
import moment from 'moment'
import axios from 'axios'
import _ from 'lodash'

import ConfirmDialog from '@/components/shared/ConfirmDialog.vue'
import FormNavigationGuard from '@/components/shared/FormNavigationGuard.vue'
import { useProfileManagement } from '@/composables/useProfileManagement'
import { useProfessionalProfile } from '@/composables/useProfessionalProfile'

export default {
    name: 'ProfilePage',
    components: {
        ConfirmDialog,
        FormNavigationGuard
    },

    setup() {
        const store = useStore()
        const route = useRoute()
        const router = useRouter()

        // State
        const activeTab = ref('profile')
        const profileData = ref({})
        const services = ref([])
        const loading = ref(true)
        const updating = ref(false)
        const changingPassword = ref(false)
        const uploadingDocument = ref(false)
        const selectedFile = ref(null)
        const documentUrl = ref('')

        // Form states
        const form = ref({})
        const originalForm = ref({})
        const passwordForm = ref({
            old_password: '',
            new_password: '',
            confirm_password: ''
        })
        const deleteForm = ref({
            password: ''
        })

        const {
            form,
            v$,
            formIsDirty,
            passwordForm,
            isOwnProfile,
            fetchProfile,
            updateProfile,
            changePassword,
            deleteAccount
        } = useProfileManagement()

        // Add professional features if user is professional
        const {
            verificationDoc,
            docError,
            hasActiveRequests,
            handleDocChange,
            updateDocument
        } = useProfessionalProfile()

        // Computed properties
        const isOwnProfile = computed(() => {
            return route.params.id ?
                store.getters['auth/userId'] === parseInt(route.params.id) :
                true
        })

        const isProfessional = computed(() => profileData.value.role === 'professional')

        const formIsDirty = computed(() => {
            return !_.isEqual(form.value, originalForm.value)
        })

        const hasActiveRequests = computed(() => {
            // Logic to check if professional has active requests
            return false // Implement the actual check
        })

        // Methods
        const fetchProfile = async () => {
            try {
                loading.value = true
                const response = await axios.get(route.params.id ?
                    `/api/users/${route.params.id}` : '/api/profile')
                profileData.value = response.data.data

                // Initialize form with profile data
                form.value = _.cloneDeep(profileData.value)
                originalForm.value = _.cloneDeep(profileData.value)

                if (isProfessional.value) {
                    fetchServices()
                }
            } catch (error) {
                window.showToast({
                    type: 'danger',
                    title: 'Error',
                    message: 'Failed to load profile data'
                })
            } finally {
                loading.value = false
            }
        }

        const fetchServices = async () => {
            try {
                const response = await axios.get('/api/services')
                services.value = response.data.data
            } catch (error) {
                console.error('Error fetching services:', error)
            }
        }

        const handleProfileUpdate = async () => {
            const modal = new Modal(document.getElementById('updateConfirmDialog'))
            modal.show()
        }

        const confirmProfileUpdate = async () => {
            try {
                updating.value = true
                await axios.put('/api/profile', form.value)

                originalForm.value = _.cloneDeep(form.value)
                window.showToast({
                    type: 'success',
                    title: 'Success',
                    message: 'Profile updated successfully'
                })
            } catch (error) {
                window.showToast({
                    type: 'danger',
                    title: 'Error',
                    message: error.response?.data?.message || 'Failed to update profile'
                })
            } finally {
                updating.value = false
            }
        }

        const handlePasswordChange = async () => {
            if (passwordForm.value.new_password !== passwordForm.value.confirm_password) {
                window.showToast({
                    type: 'danger',
                    title: 'Error',
                    message: 'Passwords do not match'
                })
                return
            }

            try {
                changingPassword.value = true
                await axios.post('/api/change-password', {
                    old_password: passwordForm.value.old_password,
                    new_password: passwordForm.value.new_password
                })

                passwordForm.value = {
                    old_password: '',
                    new_password: '',
                    confirm_password: ''
                }

                window.showToast({
                    type: 'success',
                    title: 'Success',
                    message: 'Password changed successfully'
                })
            } catch (error) {
                window.showToast({
                    type: 'danger',
                    title: 'Error',
                    message: error.response?.data?.message || 'Failed to change password'
                })
            } finally {
                changingPassword.value = false
            }
        }

        const handleFileChange = (event) => {
            const file = event.target.files[0]
            if (file) {
                if (file.size > 5 * 1024 * 1024) {
                    window.showToast({
                        type: 'danger',
                        title: 'Error',
                        message: 'File size should not exceed 5MB'
                    })
                    event.target.value = ''
                    return
                }
                selectedFile.value = file
            }
        }

        const handleDocumentUpdate = async () => {
            if (!selectedFile.value) return

            const formData = new FormData()
            formData.append('verification_document', selectedFile.value)

            try {
                uploadingDocument.value = true
                await axios.put('/api/professionals/document', formData, {
                    headers: {
                        'Content-Type': 'multipart/form-data'
                    }
                })

                window.showToast({
                    type: 'success',
                    title: 'Success',
                    message: 'Document uploaded successfully'
                })

                // Refresh profile data
                await fetchProfile()
            } catch (error) {
                window.showToast({
                    type: 'danger',
                    title: 'Error',
                    message: error.response?.data?.message || 'Failed to upload document'
                })
            } finally {
                uploadingDocument.value = false
                selectedFile.value = null
            }
        }

        const showDeleteConfirm = () => {
            const modal = new Modal(document.getElementById('deleteConfirmDialog'))
            modal.show()
        }

        const confirmDeleteAccount = async () => {
            try {
                await axios.delete('/api/delete-account', {
                    data: { password: deleteForm.value.password }
                })

                await store.dispatch('auth/logout')
                router.push('/login')
            } catch (error) {
                window.showToast({
                    type: 'danger',
                    title: 'Error',
                    message: error.response?.data?.message || 'Failed to delete account'
                })
            }
        }

        const viewDocument = () => {
            if (profileData.value.verification_documents) {
                documentUrl.value = `/api/static/uploads/verification_docs/${profileData.value.verification_documents}`
                const modal = new Modal(document.getElementById('documentModal'))
                modal.show()
            }
        }

        const formatDate = (date) => moment(date).format('MMMM D, YYYY')

        // Handle navigation
        const handleNavigationConfirm = () => {
            form.value = _.cloneDeep(originalForm.value)
        }

        // Lifecycle hooks
        onMounted(() => {
            fetchProfile()
        })

        return {
            activeTab,
            profileData,
            services,
            form,
            passwordForm,
            deleteForm,
            loading,
            updating,
            changingPassword,
            uploadingDocument,
            selectedFile,
            documentUrl,
            isOwnProfile,
            isProfessional,
            formIsDirty,
            hasActiveRequests,
            handleProfileUpdate,
            confirmProfileUpdate,
            handlePasswordChange,
            handleFileChange,
            handleDocumentUpdate,
            showDeleteConfirm,
            confirmDeleteAccount,
            viewDocument,
            handleNavigationConfirm,
            formatDate
        }
    }
}
</script>

<style scoped>
.avatar-circle {
    width: 100px;
    height: 100px;
    margin: 0 auto;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f8f9fa;
}

.nav-tabs .nav-link {
    color: #6c757d;
}

.nav-tabs .nav-link.active {
    color: #0d6efd;
    font-weight: 500;
}

.form-label {
    font-weight: 500;
}

.card {
    transition: all 0.2s ease;
}

.card:hover {
    box-shadow: 0 .5rem 1rem rgba(0, 0, 0, .15) !important;
}
</style>

================
File: src/views/public/AboutPage.vue
================
<template>
    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <h1 class="text-center mb-4">About Us</h1>
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title mb-4">Your Trusted Partner for Home Services</h5>
                        <p class="card-text">
                            Welcome to Household Services, your one-stop platform for all your home service needs. We
                            connect skilled professionals with homeowners to deliver quality home services efficiently
                            and reliably.
                        </p>
                        <h5 class="mt-4 mb-3">Our Mission</h5>
                        <p>
                            To provide exceptional home services by connecting skilled professionals with homeowners,
                            ensuring quality, reliability, and satisfaction in every service interaction.
                        </p>
                        <h5 class="mt-4 mb-3">Why Choose Us?</h5>
                        <div class="row g-4">
                            <div class="col-md-6">
                                <div class="d-flex align-items-start">
                                    <i class="bi bi-check-circle-fill text-success fs-4 me-2"></i>
                                    <div>
                                        <h6>Verified Professionals</h6>
                                        <p class="text-muted">All our service providers undergo thorough verification
                                        </p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="d-flex align-items-start">
                                    <i class="bi bi-shield-check text-primary fs-4 me-2"></i>
                                    <div>
                                        <h6>Quality Assured</h6>
                                        <p class="text-muted">We maintain high standards of service quality</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="d-flex align-items-start">
                                    <i class="bi bi-clock-history text-warning fs-4 me-2"></i>
                                    <div>
                                        <h6>Timely Service</h6>
                                        <p class="text-muted">Punctual and efficient service delivery</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="d-flex align-items-start">
                                    <i class="bi bi-cash-stack text-success fs-4 me-2"></i>
                                    <div>
                                        <h6>Transparent Pricing</h6>
                                        <p class="text-muted">No hidden charges, clear pricing</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

================
File: src/views/public/ContactPage.vue
================
<template>
    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <h1 class="text-center mb-4">Contact Us</h1>
                <div class="card shadow-sm">
                    <div class="card-body">
                        <form @submit.prevent="handleSubmit" class="needs-validation" novalidate>
                            <div class="mb-3">
                                <label for="name" class="form-label">Your Name</label>
                                <input type="text" class="form-control" id="name" v-model="form.name" required>
                            </div>
                            <div class="mb-3">
                                <label for="email" class="form-label">Email Address</label>
                                <input type="email" class="form-control" id="email" v-model="form.email" required>
                            </div>
                            <div class="mb-3">
                                <label for="subject" class="form-label">Subject</label>
                                <input type="text" class="form-control" id="subject" v-model="form.subject" required>
                            </div>
                            <div class="mb-3">
                                <label for="message" class="form-label">Message</label>
                                <textarea class="form-control" id="message" rows="5" v-model="form.message"
                                    required></textarea>
                            </div>
                            <button type="submit" class="btn btn-primary" :disabled="submitting">
                                <span v-if="submitting" class="spinner-border spinner-border-sm me-2"></span>
                                {{ submitting ? 'Sending...' : 'Send Message' }}
                            </button>
                        </form>

                        <hr class="my-5">

                        <h5 class="mb-4">Other Ways to Reach Us</h5>
                        <div class="row g-4">
                            <div class="col-md-6">
                                <div class="d-flex align-items-start">
                                    <i class="bi bi-envelope fs-4 text-primary me-3"></i>
                                    <div>
                                        <h6>Email</h6>
                                        <p class="text-muted mb-0">support@householdservices.com</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="d-flex align-items-start">
                                    <i class="bi bi-telephone fs-4 text-primary me-3"></i>
                                    <div>
                                        <h6>Phone</h6>
                                        <p class="text-muted mb-0">+91 1234567890</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { ref, reactive } from 'vue'

export default {
    name: 'ContactPage',
    setup() {
        const submitting = ref(false)
        const form = reactive({
            name: '',
            email: '',
            subject: '',
            message: ''
        })

        const handleSubmit = async () => {
            submitting.value = true
            // Add your form submission logic here
            await new Promise(resolve => setTimeout(resolve, 1000))
            alert('Message sent successfully!')
            submitting.value = false
        }

        return {
            form,
            submitting,
            handleSubmit
        }
    }
}
</script>

================
File: src/views/public/PrivacyPage.vue
================
<template>
    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <h1 class="text-center mb-4">Privacy Policy</h1>
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5>Your Privacy Matters</h5>
                        <p>This Privacy Policy outlines how Household Services collects, uses, and protects your
                            personal information.</p>

                        <h5 class="mt-4">Information We Collect</h5>
                        <ul>
                            <li>Personal identification information</li>
                            <li>Contact information</li>
                            <li>Service usage data</li>
                            <li>Payment information</li>
                        </ul>

                        <h5 class="mt-4">How We Use Your Information</h5>
                        <ul>
                            <li>To provide and improve our services</li>
                            <li>To process payments</li>
                            <li>To communicate with you</li>
                            <li>To maintain service quality</li>
                        </ul>

                        <h5 class="mt-4">Information Security</h5>
                        <p>We implement security measures to maintain the safety of your personal information.</p>

                        <h5 class="mt-4">Third-party Disclosure</h5>
                        <p>We do not sell, trade, or transfer your information to third parties without your consent.
                        </p>

                        <h5 class="mt-4">Your Rights</h5>
                        <ul>
                            <li>Right to access your data</li>
                            <li>Right to correct your data</li>
                            <li>Right to delete your data</li>
                            <li>Right to withdraw consent</li>
                        </ul>

                        <div class="mt-4 text-muted">
                            <p>Last updated: March 2024</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

================
File: src/views/public/ServicesPage.vue
================
<template>
  <div class="container py-5">
    <h1 class="mb-4">Our Services</h1>
    <div class="row g-4">
      <div v-if="loading" class="col-12 text-center">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <div v-else class="col-md-4" v-for="service in services" :key="service.id">
        <div class="card h-100 shadow-sm">
          <div class="card-body">
            <h5 class="card-title">{{ service.name }}</h5>
            <p class="card-text text-muted">{{ service.description }}</p>
            <div class="d-flex justify-content-between align-items-center">
              <div class="text-muted">
                <i class="bi bi-clock me-1"></i>
                {{ service.estimated_time }} mins
              </div>
              <div class="fw-bold text-primary">
                ₹{{ service.base_price }}
              </div>
            </div>
          </div>
          <div class="card-footer bg-transparent text-center">
            <router-link to="/register/customer" class="btn btn-primary">Book Now</router-link>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { ref, onMounted } from 'vue'
import axios from 'axios'

export default {
  name: 'ServicesPage',
  setup() {
    const services = ref([])
    const loading = ref(true)

    const fetchServices = async () => {
      try {
        const response = await axios.get('/api/services')
        services.value = response.data.data
      } catch (error) {
        console.error('Error fetching services:', error)
      } finally {
        loading.value = false
      }
    }

    onMounted(fetchServices)

    return {
      services,
      loading
    }
  }
}
</script>

================
File: src/views/public/TermsPage.vue
================
<template>
    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <h1 class="text-center mb-4">Terms of Service</h1>
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5>1. Terms</h5>
                        <p>By accessing this website, you agree to be bound by these website Terms and Conditions of
                            Use.</p>

                        <h5 class="mt-4">2. Use License</h5>
                        <p>Permission is granted to temporarily access the materials on Household Services's website.
                        </p>

                        <h5 class="mt-4">3. Service Terms</h5>
                        <ul class="list-unstyled">
                            <li class="mb-3">✓ All professionals are verified</li>
                            <li class="mb-3">✓ Services are subject to availability</li>
                            <li class="mb-3">✓ Cancellation policy applies</li>
                            <li class="mb-3">✓ Payment terms are strictly followed</li>
                        </ul>

                        <h5 class="mt-4">4. Disclaimer</h5>
                        <p>The materials on Household Services's website are provided on an 'as is' basis.</p>

                        <h5 class="mt-4">5. Limitations</h5>
                        <p>Household Services shall not be held liable for any damages arising from the use of this
                            website.</p>

                        <h5 class="mt-4">6. Revisions</h5>
                        <p>Household Services may revise these terms of use at any time without notice.</p>

                        <div class="mt-4 text-muted">
                            <p>Last updated: March 2024</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

================
File: src/views/Register.vue
================
<template>
    <div class="container mt-5">
      <div class="row justify-content-center">
        <div class="col-md-6 col-lg-4">
          <div class="card">
            <div class="card-body">
              <h2 class="text-center mb-4">Register</h2>
              <form @submit.prevent="handleSubmit">
                <div class="mb-3">
                  <label for="username" class="form-label">Username</label>
                  <input type="text" id="username" v-model="username" class="form-control" required />
                </div>
                <div class="mb-3">
                  <label for="password" class="form-label">Password</label>
                  <input type="password" id="password" v-model="password" class="form-control" required />
                </div>
                <div class="mb-3">
                  <label for="confirmPassword" class="form-label">Confirm Password</label>
                  <input type="password" id="confirmPassword" v-model="confirmPassword" class="form-control" required />
                </div>
                <button type="submit" class="btn btn-primary w-100">Register</button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </template>
  
  <script>
  import { ref } from 'vue';
  
  export default {
    setup() {
      const username = ref('');
      const password = ref('');
      const confirmPassword = ref('');
  
      const handleSubmit = () => {
        // Add registration logic here
        alert('Registration submitted');
      };
  
      return {
        username,
        password,
        confirmPassword,
        handleSubmit,
      };
    },
  };
  </script>

================
File: vite.config.js
================
import { fileURLToPath, URL } from 'node:url'

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import VueDevTools from 'vite-plugin-vue-devtools'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    vue(),
    VueDevTools(),
  ],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    }
  },
  base: '/',
  build: {
    outDir: '../build', // Set the output directory to the project root
    emptyOutDir: true, // Clear the output directory before building
    assetsDir: 'static'
  }
})
